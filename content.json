{"meta":{"title":"기린개발의 일지","subtitle":"Girin-dev's development Blog.","description":"Girin-dev의 웹 개발 일지입니다.","author":"Girin-dev","url":"http://girin-dev.github.io"},"pages":[{"title":"","date":"2018-01-10T07:39:37.556Z","updated":"2018-01-10T07:39:37.000Z","comments":false,"path":"tags/index.html","permalink":"http://girin-dev.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"review-FC-frontend-yamoo9","slug":"review-FC-frontend-yamoo9","date":"2018-04-23T14:51:05.000Z","updated":"2019-01-03T03:29:24.000Z","comments":true,"path":"2018/04/23/review-FC-frontend-yamoo9/","link":"","permalink":"http://girin-dev.github.io/2018/04/23/review-FC-frontend-yamoo9/","excerpt":"","text":"Fastcampus 프론트엔드 개발 시작하기 CAMP #0. Orientation패스트캠퍼스의 온라인 강의 체험단이번에 FastCampus의 온라인 강의 체험단이 되어 &lt;프론트엔드 개발 시작하기 CAMP&gt;라는 강의를 리뷰하게 되었습니다. 사실은 3월부터 들어왔던 수업인데 너무나도 뒤늦게 리뷰를 작성하고 있어 담당자 분께는 다소 죄송스러운 마음도 갖고 있습니다ㅎㅎ;; 어찌되었든 앞으로 차근차근 리뷰를 작성해보려고 합니다. 원래 패스트캠퍼스는 오프라인 강의(캠프와 스쿨)를 위주로 운영되는 곳입니다. 그런데 이번에 온라인 강의를 시작하면서 다양한 시도를 하는 것 같습니다. 특히 이번 프론트엔드 관련 온라인 강의는 야무님(yamoo9)님과 같이 진행되어 더욱 기대감이 컸습니다. 야무님은 &lt;만들면서 배우는 모던 웹사이트 제작&gt;의 저자이시기도 합니다. 왜 듣게 되었나 제가 이 체험단을 신청하게 된 가장 큰 이유도 야무님의 수업을 듣고 싶었기 때문입니다. 야무님은 이미 웹개발자와 웹디자이너 사이에서 유명하시고, 저 또한 주변 개발자들로부터 좋은 이야기를 듣고 있었던 터라 수업을 꼭 들어보고 싶었습니다. 무엇보다 HTML과 CSS에 대한 기본 지식이 많이 부족하다고 생각했기에 이를 공부해야 할 필요를 느꼈습니다. 작년에 들었던 패스트캠퍼스 프론트엔드 스쿨 과정에서도 많이 아쉬웠던 점이 HTML과 CSS 부분이었기 때문입니다. 그거 퍼블리싱 아니야?HTML과 CSS를 공부한다고 하면 많은 분들이 ‘프론트엔드’보다 ‘퍼블리싱’을 떠올립니다. 거기에 퍼블리싱에 대한 막연한 편견까지 더해지기까지 합니다. 하지만 웹문서/웹어플리케이션의 구조를 짜지 못하고 레이아웃을 못 잡고 CSS 스타일링에 미숙하다면 그 사람을 프론트엔드 개발자라고 할 수 있을까요? 저는 JavaScript의 주요 역할 중 하나가 여전히 HTML과 CSS를 지원하는 것이라고 생각하고 있습니다.(물론 이게 전부는 아닙니다.) JavaScript를 아무리 잘하고 Angular와 React, Vue.js 등의 최신 웹 프레임워크를 아무리 잘 한다고 할지라도 HTML과 CSS를 못하면 말짱 도로묵이라고 생각합니다. JavaScript는 얼마나 배우는가사실 아직 강의를 전부 듣지 못하였기 때문에 정확하게는 알지 못합니다만, 분명 이 수업은 최신 웹 프레임워크를 전문적으로 파는 강의도 JavaScript의 전문적, 학문적 수준의 깊이있는 원리를 다루지도 않을 것입니다. 예상하건데 JavaScript에 대한 기본 문법 강의와 jQuery, Ajax 등을 다루게 될 것입니다. 그래서 누구를 위한 강의인가따라서 이 강의는 정말 프로그래밍을 한번도 겪어보지 않은 분들에게 유효한 강의라고 생각합니다. 물론 시중에 많은 강의들이 있고 심지어 생활코딩이나 Codecademy 등 비슷한 주제를 무료로 들을 수 있는 방법도 있습니다. 그러나 이러한 강의에 비해 패스트캠퍼스 프론트엔드 개발 시작하기 CAMP는 Yamoo9님의 강의를 생생하게 들을 수 있다는 점, 그리고 꾸준한 피드백과 QnA를 통해 직접 수업을 듣고 있다는 느낌을 줍니다. 이것은 온라인 강의에서 쉽게 느낄 수 있는 ‘중도포기’를 방지하는데 큰 도움이 됩니다. 프로그래밍을 대충 맛만 보고 끝내는 것이 아니라 ‘자신의 포트폴리오 제작’ 이라는 목표를 달성하는 본 강의는 프로그래밍을 처음으로 하게 되는 학생들에게 좌절과 어려움의 기억이 아니라 성공과 결과물이라는 자신감을 안겨줄 것입니다. 그렇기 때문에 완전히 프로그래밍을 해보지 않은 사람이 차근차근 따라할 수 있는 강의라고 생각합니다. 이후에 쓸 리뷰는?지금까지 아직 강의를 다 듣지도 않고 쓴 오리엔테이션 성격의 중간 리뷰였습니다. 앞으로는 구체적으로 강의를 들으면서 느꼈던 점, 아쉬웠던 점, 개선점들을 위주로 작성해볼까 합니다. 지금까지 읽어주셔서 감사합니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"http://girin-dev.github.io/categories/ETC/"}],"tags":[{"name":"Self_Review","slug":"Self-Review","permalink":"http://girin-dev.github.io/tags/Self-Review/"},{"name":"Fastcampus","slug":"Fastcampus","permalink":"http://girin-dev.github.io/tags/Fastcampus/"},{"name":"yamoo9","slug":"yamoo9","permalink":"http://girin-dev.github.io/tags/yamoo9/"},{"name":"frontend","slug":"frontend","permalink":"http://girin-dev.github.io/tags/frontend/"}]},{"title":"Network-00-orientation","slug":"Network-00-orientation","date":"2018-04-16T13:56:23.000Z","updated":"2019-01-03T03:22:21.642Z","comments":true,"path":"2018/04/16/Network-00-orientation/","link":"","permalink":"http://girin-dev.github.io/2018/04/16/Network-00-orientation/","excerpt":"","text":"","categories":[{"name":"Network/HTTP","slug":"Network-HTTP","permalink":"http://girin-dev.github.io/categories/Network-HTTP/"}],"tags":[{"name":"네트워크","slug":"네트워크","permalink":"http://girin-dev.github.io/tags/네트워크/"}]},{"title":"Network-01-message","slug":"Network-01-message","date":"2018-04-16T13:38:06.000Z","updated":"2019-01-03T03:22:24.640Z","comments":true,"path":"2018/04/16/Network-01-message/","link":"","permalink":"http://girin-dev.github.io/2018/04/16/Network-01-message/","excerpt":"","text":"웹 브라우저가 메시지를 만든다01. HTTP 리퀘스트 메시지를 작성한다 protocol 쌍방간의 약속 http 인터넷 통신 프로토콜, TCP/IP 의존적(더 깊은 layer) Web에서 데이터를 주고 받기 위한 protocol로 요청과 응답이라는 쌍으로 이루어져있다. 요청이 와야 응답이 오고, 요청이 없으면 응답도 없다. 무한 대기할 필요가 없으니 서버 부하가 적고, 이를 통해 http가 서버에 유리하게 설계되어 있음을 알 수 있다. 이러한 특성으로 서버 하나가 다량의 클라이언트를 상대할 수 있다. 1요청에 1응답이 가능할 뿐이므로 상태를 유지할 수 없다.stateless URL과 URI URL URL(Uniform/Universal Resource Locator)은 어디에서나 접근 가능한 장소(한정적)를 나타내는 말 http: ftp: file: mailto: 등 브라우저의 클라이언트 기능에 따라 다양하게 존재 protocol과 서버이름, 리소스의 위치로 구성 URL 마지막에 /를 생략해도 무관하며 이 경우 index.html 파일을 불러오거나 적절한 파일/디렉토리를 연다 URL 자체가 반드시 요청자의 바람대로 응답이 온다는 것을 보장하지 않는다. 응답은 전적으로 서버의 몫이며, 요청은 단순히 요청일 뿐이다.(W3C는 신뢰성을 위해 URL을 배포할 때 변화가 없는 것을 권장한다.) URI URI(Uniform/Universal Resource Identifier)로 URL보다 다양한 의미를 가지며 떄로 URL이 URI가 되기도 한다. 요청메시지와 응답메시지 요청메시지 요청 메시지 자체는 특별한 형식으로 작성되어 있다는 것을 내포하며, 헤더, 바디로 구성되어 있다. 메소드는 URI와 함께 쓰여 요청메시지를 구성하며, 해당 메시지의 목적을 나타낸다. GET(받겠다) POST(보내겠다) HEAD(head만 보겠다) OPTIONS(통신의 옵션을 통지/조사하겠다) PUT(놓겠다/넣겠다) DELETE(지정한 서버의 파일을 삭제하겠다) TRACE(리퀘스트 라인과 헤더를 그대로 클라이언트에 반송한다) CONNECT(암호화한 메시지를 프록시로 전송하겠다) 응답메시지 응답코드+헤더+바디","categories":[{"name":"Network/HTTP","slug":"Network-HTTP","permalink":"http://girin-dev.github.io/categories/Network-HTTP/"}],"tags":[{"name":"네트워크","slug":"네트워크","permalink":"http://girin-dev.github.io/tags/네트워크/"}]},{"title":"review-programming-together","slug":"review-programming-together","date":"2018-04-03T02:50:13.000Z","updated":"2019-01-03T03:30:37.000Z","comments":true,"path":"2018/04/03/review-programming-together/","link":"","permalink":"http://girin-dev.github.io/2018/04/03/review-programming-together/","excerpt":"","text":"기초튼튼 코드튼튼 다 함께 프로그래밍타니지리 카오리 지음 / 제이펍 출판 프로그래밍의 일곱 절차 테마 정하기 줄거리 만들기 시나리오 작성 프로그래밍 언어로 번역 움직여보기 확인하기 버전업 줄거리와 시나리오 작성을 위한 힌트데이터의 변화를 고려한다.(자료구조를 어떻게 가져갈 것인가?) 변수명 붙이는 방법 테이터의 의미를 알 수 있는 이름 프로그래밍 언어의 규칙 준수 명령어와 동일한 이름 사용 금지 팀 내 규칙 준수 프로그래머 세계의 상식 준수 계산식에서 문제 발생 원인은? 2진법의 프로그래밍상 오차(실수 계산) 식작성법에서의 오류나 산술연산자의 우선순위 실수 (, )을 잘못 작성한 경우 사칙연상의 우선순위 고려해야 함(부호&gt;곱셈/나눗셈&gt;덧셈/뺄샘&gt;대입) 데이터 타입 선정의 오류 실수형 자료를 정수형에 넣고 계산하는 경우 나누기 오류 0으로 나누기를 시도한 경우 실수 데이터를을 정수형 변수에 넣어 0이 되어버린 경우(나누기0은 성립할 수 없다.) 프로그래밍의 흐름프로그래밍은 순차실행, 조건판단, 반복이라는 세 개의 구조만으로 이루어진다.점프명령은 꼭 필요한 경우(에러검출 등)가 아니면 사용금지 순차실행 프로그램에 기술한 순서대로 명령을 실행하는 것 순차실행이 꼬이는 경우 ‘이해하기 어려운 프로그램’이 될 수 있음(의도적으로 명령 순서를 바꾼 프로그램) 조건판단 조건판단 구조에서 주의할 것은 지정한 모든 조건에 해당하지 않을 때 실행할 처리를 준비해야 한다는 것. 이것은 버그 발견이나 사용자 경험에도 유익 조건판단의 종류 만약~라면(if) 먄약~라면, 그 이외의 경우는(if, else if, else) 만약이 많은 경우(switch) 중첩된 조건판단(nest) 반복 횟수를 정해주는 반복 for 횟수를 모르는 상황에서의 반복 while 선조건판단: 조건이 참인지 판단 -&gt; 명령 시행 후 조건 검사 -&gt; 반복 후조건판단: 명령 시행 -&gt; 조건이 참인지 판단 -&gt; 반복 후조건 판단시 카운터의 증가분과 종료값의 관계에 주의할 것(무한루프에 빠질 수 있기 때문) 무한루프에 빠지지 않도록 주의할 것 무한루프에 빠지는 경우 반복한 횟수를 세는 카운터가 갱신되지 않을 경우 카운터의 증가분과 종료값의 관계가 틀린 경우 특정 조건이 성립하기까지 반복을 실행할 때, 판단에 사용하는 값을 갱신하지 않는 경우 반복의 중첩(이중반복문, 네스트) 반복의 횟수는 외부 반복 횟수 * 내부 반복 횟수 비교 연산/## 총평 프로그램을 만들기 시작할 때 먼저 해야 할 순서 등을 차근차근 알려주는 느낌 어떤 부분에서 어떤 문제가 발생했을 경우 이러한 원인일 확률이 있다고 미리 알려주는 느낌 프로그래밍 파트별로 어떤 곳을 주의해야 하는지 알려주는 주의사항 노트 특정 프로그래밍 언어에 함몰되지 않고 전 분야에 공통적으로 적용할 수 있는 내용 위주로 적혀 있어 조음","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://girin-dev.github.io/categories/Computer-Science/"}],"tags":[{"name":"Self_Review","slug":"Self-Review","permalink":"http://girin-dev.github.io/tags/Self-Review/"},{"name":"Programming","slug":"Programming","permalink":"http://girin-dev.github.io/tags/Programming/"}]},{"title":"CS 03. 실수(Real Number)","slug":"CS-03-Real-Number","date":"2018-03-12T07:47:30.000Z","updated":"2019-01-03T03:30:23.277Z","comments":true,"path":"2018/03/12/CS-03-Real-Number/","link":"","permalink":"http://girin-dev.github.io/2018/03/12/CS-03-Real-Number/","excerpt":"","text":"[컴퓨터공학] 실수소수점의 등장실수 표현은 표현 범위가 넓은 대신 정밀도가 낮다. 1. 실수 연산의 함정컴퓨터로 소수점 계산을 하면 오류가 나는 경우가 있다.가령 0.01을 10번 더하면 1을 기대하지만 실제 컴퓨터는 1.000000..007을 반환한다. 이것은 컴퓨터가 실수를 표현할 때, 부동소수점을 이용하기 때문이다. 2. 부동소수점(floating-point)실수는 같은 수라도 소수점의 위치에 따라 표현방식이 다양하다. 123.456= 1.23456&#215;102= 12.3456&#215;101= 1234.56&#215;10-1= 12345.6&#215;10-2 3. 단정도와 배정도 단정도실수를 32bit(4byte)로 표혆하며 부호 1bit, 지수부 8bit, 가수부 23bit로 구성 배정도실수를 64bit(8byte)로 표현하며 부호 1bit, 지수부 11bit, 가수부 52bit로 구성파이썬에서 사용하는 방식으로 정밀도가 단정도보다 높음 파이썬의 부동소수점 배정도 부동소수점으로 표현할 수 있는 가장 큰 수(sys.float_info.max)1.7976931348623157e+308 배정도 부동소수점으로 표현할 수 있는 가장 작은 수(sys.float_info.min)2.2250738585072014e-308123&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.float_infosys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53,epsilon=2.220446049250313e-16, radix=2, rounds=1)","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://girin-dev.github.io/categories/Computer-Science/"}],"tags":[{"name":"컴퓨터공학","slug":"컴퓨터공학","permalink":"http://girin-dev.github.io/tags/컴퓨터공학/"},{"name":"실수","slug":"실수","permalink":"http://girin-dev.github.io/tags/실수/"}]},{"title":"CS 01. 정수(Integer)","slug":"CS-02-Integer","date":"2018-03-11T15:42:17.000Z","updated":"2019-01-03T03:30:22.182Z","comments":true,"path":"2018/03/12/CS-02-Integer/","link":"","permalink":"http://girin-dev.github.io/2018/03/12/CS-02-Integer/","excerpt":"","text":"[컴퓨터공학] 정수0과 1만으로 표현하는 수(number), 양의 정수, 음의 정수 1. 컴퓨터에서 수를 표현하는 방법 10진수 2진수 16진수11, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f 2. 진수 변환 10진수 &#8594; 2진수25 = 16 + 8 + 1 = 1&#215;24 + 1&#215;23 + 0&#215;22 + 0&#215;21 + 1&#215;20&#8594; 0b11001 2진수 &#8594; 10진수11001 = 1&#215;24 + 1&#215;23 + 0&#215;22 + 0&#215;21 + 1&#215;20&#8594; 25 16진수 &#8594; 2진수16진수 한 자리는 2진수 네 자릿수까지 표현 가능 0~9까지는 10진수에서 2진수로 변환하는 법과 동일 a~f까지도 10진수 10~15를 2진수로 변환하는 것과 동일1234560xa = 0b10010xb = 0b10110xc = 0b11000xd = 0b11010xe = 0b11100xf = 0b1111 3. 양의 정수1바이트 기준 설명(정수를 저장하는 크기로는 1, 2, 4, 8바이트가 존재)1byte = 8bit123456양의 정수 25를 메모리에 저장해보기25 = 0b000110010b뒤의 맨 앞 첫번째는 부호 결정(0 양수, 1 음수)빈 곳은 0으로 채우기나머지는 10진법 25를 2진법으로 변환한 것 8비트로 나타낼 수 있는 수는 0~255가 아니라 -128~127까지(맨 앞의 자릿수는 부호로 처리하므로) 4. 음의 정수컴퓨터가 음의 정수를 메모리에 저장할 때에 보수의 개념을 활용보수 = 보충해주는 수123의 9의 보수 = (3을 더해 9가 되는 수) 626의 9의 보수 = (26을 더해 99가 되는 수) 73 10의 보수: 9의 보수에서 1을 더하면 된다. 2의 보수1의 보수에서 1을 더한 값 1232진수(0b)1010의 1의 보수 = (1010을 더해 1111이 되는 수) 01011010의 2의 보수 = (1의 보수 0101에 1을 더한 수) 0110 음수 표현컴퓨터는 음수를 2의 보수를 이용해 저장한다.음수 -4 표현 1234562진수(0b)00000100(10진수 4(양수)의 2진법 표현)11111011(00000100의 1의 보수)11111100(11111011에 1을 더한 값)0xfc(11111100을 16진법으로 표현한 값)여기서 마지막 수 11111100로 -4를 표현한다. 12&gt;&gt;&gt; (-4).to_bytes(1, byteorder=\"little\", signed = True)b'\\xfc' 2의 보수로 표현하는 이유 양수와 음수를 모두 이미 양수를 표현하고 있는 방식으로 저장할 경우, 0을 표현하는 방식이 2가지가 된다.(+0, -0) 이것은 비트의 낭비이며 뺄셈에서 오류를 발생 컴퓨터는 빼기 계산을 할 때, 뺼셈을 따로 하는게 아니라 덧셈을 통해 계산하기 때문(9에서 4를 빼는게 아니라 9에서 (-4)를 더하는 개념)이때 발생하는 반올림 수(1byte를 벗어난 1)는 버림처리한다.","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://girin-dev.github.io/categories/Computer-Science/"}],"tags":[{"name":"컴퓨터공학","slug":"컴퓨터공학","permalink":"http://girin-dev.github.io/tags/컴퓨터공학/"},{"name":"정수","slug":"정수","permalink":"http://girin-dev.github.io/tags/정수/"}]},{"title":"CS 01. 변수(Variable)","slug":"CS-01-Variable","date":"2018-03-11T09:16:46.000Z","updated":"2019-01-03T03:30:21.769Z","comments":true,"path":"2018/03/11/CS-01-Variable/","link":"","permalink":"http://girin-dev.github.io/2018/03/11/CS-01-Variable/","excerpt":"","text":"[컴퓨터공학] 01. 변수메모리와 데이터 위치를 가르키는 변수변수와 참조의 개념 이해 1. 메모리 미리 보기bit &lt; byte &lt; kilobyte &lt; megabyte &lt; gigabyte &lt; …1024*1024 bit = 1024 byte = 1 kilobyte = … (1) 32비트와 64비트의 의미메모리 주소를 얼마나 표시할 수 있는지를 나타낸 표시32비트 컴퓨터는 한번에 보낼 수 있는 데이터 개수가 32비트이고, 64비트 컴퓨터는 64비트이다. (2) 메모리 주소값 매기기32비트가 나타낼 수 있는 주소의 갯수는 2e32개(2의 32제곱 = 4,294,967,296)이다. 이 때문에 32비트 컴퓨터는 메모리를 4GB이상 장착하더라도 인식할 수 없다. 2. 변수의 의미변수란 데이터를 저자알 수 있는 메모리 공간을 의미(단순한 이름이 아닌 메모리 공간 자체를 의미)C언어의 경우 변수에 값이 담긴다.(파이썬은 이와 다름)12int num = 5;// num 이라는 '변수'에 5라는 '값'이 담겨있다. 3. 파이썬에서의 변수`변수 = ‘이름’과 ‘값 객체’C언어와 달리 이름은 값을 담고 있는 메모리 공간을 의미하는게 아니라 값 객체를 가리킬 뿐이다.123num = 5# num 이라는 '이름'이 5라는 '값 객체'를 가리킨다.(5라는 값을 담고 있는 메모리 공간을 의미하지 않음)# num 이라는 변수의 타입은 상수가 아니라 int 라는 클래스의 인스턴스(객체)이다. 4. 결론변수는 메모리와 밀접한 관련이 있으며 대입, 참조와 같은 개념과 연관있다.","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://girin-dev.github.io/categories/Computer-Science/"}],"tags":[{"name":"컴퓨터공학","slug":"컴퓨터공학","permalink":"http://girin-dev.github.io/tags/컴퓨터공학/"},{"name":"메모리","slug":"메모리","permalink":"http://girin-dev.github.io/tags/메모리/"},{"name":"변수","slug":"변수","permalink":"http://girin-dev.github.io/tags/변수/"}]},{"title":"JavaScript 13. 실행 컨텍스트와 자바스크립트의 동작 원리","slug":"JavaScript-13-Execution-Context","date":"2018-02-23T06:03:09.000Z","updated":"2018-02-24T06:49:11.000Z","comments":true,"path":"2018/02/23/JavaScript-13-Execution-Context/","link":"","permalink":"http://girin-dev.github.io/2018/02/23/JavaScript-13-Execution-Context/","excerpt":"","text":"JavaScript 13. 실행 컨텍스트와 자바스크립트의 동작 원리1. 실행 컨텍스트 개념 정의(ECMAScript 기준) “실행 가능한 코드를 형상화하고 구분하는 추상적인 개념” “실행 가능한 자바스크립트 코드 블록이 실행되는 환경” 다른 언어에서의 콜스택(함수의 호출 정보가 차곡차곡 쌓여있는 스택)에 들어가는 실행 정보 하나와 비슷 실행가능한 코드 전역코드 eval() 함수 코드 함수 안의 코드 2. 실행 컨텍스트의 3가지 객체 변수객체(VO/Variable Object) 스코프체인(SC) this value (1) 변수객체(VO/Variable Object) 변수객체란 실행에 필요한 여러 정보들을 담는 객체 엔진에 의해 참조되지만 코드에 의해(사용자에 의해) 참조될 수는 없다. VO가 담는 객체 변수 매개변수와 인수정보 함수 선언식(함수 표현식은 제외, 함수 표현식은 변수의 방식으로 처리) VO는 실행 컨텍스트의 프로퍼티값으로 다른 객체를 가리키는데 경우에 따라 가리키는 값이 달라진다. 전역 컨텍스트의 경우 VO는 유일하며 최상위에 위치하고 모든 전역 변수, 전역 함수 등을 포함하는 전역 객체(Global Object / GO)를 가리킨다. 전역 객체(GO)는 전역에 선언된 전역 변수와 전역 함수를 프로퍼티로 소유 함수 컨텍스트의 경우 VO는 Activation Object(AO / 활성 객체)를 가리키며 매개변수와 인수들의 정보를 배열의 형태로 담고 있는 객체인 arguments object가 추가된다.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"HTML 02. HTML5 요소","slug":"HTML-02-el-of-HTML5","date":"2018-02-08T06:17:50.000Z","updated":"2018-03-07T17:04:03.000Z","comments":true,"path":"2018/02/08/HTML-02-el-of-HTML5/","link":"","permalink":"http://girin-dev.github.io/2018/02/08/HTML-02-el-of-HTML5/","excerpt":"","text":"HTML5 요소1. 문서를 구성하는 기본요소2. 문서의 메타데이터3. 스크립팅4. 구조를 나타내는 요소(1) &lt;section&gt; 콘텐츠 섹션 display block &lt;section&gt;요소는 콘텐츠의 장과 절을 구분 반드시 &lt;h1&gt;과 같은 제목(heading tag)이 있어야 한다. &lt;article&gt;의 상위요소 (2) &lt;nav&gt; 내비게이션 display block 메인 메뉴나 서브 메뉴 등으로 링크 항목을 포함 남발하는 것을 지양하며 주요 내비게이션에만 사용해야 함 (3) &lt;article&gt; 독립된 콘텐츠 display block 내부에 flow content만을 포함할 수 있다. 완결성의 갖춘 하나의 콘텐츠를 담으며 RSS피드로 배포할 가치가 있는 독립된 콘텐츠.(포스트, 기사, 댓글, 글 등) &lt;article&gt;요소 안에 &lt;article&gt; 요소가 포함될 수 있으며 이 경우 논리적으로 부모자식관계의 &lt;article&gt;요소 콘텐츠는 관련이 있어야 한다.12345678910111213141516171819202122232425262728&lt;!-- 부모자식 article --&gt;&lt;!-- 게시글과 댓글의 관계 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;article 요소&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;article class=\"post\"&gt; &lt;h1&gt;책 그리고 커피와 함께한 생일&lt;/h1&gt; &lt;p&gt;느즈막에 일어난 생일 아침. 요가로 몸을 풀어준 뒤 책 몇 권을 가방에 넣고...&lt;/p&gt; &lt;footer&gt; &lt;p&gt;솔비&lt;/p&gt; &lt;time datetime=\"2013-10-04T11:30:00+09:00\"&gt;10월4일&lt;/time&gt; &lt;/footer&gt; &lt;article class=\"reply\"&gt; &lt;p&gt;생일이셨군요 축하드립니다.&lt;/p&gt; &lt;footer&gt; &lt;p&gt;미란다&lt;/p&gt; &lt;time datatime=\"2013-10-05T11:35:00+09:00\"&gt;10월5일&lt;/time&gt; &lt;/footer&gt; &lt;/article&gt; &lt;/article&gt;&lt;/body&gt;&lt;/html&gt; (4) &lt;aside&gt; 본문 콘텐츠와 연관성이 적은 콘텐츠 display block 메인 콘텐츠와 관계가 없는 사이드바나 광고 등을 포함(제작자의 의도에 따라 어떤 것이 관계가 없는 콘텐츠인가는 달라질 수 있음) (5) &lt;header&gt; 헤더 display block &lt;header&gt;요소와 &lt;footer&gt;요소를 자식으로 가질 수 없음 &lt;section&gt;요소 내부에 있을 수 있으며 이 경우 해당 섹션의 헤더 콘텐츠. &lt;h1&gt;과 같은 헤딩 태그가 필수가 아님. (6) &lt;footer&gt; 푸터 display block 연락처와 저작권 등을 포함 (7) &lt;adress&gt; 사이트 연락처 정보 display block 모든 주소가 아니라 해당 페이지 또는 포스트의 관리자/게시자의 연락처, 주소 정보 (8) &lt;h1&gt;~&lt;h6&gt; 콘텐츠 제목 display block 요소의 제목으로 &lt;section&gt; 안에 반드시 들어가야 한다. 5. 그룹(1) &lt;div&gt; 콘텐츠 그룹화 display block 의미를 갖고 있지 않은 콘텐츠 블록 (2) &lt;main&gt; 주요 콘텐츠 display block HTML5, &lt;body&gt; 요소 내에서 한번만 사용되어야 함 사이드바나 검색 영역을 그룹화해서는 안 됨 (3) &lt;p&gt; 단락 display block Phrasing content를 포함 (4) &lt;ul&gt; 비순서형 목록과 &lt;ol&gt; 순서형 목록 display block 자식요소는 &lt;li&gt;만 가능 &lt;ol&gt; 순서형 목록의 경우 start, reversed라는 어트리뷰트를 추가하여 각각 시작 숫자를 정하거나 순서를 오름차순, 내림차순으로 지정할 수 있음.123456789101112131415&lt;ol start=\"5\"&gt; &lt;li&gt; 하나 &lt;li&gt; 둘 &lt;li&gt; 셋 &lt;li&gt; 넷&lt;/ol&gt;&lt;!-- 5, 6, 7, 8 순으로 렌더링 --&gt;&lt;ol reversed&gt; &lt;li&gt; 하나 &lt;li&gt; 둘 &lt;li&gt; 셋 &lt;li&gt; 넷&lt;/ol&gt;&lt;!-- 1, 2, 3, 4가 아니라 4, 3, 2, 1 --&gt; (5) &lt;figure&gt;, &lt;figcaption&gt; 콘텐츠 포함을 위한 그룹과 캡션 display block HTML5, 이미지/비디오/오디오 등을 포함 &lt;figure&gt; 해당 콘텐츠의 캡션을 달 때 사용 &lt;figcaption&gt;1234&lt;figure&gt; &lt;img src=\"images/chocolate_museum.jpg\" alt=\"중세기사의 조형물로 장식된 초콜릿 박물관 입구\"&gt; &lt;figcaption&gt;세계 10대 초콜릿 박물관 입구&lt;/figcaption&gt;&lt;/figure&gt; (6) &lt;blockquote&gt; 인용문 display block 어트리뷰트 cite의 경우 웹사이트는 URL, 책의 경우 ISBN을 값으로 줄 수 있음 (7) &lt;pre&gt; display block 마크다운에서 `작성된 코드 ` 과 비슷하며 공백과 줄바꿈 등을 입력한 그대로 브라우저 화면에 표현하고자 할 때 사용 (8) &lt;hr&gt; display block HTML5에서는 디자인을 위한 수평선이 아니라 주제가 바뀌는, 즉 단락 구분을 위해 사용 섹션 구분에 사용하면 안 되며, 섹션을 구분하기 위한 구분선을 CSS로 따로 작업을 해야함.","categories":[{"name":"HTML/CSS","slug":"HTML-CSS","permalink":"http://girin-dev.github.io/categories/HTML-CSS/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://girin-dev.github.io/tags/HTML/"}]},{"title":"180206~180208-TIL","slug":"180206-180208-TIL","date":"2018-02-06T14:04:10.000Z","updated":"2018-03-07T16:55:43.000Z","comments":true,"path":"2018/02/06/180206-180208-TIL/","link":"","permalink":"http://girin-dev.github.io/2018/02/06/180206-180208-TIL/","excerpt":"","text":"180206~180208 TIL한 일1. JavaScript[Inside JavaScript] Function과 this 파트 보강 apply()와 call() 함수 리턴 2. Python Django Reviewer 3-2. 흐름 제어 (If, for, while) 4-1. 데이터 구조(Dictionary, set), tuple(list comprehension)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"180201~180205-TIL","slug":"180201-180205-TIL","date":"2018-02-02T04:55:05.000Z","updated":"2018-02-07T12:54:21.293Z","comments":true,"path":"2018/02/02/180201-180205-TIL/","link":"","permalink":"http://girin-dev.github.io/2018/02/02/180201-180205-TIL/","excerpt":"","text":"180201~180205 TIL한 일1. Python Django Reviewer 파이썬의 모든 자료형은 객체다. 파이썬과 자바스크립트의 차이를 알아가는 것도 재미있다. 2-2. Type과 연산(Numbers, String, boolean), 데이터 구조( List)2. JavaScript(1) [Inside JavaScript] 함수호출과 this","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"Joy님의 특강","slug":"SL-howtoStudy(Joy)","date":"2018-01-29T11:02:57.000Z","updated":"2019-01-03T03:23:06.300Z","comments":true,"path":"2018/01/29/SL-howtoStudy(Joy)/","link":"","permalink":"http://girin-dev.github.io/2018/01/29/SL-howtoStudy(Joy)/","excerpt":"","text":"FDS5기 수료생 Joy Kim님의 특강(https://github.com/feel5ny) 1. How to Study그때그때하기 (1) 이해 &amp; 정리 너무 deep하지 않게 형식적인 정리말고 이해를 해서 스스로 정리 러버덕(스스로 말할 수 있을 정도)까지하면 최선 (2) 체화 그 주의 이해가 안되는 부분을 주단위로 주말 체화 프레임워크, 라이브러리는 인터넷 번역과 나만의 요약(그림)으로 하는게 좋았던 것 같음. 2. Project 욕심 부리지 말기 완성도 있는 결과물과 협업 능력을 목표로 하자 견고한 초반 기획(전체 메뉴 구조, 와이어프레임, 컨셉, 디자인) 문서화를 꼼꼼히 하는 습관(선례 https://github.com/huusz/Da-Da/blob/master/README.md) 추천 CSS 프레임워크 Ant design Semantic UI 디자인 팁 툴 - 스케치, invision, zeplin 고퀄사진, 메인배경은 영상처리, 굵은 영문 타이포(Google font-Open Sans, Lato), 한글 타이포(스포카 한 산스/노트산스) 3. 협업능력(1) 코드 컨벤션 초반에 꼭 정하기 class명, 카멜케이스, 플러그인(prettier, lint 등) (2) 깃 git 깃 branch 컨벤션도 정하면 굳(git flow 참고) (3) Github issue와 Pull Request 활용 (4) 칸반보드(trello 같은거)4. 이후(1) 이론(2) 실습 토이프로젝트 블로그 (3) 네트워크(외부행사) 다니는 것도 좋은데 스텝으로도 해보면 의외의 기회가 나올 수 있음(구직) 추천책 프론트엔드 개발자를 위한 자바스크립트 프로그래밍","categories":[{"name":"ETC","slug":"ETC","permalink":"http://girin-dev.github.io/categories/ETC/"}],"tags":[]},{"title":"HTML 01. 새로운 표준, HTML5","slug":"HTML-01-HTML5","date":"2018-01-29T07:45:01.000Z","updated":"2018-02-16T08:13:51.431Z","comments":true,"path":"2018/01/29/HTML-01-HTML5/","link":"","permalink":"http://girin-dev.github.io/2018/01/29/HTML-01-HTML5/","excerpt":"","text":"HMTL의 탄생 HTML5 이전 W3C의 XHTML 1.0과 XHTML 2.0(2.0은 기존 웹의 하위 호환성을 고려하지 않아 이후 폐기) 콘텐츠의 표시의 역할이 강조되던 시기 어플리케이션의 필요한 부분은 Flash나 Silver light, Active X 등을 통해 구현하였으나 브라우저별 호환성 이슈와 플러그인 강제설치 등의 이슈가 발생 WHATWG(Web Hypertext Application Technology Working Group, Apple/Mozila/Opera 등) W3C의 XHTML 2.0에 반대하여 결성 Web Application 1.0, Web Forms 2.0 W3C가 XHTML 2.0을 포기하고 WHATWG의 권고안을 받아들이면서 HTML5 탄생 HTML4.01, XHTML 1.0과 HTML5의 차이점1. 콘텐츠 모델 인라인요소와 블록요소(기존 HTML 기반 마크업) 이외에 명확한 정보 구조 설계와 구성을 위해 카테고리를 정의하여 각 요소별로 비슷한 성격을 가지고 있는 것끼리 그룹화한 것. 구조와 구성을 중시하는 마크업으로 진화한 것. 1. 섹셔닝 루트(Sectioning Root) 장이나 절과 같은 계층 구조로 구분되지 않고 독립적인 콘텐츠로 분리 아웃라인에 영향을 주지 않음 123456&lt;blockquote&gt; &lt;/blockquote&gt;&lt;body&gt; &lt;/body&gt;&lt;detail&gt; &lt;/detail&gt;&lt;fieldset&gt; &lt;/fieldset&gt;&lt;figure&gt; &lt;/figure&gt;&lt;td&gt; &lt;/td&gt; 2. 메타데이터 콘텐츠(Metadata Content) 문서의 정보를 포함하는 메타데이터, 스타일 표현을 위한 &lt;style&gt; 요소, 행동을 설정하는 &lt;script&gt; 요소 등을 나타냄 1234567&lt;base&gt;&lt;link&gt;&lt;meta&gt;&lt;noscript&gt;&lt;/noscript&gt;&lt;script&gt;&lt;/script&gt;&lt;style&gt;&lt;/style&gt;&lt;title&gt;&lt;/title&gt; 3. 플로우 콘텐츠(Flow Content) 메타데이터 콘텐츠 요소 중 일부를 제외하고 문서 본문에 해당하는 body 요소에 들어가는 대부분의 요소 &lt;area&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;style&gt;&lt;/style&gt; 요소는 조건부로 플로우 콘텐츠 4. 섹셔닝 콘텐츠(Sectioning Content) 섹셔닝 콘텐츠는 대부분 HTML5에 새롭게 추가된 요소 제목과 그 내용을 포함한 범위를 지정하는 콘텐츠 표시 헤딩과 아웃라인을 가짐 1234&lt;article&gt; &lt;/article&gt;&lt;aside&gt; &lt;/aside&gt;&lt;nav&gt; &lt;/nav&gt;&lt;section&gt; &lt;/section&gt; 5. 헤딩 콘텐츠(Heading Content) 세션의 제목을 나타내며 문서의 아웃라인을 고려해서 사용해야 함 1&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt; 6. 프레이징 콘텐츠(Phrasing Content) 문서의 텍스트 지칭하며 문단의 내부 레벨로 마크업하는 요소 / 문단의 구성 요소 &lt;a&gt; 처럼 콘텐츠로 다른 요소를 포함하지 않는 경우에 한해 조건부 프레이징 콘텐츠가 되는 요소도 존재 대부분 플로우 콘텐츠 전체를 포함할 수 없으며 프레이징 콘텐츠로 분류된 요소만을 포함할 수 있음. 텍스트 이외에도 임베디드 콘텐츠를 포함할 수 있음 7. 임베디드 콘텐츠(Embeded Content) 문서 안에 외부 자원(외부 리소스)나 HTML이 아닌 다른 언어의 콘텐츠를 표현 이미지, 동영상, 플로그인, iframe 등과 MathML, SVG 등 8. 인터렉티브 콘텐츠(Interactive Content) 사용자가 어떤 기능을 조작할 수 있는 (상호 작용 가능한) 콘텐츠 &lt;audio&gt;, &lt;img&gt;, &lt;input&gt;, &lt;object&gt;, &lt;video&gt;의 경우 조건부 인터렉티브 콘텐츠 9. 팰퍼브 콘텐츠(Palpable Content) 새롭게 추가된 개념으로 구체적으로 보여지고 이해할 수 있는 콘텐츠 요소(?) 최소 하나 이상의 요소가 존재해야 함.(숨김 상태이면 안 됨) 10. 스크립트 지원 요소(Script-supporting Elements) 요소 자체는 어떤 정보를 표현하지 않음 스크립트 지원 1&lt;script&gt; &lt;/script&gt; 11. 트랜스 패어런트 콘텐츠(Transparent Content) 콘텐츠 모델을 가지지만, 앞에서 설명한 카테고리에 속하지 않은 경우 트랜스 패어런트 콘텐츠 요소와 그 안에 담긴 콘텐츠를 바꾸어 마크업해도 HTML5 문법 오류가 없음 2. 아웃라인 알고리즘(Outline Algorithm)1. gg","categories":[{"name":"HTML/CSS","slug":"HTML-CSS","permalink":"http://girin-dev.github.io/categories/HTML-CSS/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://girin-dev.github.io/tags/HTML/"}]},{"title":"북스터디 04. 객체지향의 사실과 오해","slug":"Book-01-TEOO-180121","date":"2018-01-21T13:14:08.000Z","updated":"2019-01-03T03:30:20.000Z","comments":true,"path":"2018/01/21/Book-01-TEOO-180121/","link":"","permalink":"http://girin-dev.github.io/2018/01/21/Book-01-TEOO-180121/","excerpt":"","text":"북스터디 1번째객체지향의 사실과 오해 스터디 레포 zhuzi 협력하는 객체들의 공동체 객체지향은 현실세계를 반영하려고 한 것이라고 생각하기 쉬운데 반은 맞고 반은 틀리다.이상한 나라의 객체 타입의 추상화역할, 책임, 협력 협력협력의 본질은 요청과 응답으로 연결되는 사람(객체)들의 네트워크요청을 받은 객체는 응답의 의무가 있음즉, 협력에 참여하는 객체가 수행할 책임이 바로 요청과 응답 책임 “객체지향 개발에서 가장 중요한 능력은 책임을 능숙하게 소프트웨어 객체에 할당하는 것” [Larman 2004] 공용 인터페이스, 캡슐화 책임의 분류 하는 것(doing)외부에 제공해 줄 수 있는 서비스 객체를 생성하거나 계산을 하는 등의 스스로 하는 것 다른 객체의 행동을 시작시키는 것 다른 객체의 활동을 제어하고 조절하는 것 아는 것(knowing)외부에 제공해 줄 수 있는 정보 개인적인 정보에 관해 아는 것 관련된 객체에 관해 아는 것 자신이 유도하거나 계산할 수 있는 것에 관해 아는 것 메시지 객체 간의 협력을 이루어지게 하는 것 객체가 다른 객체에 접근할 수 있는 유일한 방법 책임은 메시지의 상위 개념(하나의 책임이 여러 메시지로 분할) 객체지향 설계는 협력에 참여하기 위해 어떤 객체가 어떤 책임을 수행해야 하고 어떤 객체로부터 메시지를 수신할 것인지를 결정하는 것으로부터 시작. 역할 역할은 재사용 가능하고 유연한 객체지향 설계를 낳는 중요한 구성요소 중요한 것은 협력이지 객체 그 자체가 아니고, 역할은 협력 내에서 다른 객체로 대체할 수 있다는 일종의 표식. 협력의 추상화와 단순화를 가능케 함. 역할은 협력 안에서의 구체적 객체로 대체될 수 있는 추상적 협력자(대체가능성, 행위호환성, 동일한 책임의 수행) 객체의 모양을 결정하는 협력 흔한 오류 시스템에 필요한 데이터를 저장하기 위해 객체가 존재한다? 객체는 행위를 수행하기 위한 재료일 뿐 객체지향이 클래스와 클래스 간의 관계를 표현하는 시스템의 정적인 측면에 중점을 둔다? 클래스는 시스템에 필요한 객체를 표현하고 생성하기 위한 구현 메커니즘일 뿐 협력을 따라 흐르는 객체의 책임 견고하고 깔끔한 협력 설계, 객체간의 요청과 응답의 흐름 결정 행동을 결정한 후에 그 행동을 수행하기 위한 데이터 고민 행동과 데이터를 고민한 이후에 객체들을 구현할 클래스를 고민 설계 -&gt; 행위에 기반한 협력 -&gt; 책임 분배 객체지향 설계 기법 책임-주도 설계 협력에 필요한 책임들을 식별하고 적합한 객체에 책임을 할당하는 방식 개별적 객체의 상태가 아닌 객체의 책임과 상호작용에 집중한다. 절차 시스템이 사용자에게 제공해야 하는 기능, 즉 시스템 책임 파악 시스템 책임을 더 작은 책임으로 분할 분할된 책임을 수행할 수 있는 적절한 객체 또는 역할을 찾아 책임을 할당 객체가 책임을 수행하는 중 다른 객체읟 도움이 필요한 경우 이를 책임질 적절한 객체 또는 역할을 찾음 해당 객체 또는 역할에게 책임을 할당하여 두 객체가 협력 디자인 패턴 전문가들이 반복적으로 사용하는 해결 방법을 정의해 놓은 설계 템플릿 모음. 반복적으로 발생하는 문제와 해결책의 조합 COMPOSITE 패턴 테스트-주도 개발 테스트를 먼저 작성하고 테스트를 통과하는 구체적인 코드를 추가하면서 애플리케이션을 완성해가는 방식(설계를 위한 기법) 기본 흐름은 실패하는 테스트를 작성하고, 테스트를 통과하는 가장 간단한 코드를 작성한 후 리팩토링을 통해 중복을 제거하는 것. 중요한 건 테스트가 아니라 책임 수행의 객체/클라이언트가 기대하는 객체의 역할이 메시지를 수신할 때 어떤 결과를 반환하고 그 과정에서 어떤 객체와 협력할 것인지에 대한 기대를 코드의 형태로 작성하는 것. 객체지향에 대한 깊이 있는 지식 요구. 모으기 개념관점과 명세관점, 구현관점 -&gt; 객체지향","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://girin-dev.github.io/categories/Computer-Science/"}],"tags":[{"name":"books","slug":"books","permalink":"http://girin-dev.github.io/tags/books/"}]},{"title":"180118-TIL","slug":"180118-TIL","date":"2018-01-18T14:38:09.000Z","updated":"2018-01-18T14:50:41.000Z","comments":true,"path":"2018/01/18/180118-TIL/","link":"","permalink":"http://girin-dev.github.io/2018/01/18/180118-TIL/","excerpt":"","text":"오늘 한 일 독서스터디 &lt;객체지향의 사실과 오해: 역할, 책임, 협력 관점에서 본 객체지향&gt; 4장 “역할, 책임, 협력” 읽는 중 TypeScript Meetup 참석 관련 내용 정리 huiseoul이라는 회사를 알게 됨 huiseoul huiseoul이라는 회사의 작업방식과 지원자격은 앞으로 개발자로서의 공부방식 등에 본보기가 될 것 같아 따로 기록을 남긴다. 또한 해당 레포를 포크떠놨다. 두고두고 참고해야지. huiseoul의 작업방식 1234567891011121314151617181920- 좋은 엔지니어는 좋은 습관이 만든다고 생각합니다.- 좋은 습관을 만들기 위해 노력합니다. - 매일 오전 10시에 daily meeting 을 통해 한 일 / 할 일 / 도움이 필요한 부분을 공유합니다. - [Peer Review](https://engineering.huiseoul.com/pr-peer-review-pull-request-d301399f6a17) 로 자신의 코드를 공유합니다. - 지속적인 배포와 test code 로 작성한 코드에 대한 책임감을 요구합니다. - [Prettier](https://github.com/prettier/prettier), [TSLint](https://github.com/palantir/tslint) 로 format quality 를 유지합니다. - 2주마다의 sprint 회고를 통해서 팀을 돌아보고 더 나아질 수 있는 부분을 점검합니다.- 좋은 엔지니어는 끊임없이 배워야 합니다.- 더 나은 기술을 찾고 이를 끊임없이 적용합니다. - 신기술만을 쫓는 hype driven development 는 하지 않습니다. - 과거의 기술에 매달려 있어서도 안 됩니다. - 기술을 열린 태도로, 비판적으로 받아들입니다. - 모든 엔지니어는 일주일에 한번 기존의 코드를 더 낫게 만드는 방법에 관해서 팀원을 대상으로 발표합니다.- 스타트업 엔지니어가 얻을 수 있는 가장 큰 보상은 성장입니다. - 지금까지 쭉 성장해왔고, 앞으로 더 빠르게 성장할 것입니다. - 위의 기술 stack 을 안정적으로 production 에 적용한 손꼽는 곳입니다. - 팀 사이즈가 아직 작아, 욕심내는 모든 부분에 참여할 수 있습니다.- 성장에는 고통이 따릅니다. - 자신의 업무결과를 가능한 투명하게 드러냅니다. - 발전하는 기술과, 늘어나는 요구조건, 성장하는 기술 스택에 적응하는 것은 개인의 능력 / 노력에 달려있습니다. huiseoul의 지원자격 1234567891011121314151617181920- 기본 조건 - Typescript(at least javascript ES2015) 로 문제풀이가 가능하신 분 - 간단한 test case 를 작성할 수 있으신 분 (library 무관) - Github 에 계정이 있으며 자신의 코드를 남과 공유해본 경험이 있으신 분 - Internet browser 에 주소를 입력하고 엔터를 쳤을 때부터 화면이 뜨기까지의 과정을 5분 이상 설명하실 수 있는 분 - 한글 문서와 영어 문서를 읽는 데 걸리는 시간 차이가 30% 안쪽이신 분 - 한국인 팀 동료와의 의사소통에 문제가 없으신 분- 우대 조건 - React, React Native, GraphQL 중 한 가지 이상의 기술이 적용된 서비스 제작 및 운영에 메인으로 참여하신 분 - React component 의 layout 및 styling 에 자신 있으신 분 - Written communication 에 익숙하신 분 - Open source 프로젝트에 기여하신 경험이 있는 분- 특별 우대 조건 - 실력과 노력과 배움에 자신이 있으신 분 - 이 경우 위의 조건들은 무시하셔도 됩니다.- 지원 분야 - (당분간은) 기본적으로 full stack 을 지향합니다. - 정말 커다란 회사가 아닌 이상 엔지니어가 대부분의 흐름을 파악해야 한다고 생각하기 때문입니다. - 풀어야 하는 문제가 점점 복잡하고 커질수록 특정 분야의 전문성이 필요하다고 생각합니다. - 하지만 frontend or backend 에 더 깊은 관심을 가지고 있고 잘할 수 있는 분이라면 업무 분야를 한정해서 지원해주셔도 좋습니다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"180118-TypeScript_Meetup","slug":"Conf-TypeScript-Meetup(180118)","date":"2018-01-18T10:04:22.000Z","updated":"2019-01-03T03:30:21.386Z","comments":true,"path":"2018/01/18/Conf-TypeScript-Meetup(180118)/","link":"","permalink":"http://girin-dev.github.io/2018/01/18/Conf-TypeScript-Meetup(180118)/","excerpt":"","text":"TypeScript Meetup손찬욱님 (NAVER) - TypeScript로부터 얻은 것과 잃은 것 egjs, 다형성, eg.Axes TypeScript를 도입하기 전까지 인터페이스를 이용하면 좋았을텐데 다양한 인터페이스(좌표이동, 손가락 오무리기, 마우스 휠 등) 를 지원하고 싶다. 얻은 것 코드 설계 의도가 분명 definition 파일이 자동으로 생서 안정성 툴의 도움을 받을 수 있음 편의성 codeAssist, 코드 이동(추적) map, reduce 등을 동시에 여러번 적용하게 될 때 인자들에 대한 타입을 지정해줄 수 있다. =&gt; 데이터의 변형과 전달의 흐름 추적에 용이.(안정성) lodash, rxjs와의 케미도 좋음. 이 밖에도 ES3까지 지원되는 TypeScript 위엄. 잃은 것 서드파티 라이브러리 사용할 때 서드파티 라이브러리가 UMD, CommonJS 형식으로 만들어진 모듈의 경우 ES6 Module이라는 표준형식으로 호출시 호출이 안되는 상황이 발생(?) import * as \\___ from &quot;___.js&quot;, import \\___ from &quot;___.js&quot; 그나마 다행인 것은 최근 라이브러리들은 ES6 Module 용도 함께 배포 서드파티 라이브러리 @types 사용 시 외부 type definition 파일이 완벽하지 않음 서드파티 라이브러리 내부의 타입들을 다룰때 아예 타입을 재정의해버려야 하는 경우가 발생. 과한 사용은 오히려 독! 과도한 타입설정과 표시는 가독성을 해침. 결론 장점: 코드의 명확, 주석없이 명세화 가능, 안전성, 편의성, ES3 지원 단점: 외부 모듈 사용이 불편(TypeScript 사용 환경이 아직 덜 보급), 과한 사용이 가독성을 떨어뜨림. 하지만 이 단점들이 대개 기존 시스템과의 이질감과 미진한 보급에서 비롯. 장점을 살려서 적절히 사용해보도록 해보아요~^^ 김상원님 (Tumblbug) - 코드 한 줄 없는 Typescript 사용기 TypeScript: JavaScript의 offset(=superset). TypeScript가 준 신뢰 기억이 안나도 과거의 코드를 믿을 수 있게 되었다. 빠른 디버깅 코드의 양이 줄어듦 코드 자체가 문서가 됨 팀원간의 신뢰도를 높여줌. 정해진 규칙, 즉 타입을 공유하고 있기 때문. TypeScript가 준 실망 세팅: 빌드 프로세스 수립 과정이 복잡 [변수] as any =&gt; 해당 변수의 type을 무시. Type system의 장점을 희석시키지만 어쩔 수 없이 써야 하는 상황이 발생 코드와 타입이 불일치 한승호님 (에멘탈) - Typescript 개발 문화타입스크립트 도입을 위한 넓고 얕은 지식 Generic과 Decorator(를 활용한 깔끔한 Data Model)을 잘 활용하고 있음. 서버 관련해서 hapi라는게 있어요. express도 물론 있고. 타입스크립트로 백엔드도 구성할 수 있는 신세계가 있군요! egghead.io/ typescriptlang.org/play/ 사실 무슨 말을 하고 있는건지 이해하지 못함. Node.js? 백엔드 기준으로 하고 있는 듯함. 백엔드에서 타입스크립트는 Node.js에서의 한계가 보이며 DevOps 구축시에도 손이 많이간다. 최종욱님 (후이서울(트릴리어네어)) - React with Typescript React는 킹왕짱이에요. GraphQL이 뭐지..? 리엑트와 뷰js는 달라요. 리엑트는 선언적이고 효율적이며 어디든 적용할 수 있는 유연함을 갖고 있어요. TypeScript는 리엑트와 함께^^ 관련 레포(https://github.com/johnwook/ts-meetup-2018-1) interface를 정의하고 그를 따르는 것은 생각보다 큰 차이를 만들어낸다. 아마도… 코드와 컴포넌트에 대한 사전 설계에 대해 스스로 명확하게 인식한 이후 코딩을 할 수 있다는 게 그 차이가 아닐까 싶다. 타입스크립트의 장점 함수를 자기묘사를 할 수 있게끔 하고 인터페이스를 먼저 정의하고 이에 집중하게 한다. 말 잘하고 재치가 있는 분인 듯","categories":[{"name":"ETC","slug":"ETC","permalink":"http://girin-dev.github.io/categories/ETC/"}],"tags":[{"name":"Conference","slug":"Conference","permalink":"http://girin-dev.github.io/tags/Conference/"},{"name":"TypeScript","slug":"TypeScript","permalink":"http://girin-dev.github.io/tags/TypeScript/"}]},{"title":"패스트캠퍼스 프론트엔드 스쿨 6기 후기","slug":"review-FC","date":"2017-12-16T17:53:55.000Z","updated":"2019-01-03T03:22:41.567Z","comments":true,"path":"2017/12/17/review-FC/","link":"","permalink":"http://girin-dev.github.io/2017/12/17/review-FC/","excerpt":"","text":"패스트캠퍼스 프론트엔드 스쿨 6기 솔직 후기패스트캠퍼스 프론트엔드 스쿨 6기를 다니고 있는 girin-dev입니다. 현재 반려동물을 관리하는 웹 어플리케이션 프로젝트를 진행하고 있습니다. 지난 4개월간 패스트캠퍼스를 다니면서 느꼈던 바와 패스트캠퍼스를 선택하게 된 이유와 과정과 솔직한 후기를 공유하고자 합니다.학원이나 기관 등 프로그래밍 도움을 받고자 하는 많은 분들에게 좋은 정보가 되기를 바랍니다. 비전공자로서 프로그래밍을 배우는 것에 여러 어려움이 있었습니다. 특히 단순히 취미로 하는 코딩이 아니라 전문 개발자로서 커리어를 시작하려고 하지만, 내게 무엇이 필요하고 지금 무엇이 부족한지 정확히 알기가 어려웠습니다. 프로그래밍을 전혀 안 해본 것은 아니지만, 또 뭐 딱히 안다고도 할 수 없는 것이 바로 4개월 전의 제 상태였습니다. 이런 상황에서 벗어나고자 여러 방법을 찾고 있었고 패스트캠퍼스도 선택지 중 하나였습니다. 사실 예전과 달리 요즘은 패스트캠퍼스 뿐만 아니라 프로그래밍을 가르치는 다양한 기관과 학원이 존재하고, 또 여러 스터디가 시시각각 조직되고 있습니다. 이건 사실 좋은 환경이기도 하지만 너무 많은 선택지로 인해 혼란을 주기도 합니다. 제가 선택했던 과정과 배제되었던 다른 기관들은 어떤 이유에서였는지 말씀드리겠습니다. 왜 패스트캠퍼스를 선택하게 되었나? 최신 기술을 반영한 커리큘럼첫째로 Angular와 같은 최신 프레임워크를 배우는 커리큘럼이었다는 것입니다. JavaScript를 가르치면서 프론트엔드 개발자를 양성한다는 학원은 많았습니다. 특히 국비지원 학원의 경우 수강생에게 용돈과 같은 성격의 돈을 주면서 심지어 무료로 가르친다고 하니 좋은 기회라고 생각이 들었습니다. 그러나 거의 대부분의 국비지원 학원은 프론트엔드의 최신 경향을 가르치기 보다는 jQuery와 같은 라이브러리를 가르치는 경우가 많았습니다. jQuery는 훌륭한 라이브러리지만, 오래되었고 컴포넌트 분리와 같은 최신의 프론트엔드 기술의 경향성과는 거리가 있는 기술입니다. 또한 과거 스타트업 인턴 면접에서 ‘요새는 jQuery 잘 안쓰는거 아시죠?’라는 말을 들은 적이 있어서 더욱 선택하기가 꺼려졌습니다. 다행히 패스트캠퍼스 프론트엔드 스쿨의 커리큘럼에는 현재 프론트엔드의 3대장 중 하나인 Angular를 가르친다고 되어 있었습니다. 이것은 기수마다 다르며 6기인 저는 Angular를 배웠고 7기의 경우 React, 4기의 경우 Vue.js를 배웠습니다. React와 Vue.js는 Angular와 함께 가장 인기있는 최신의 프론트엔드 프레임워크(혹은 라이브러리)라고 불립니다. 패스트캠퍼스가 최신의 기술을 다루고 도입하려는 학원이라는 점이 제게는 선택의 요인이 되었습니다. 믿음직한 강사진둘째로는 강사진이 믿음직했다는 점입니다. HTML과 CSS를 가르쳐주셨던 김데레사님의 경우 웹표준 핵심가이드북2 HTML5+CSS3의 저자입니다. 이 책은 프로그래밍을 공부하는 지인이 소개해 주어 평소 관심을 두었던 책이었기 때문에, 마치 저자의 직강을 들을 수 있다는 기대감을 주었습니다. 또한 프로그래밍 교육 책을 낼만큼 강의력과 실력이 증명되었다는 것을 기대할 수 있었습니다.웹표준 핵심가이드북2 HTML5+CSS3 JavaScript와 Angular를 가르쳐주신 웅모님의 경우 사실 데레사님만큼 사전에 잘 알지는 못했습니다. 그러나 poiemaweb이라는 프로그래밍 교육 사이트를 운영 중이셨고, 해당 사이트의 꼼꼼한 설명과 풍부한 예제는 웅모님의 강의에 대한 신뢰감을 심어주었습니다. 이후에 서술하겠지만 결국 웅모님은 현재 제 프로그래밍에 대한 생각에 가장 큰 영향을 주신 분이 되었습니다. 지인의 추천과 비교적 공개된 하이어링 리포트셋째로는 지인의 추천이 있었고 채용 리포트가 공개되어 있었다는 점입니다. 스마트스터디에서 마케팅 직무로 일하고 있는 지인이 패스트캠퍼스의 디지털 마케팅 스쿨 출신이었습니다. 그 지인으로부터 패스트캠퍼스의 정보와 웹 프로그래밍 스쿨에 대한 정보, 학원 전반에 대한 추천을 들을 수 있었습니다. 그는 구직활동에 도움을 받았고 또 이를 바탕으로 실제 취업에 이르렀으니, 저 또한 이러한 기대감이 들었습니다. 또한 패스트캠퍼스 공식 홈페이지에 공개되어 있는 채용 리포트의 내용은 또한 제가 큰 기대감과 신뢰감을 주었습니다. 대개의 학원들이나 기관들이 자신들의 과정을 수료한 학생들의 취업률이나 정보를 비교적 덜 알리기 때문입니다. 그런 면에서 패스트캠퍼스는 신뢰도가 높았습니다.패스트캠퍼스 스쿨 하이어링 리포트 사전과제의 난이도넷째로 사전과제의 난이도에 신뢰감을 얻었습니다. 패스트캠퍼스의 경우 스쿨 등록 이전 사전과제가 주어지는데, 생각보다 난이도가 있는 과제였습니다. 다른 학원은 아예 사전과제가 없거나 있더라도 프로그램을 몇 개 까는게 전부였는데, 패스트캠퍼스는 달랐습니다. 난이도 있는 과제를 통해 본 스쿨의 커리큘럼이 단순하지 않고 배울 점이 있을 것이라는 기대감을 주었습니다. 패스트캠퍼스 이외의 학원, 기관들사실 패스트캠퍼스 뿐만 아니라 여러 국비지원 학원과 부트캠프를 돌아다니며 상담을 받곤 했습니다. 구체적인 이름을 언급하기는 좀 그래서 간략하게 선택하지 않은 이유를 적겠습니다. 위에서 언급했자시피 국비지원은 프론트엔드 개발자를 양성한다고 하지만 사실상 웹 퍼블리셔(HTML/CSS)과정과 간단한 자바스크립트와 라이브러리(jQuery)를 가르치는 정도였고, 거기에 Java의 spring을 가르침으로서 ‘풀스택 개발자’ 양성과 다름없다고 홍보를 했습니다. 풀스택 개발자가 3~6개월만에 양성된다는 것도 믿음이 가지 않았고 Java를 공부하고 싶은 마음도 없었습니다. 어떤 부트캠프는 JavaScript를 아예 가르치지 않거나(최근 JS를 가르치는 교육과정을 편성했다고 합니다.) 아니면 교육이 대부분 영어로 진행되는 단점을 갖고 있었습니다. 영어로 진행되는 수업의 경우 프로그래밍을 배우는게 아니라 영어를 배우러 가는 듯한 피로감을 느낄 것 같았습니다. 또 핑계를 찾기도 쉬울 것 같았습니다. 프로그래밍을 공부하지 않고 ‘영어’ 때문이라고 변명하고 싶지 않았습니다. 아니면 아예 인지도가 너무 떨어지거나 수료생들의 채용정보나 연봉정보가 공개되지 않은 것이 많았습니다. 이러한 이유들로 다른 학원과 기관들을 선택지에서 하나씩 제할 수 있었습니다. 패스트캠퍼스 후기그렇다면 제가 처음에 기대했던 많은 내용을 패스트캠퍼스 프론트엔드 스쿨 과정이 전부 만족시켜줬느냐고 묻는다면 좀 어려운 질문이 될 것 같습니다. 그러나 굳이 고르라고 하면 NO 입니다. 만족스러웠던 부분도 있었고, 불만족스럽거나 실망스러웠던 부분도 있었습니다. 강사진은 100% 만족데레사님과 웅모님에게 프로그래밍을 배운 것은 정말 소중한 경험이었습니다. 데레사님을 통해서 웹표준과 접근성을 고려한 시멘틱 마크업, 반응형 웹 디자인 등을 공부할 수 있었습니다. 같이 들었던 퍼블리셔 출신 6기생들도 감탄할 만큼 뛰어난 수업이었으며, 웹 퍼블리싱 및 프론트 개발에 대한 생각을 송두리째 바꿔주셨습니다. 특히 기억에 남는 것은 시멘틱 마크업과 접근성으로 웹개발의 질을 결정하는 요소라는 것을 알게 되었습니다. Poiemaweb또한 웅모님을 통해 JavaScript를 배운 것은 프로그래밍에 대한 제 생각을 바꿔놓았습니다. 이전까지 ‘구현하면 된 거 아냐?’라는 생각이 프로그래밍을 대하는 제 자세였습니다. 세부적인 내용은 알면 좋고 아님 말고일 뿐이지, 결국은 현업에서 중요한 건 구현하는거 아니겠냐는 마음입니다. 하지만 실제 현업에서 일어나는 일은 유지보수가 많으며, 실제 구현하는 것조차도 이론적 지식이 없다면 효과적이고 퍼포먼스적으로 뛰어난 어플리케이션을 만들 수 없다는 것을 알게 되었습니다. 컴퓨터 메모리에 변수가 어떻게 저장되는지라든지 TypeScript에 let과 const가 왜 들어갔고 그 차이는 뭔지 등의 이론적 내용은 실제 현업에서 중요하게 생각하고 있는 것임을 알 수 있었습니다. 이외에도 기완 조교님과 특강 강사분들은 필요한 순간 적재적소에서 가려운 부위를 긁어주는 효자손과 같았습니다. 전반적인 스쿨 운영과 설계의 미숙, 시설이 아쉬워 강사진은 믿음직했지만 스쿨 과정의 운영과정이나 프로젝트 팀 배정 절차 등은 다소 아쉬운 점이 있었습니다. 우선 스쿨 매니저님이 바빴습니다. 매니저님이 프론트엔드 6기만을 맡는게 아니라 여러 스쿨 기수를 맡고 있었기 때문에 온전히 저희에게 시간과 관심을 쏟을 수 없었습니다. 또한 업무가 많아 스쿨 기수들을 꼼꼼히 챙기기 어려웠던 것 같습니다. 강사님과 소통이 잘 되지 않아 커리큘럼 일정이 꼬이거나 수강생들과의 소통이 잘 이루어지지 못할 때가 있었고, 운영팀에서 준비한 여러 프로그램(페어프로그래밍, 애자인 방법론, 프로젝트 팀 배정 등)이 다소 프로페셔널하지 못한 느낌을 줄 때가 있었습니다. 마치 아마추어들이 한다는 느낌이 있었고 이것은 프로젝트 팀을 배정할 때 특히 두드러졌습니다. 각각의 건물들이 너무 떨어져서 자습이나 스터디를 위해 추운 겨울 밖으러 걸어나가야 할 때도 있었습니다. 그리고 편의시설이 거의 없다는 것이 많이 아쉬웠습니다. 총평패스트캠퍼스를 통해 바뀐 내 맥북(?) 비전공자로서 전문 개발자로서의 커리어를 시작하고 싶으신 분들에게 패스트캠퍼스는 나쁘지 않은 대안이라고 생각합니다. 많은 교육기관이 존재하지만 각각의 장단점이 있기 마련입니다. 패스트캠퍼스는 비교적 장점이 많고 단점이 적은 곳이라고 생각합니다. 그리고 무엇보다 강사진이 어느 교육기관에 꿀리지 않는 수준이라고 생각합니다. 스쿨과 기수마다 다르지만, 주변에서 시설이나 운영에 대해 불만족하는 분들은 있어도 강사진의 실력이나 강의력에 불만족하는 분은 보지 못했습니다. 한 가지 깨닫게 된 것은 개발자의 길은 끝이 없다는 것입니다. 패스트캠퍼스에 처음 들어오면서 기대했던 것은 ‘정답’이었습니다. 여기서 4개월 공부하여 전문 개발자가 되고 취업을 하는 것. 이것이 목표였습니다. 하지만 프로그래밍은 배우면 배울수록 알아야 하는 것이 많고 가야할 길이 구만리라는 것입니다. 돌이켜보면 4개월만에 개발자가 뚝딱 되어있는 것은 어불성설이라고 생각합니다. 혹시라도 4개월만에 2, 3년 경력에 준하는 개발자가 되길 바라는 분은 패스트캠퍼스에 실망하실 수도 있을 것 같습니다. 하지만 패스트캠퍼스는 제게 무엇을 모르고 무엇을 해야하는지를 명확히 보여준 곳이었습니다. 개발자에게 가장 필요한 명확한 자기 인식. 패스트캠퍼스는 이것을 가능하게 했습니다. 지난 4개월 간의 패스트캠퍼스에서의 공부는 전혀 후회없는 선택이었습니다. 지루한 글 읽어주셔서 감사합니다. 누군가에겐 도움이 되었으면 좋겠네요.이상 girin-dev였습니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"http://girin-dev.github.io/categories/ETC/"}],"tags":[{"name":"Self_Review","slug":"Self-Review","permalink":"http://girin-dev.github.io/tags/Self-Review/"}]},{"title":"진유림님 특강","slug":"SL-git(Jay-jin)","date":"2017-11-27T09:14:14.000Z","updated":"2019-01-03T03:31:01.000Z","comments":true,"path":"2017/11/27/SL-git(Jay-jin)/","link":"","permalink":"http://girin-dev.github.io/2017/11/27/SL-git(Jay-jin)/","excerpt":"","text":"진유림님 특강발표 중 나온 사이트 Jay jin’s blog open-color yop slider에 공유한 발표자료들 신입 개발자 생활백서 Hangul.js firebase vue와 친함. Django Girls 나는 왜 개발자가 되려고 하는가? 높은 가지의 열매와 낮은 가지의 열매 낮은 열매란? 한 우물만 파야하는거 아니야? 뭔가 손에 잡히지 않을 때 다른 분야에 대해 공부를 해도 심적으로 위안이 되더라 헤맸던 것도 나무를 오르는 과정이라고 생각하니까 마음이 편해요~ 낮은 열매 따먹기 예쁜거 만들기 자바와 자료구조보다 프론트엔드(HTML, CSS, JS)가 더 재미있더라 파이썬 &amp; 장고 꿀잼~! 해커톤 다수 참여 9XD 온오프라인 커뮤니티 활동 일일커밋 코딩하는 습관 어뷰징 금지 Codewars.com 타인의 코드를 보는 습관(일일코딩) 오픈소스 활동 작은 발표 20명 앞에서 10분 발표를 한 것을 시작으로 다양한 발표 활동과 슬라이드 공유 면접과 Github 보는 것들 코딩스타일, 탭과 스페이스 혼용여부 오픈소스 기여도 어떤 저장소에 Star를 찍고 Fork를 했는지 단점 저장소에 DB 아이디와 암호를 올리는 경우(env파일을 이용하는 방법 등으로 해결해야 함) 이메일을 네이버 쓰는 경우. 깃헙 주소를 내지 않아도 어떻게든 찾아내서 보더라 github 패스트포워드가 아닌 상황에서 머지하는 법 선머지 후풀리퀘 ??? Rebase(히스토리 조작) force push? 번외: 팜므어 번역기 느낀 점 github의 pull request도 현업에서는 굉장히 자세하고 구체적으로 쓰는구나.","categories":[{"name":"ETC","slug":"ETC","permalink":"http://girin-dev.github.io/categories/ETC/"}],"tags":[]},{"title":"171123-TIL","slug":"171123-TIL","date":"2017-11-23T00:44:03.000Z","updated":"2017-11-23T11:56:06.123Z","comments":true,"path":"2017/11/23/171123-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/23/171123-TIL/","excerpt":"","text":"오늘 한 일 Angular Module Routing Angular 복습 &amp; 예습 코드 일일이 치던 것 마저 진행 Todo-list v5 쌤 코드와 비교하고 다시 짜기 반려견 프로젝트 담당 Wire Frame(레이아웃+기능구조) 짜서 ovenapp.io에 올리기 chartjs practice GDG 후기 메모내일 할 일","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171122-TIL","slug":"171122-TIL","date":"2017-11-22T02:21:48.000Z","updated":"2017-11-23T00:45:24.000Z","comments":true,"path":"2017/11/22/171122-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/22/171122-TIL/","excerpt":"","text":"오늘 한 일 Angular 복습 &amp; 예습 코드 일일이 치던 것 마저 진행 Angular-Forms 복습 Todo-list v5 쌤 코드와 비교하고 다시 짜기 내일 수업 예습(Angular Routing/Module) 반려견 프로젝트 Wire Frame(레이아웃+기능구조) 짜기 chartjs practice 블로그 정리 GDG 후기 메모 Medium [번역]알고리즘과 자료구조를 즐겁게 배울 수 있는 앱을 만들어 보았다 http://cs-playground-react.surge.sh/ 저자가 발견한 알고리즘과 자료구조를 시각화한 사이트 (https://www.cs.usfca.edu/~galles/visualization/Algorithms.html) 비전공자로서 느꼈던 컴퓨터 공학 지식에 대한 갈망과 실무자로서 현업에 대한 스킬에 대한 감을 잃지는 않을까하는 갈등 Medium Here’s a new way to learn coding tools and concepts right when you need them freecodecamp 가이드 페이지(https://guide.freecodecamp.org) CSS Weekly How to use SVG as a Placeholder, and Other Image Loading Techniques 이미지 로딩이 완료되기 전에 사용자에게 보여줄 것 과거 여러 방법들 아무것도 표시하지 않음: 퍼포먼스에서 이득일 수 있지만, 사용자의 경험상 최악. 레이아웃이 두두둑거리면서 바뀌기 때문에. Placeholder: 미리 설정된 가벼운 이미지를 표시 Solid Color: 배경 색으로 설정되어 텅 비었지만 레이아웃을 유지 Progressive image loading or “Blur-up”: 특정한 처리를 통해 이미지 로딩 과정을 보여주거나, 원래 이미지를 작게 만들어 원래 사이즈로 뿌려줌으로써 블러 효과를 냄, 사용자에게 기다리면 곧 꺠끗한 이미지가 뜰 것이라는 생각을 하게함. SVG-based placeholders(기본적으로 이미지를 코드처리하여 여러 기교를 부리는 느낌) Edges: 가장 충격적. 이미지를 로딩하는 동안 이미지의 테두리를 그리는 과정을 애니메이션으로 표시 Shapes: 이미지의 내용을 삼각형 처리하여 표시. “Blur-up”과 유사 SQIP: 블러처리와 비슷, 그러나 용량을 획기적으로 줄일 수 있는 것 같음 Silhouettes: 두톤 실루엣을 보여주고 그 위로 원본 이미지가 로딩되면 덮어버리는 방식. 나쁘지 않음. 코드가 긴 건 Edges와 매한가지인듯 여러 방식이 있었고 특히 SVG를 활용하여 코드 처리를 하면 사용자에게 지루한 로딩 시간을 더 좋은 경험으로 줄 수 있지 않을까 생각하게 됨. 너무 길어서 나중에 따로 빼서 정리해야겠다. 내일 할 일 Angular 복습 &amp; 예습 코드 일일이 치던 것 마저 진행 Todo-list v5 쌤 코드와 비교하고 다시 짜기 반려견 프로젝트 담당 Wire Frame(레이아웃+기능구조) 짜서 ovenapp.io에 올리기 chartjs practice 블로그 정리 GDG 후기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171121-TIL","slug":"171121-TIL","date":"2017-11-21T01:17:57.000Z","updated":"2017-11-22T02:40:43.325Z","comments":true,"path":"2017/11/21/171121-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/21/171121-TIL/","excerpt":"","text":"오늘 한 일 블로그 정리 Angular Forms Template-driven Forms Reactive Forms Angular 복습 &amp; 예습 코드 일일이 치던 것 마저 진행 Service &amp; Dependency Injection, RxJS, HttpClient 복습 Todo-list v5 쌤 코드와 비교하고 다시 짜기 내일 수업 예습 GDG 후기 메모 id의 유효성 검사해서 css를 변경하기 [번역]정규표현식으로는 5일 걸리는 작업, 15분만에 끝내기 FlashText 처리데이터의 증가량에 따라 처리시간이 늘어나는 정규표현식에 비해 처리데이터량에 관계없이 처리시간이 일정한, 순수 파이썬 기반의 라이브러리 찾고자 하는 단어가 문장안에 있는지를 찾는 방식이 아니라 문장을 분해하여 그것이 찾고자 하는 단어 뭉치(corpus)에 있느냐를 따지는 방식 특수문자를 지원하지 않고 찾아야 할 키워드가 500개 이상일 경우 유의미 내일 할 일 블로그 정리 Angular Todo-list v5 쌤 코드와 비교하고 다시 짜기 GDG 후기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171120-TIL","slug":"171120-TIL","date":"2017-11-20T01:28:41.000Z","updated":"2017-11-22T02:40:46.155Z","comments":true,"path":"2017/11/20/171120-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/20/171120-TIL/","excerpt":"","text":"오늘 한 일 블로그 정리 Angular Service Service &amp; Dependency Injection RxJS HTTP Angular 복습 &amp; 예습 코드 일일이 치던 것 마저 진행 Service &amp; Dependency Injection, RxJS, HttpClient 복습 Todo-list v5 쌤 코드와 비교하고 다시 짜기 내일 수업 예습 메모 Angular 복습 올체크하기() &amp; 올삭제하기(사실 안 됨) 체크된거 카운트하고 삭제하기 리스트 누르면 인풋으로 바뀌고 수정하기 전체지우기 내일 할 일 블로그 정리 Angular Todo-list v5 쌤 코드와 비교하고 다시 짜기 GDG 후기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171118-171119-TIL","slug":"171118-171119-TIL","date":"2017-11-19T01:28:37.000Z","updated":"2017-11-22T02:34:32.392Z","comments":true,"path":"2017/11/19/171118-171119-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/19/171118-171119-TIL/","excerpt":"","text":"주말동안 한 일 GDG 컨퍼런스 참석","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171117-TIL","slug":"171117-TIL","date":"2017-11-17T04:34:45.000Z","updated":"2017-11-22T02:34:27.000Z","comments":true,"path":"2017/11/17/171117-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/17/171117-TIL/","excerpt":"","text":"오늘 한 일 WebSocket, DataStructure, Gulp 특강 메모 김데레사님과의 만남 HTTP/CSS, TypeScript와 Angular/웹접근성 주말동안 할 일 GDG 컨퍼런스 참석","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171116-TIL","slug":"171116-TIL","date":"2017-11-17T04:34:39.000Z","updated":"2017-11-22T02:34:17.000Z","comments":true,"path":"2017/11/17/171116-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/17/171116-TIL/","excerpt":"","text":"오늘 한 일 Angular Todo-list v5 실습 반려견 프로젝트 Wire Frame(레이아웃+기능구조) 짜기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171115-TIL","slug":"171115-TIL","date":"2017-11-15T01:36:00.000Z","updated":"2017-11-22T03:05:47.000Z","comments":true,"path":"2017/11/15/171115-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/15/171115-TIL/","excerpt":"","text":"오늘 한 일 Angular 복습 코드 쭉 따라치기 메모 질문사항 Interaction 부분. 부모-&gt;자식 상태전달시 FormModules를 써야만 하는 이유가 뭘까? (안 쓰면 자꾸 화면이 새로고침 된다.) builtIn-directive 부분. 값 입력 후 input 창의 값을 지워지게 하려면 어떻게 해야 할까?","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171114-TIL","slug":"171114-TIL","date":"2017-11-14T01:17:42.000Z","updated":"2017-11-22T02:32:37.000Z","comments":true,"path":"2017/11/14/171114-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/14/171114-TIL/","excerpt":"","text":"오늘 한 일 Angular Directive Directive Pipe LifeCycle Hooks","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171113-TIL","slug":"171113-TIL","date":"2017-11-13T07:54:41.000Z","updated":"2017-11-22T02:32:05.626Z","comments":true,"path":"2017/11/13/171113-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/13/171113-TIL/","excerpt":"","text":"오늘 한 일 Angular Component Interaction Accessing Child Style 자소서 수정(자기 전에)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171111-171112-TIL","slug":"171111-171112-TIL","date":"2017-11-12T06:50:20.000Z","updated":"2017-11-22T02:31:05.921Z","comments":true,"path":"2017/11/12/171111-171112-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/12/171111-171112-TIL/","excerpt":"","text":"주말동안 한 일 한 주간 배운 내용 정리 &amp; 복습 Angular를 이용하여 Todo-list v1 만들어보기 MS Azure를 활용하여 챗봇 만들기 Node.js를 활용 Azure와 luis.ai를 활용. 알고리즘 퀴즈 [미완]caeser(s, n)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171110-TIL","slug":"171110-TIL","date":"2017-11-10T02:10:35.000Z","updated":"2017-11-22T03:05:51.000Z","comments":true,"path":"2017/11/10/171110-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/10/171110-TIL/","excerpt":"","text":"오늘 한 일 Angular Component 복습 해커톤 및 숙제 상호작용하는 로그인 창 만들기(no css) 변수 생성기 변수 케이스 체크 및 저장된 변수 불러오기 Todo-list를 커스텀 알고리즘 퀴즈 [미완]caeser(s, n) 메모 프론트엔드 개발자인데 HTML과 CSS를 거의 까먹었다. 더 잊기 전에 복습해야겠다. 다른 스쿨 사람들은 해커톤에서 재미있는 기획을 많이 해왔다. 프론트엔드 스쿨의 특성탓도 물론 있었겠지만 재미있는 이벤트로 다가오지 않았던 것이 아쉽다. 주말동안 할 일 한 주간 배운 내용 정리 &amp; 복습 Angular를 이용하여 Todo-list v1 만들어보기 읽을만한 글(링크) 스타벅스 연결러 앱 공개 &amp; 개발 후기 무료 어플 개발과 노동의 가시적 대가에 대한 욕심, 재미로 하는 코딩(지적유희) 신기한 한글 코딩(함수명을 한글로?) - 자바스크립트도 시도해봤는데 가능했다. 명령어나 메소드를 한글로 바꾸려는 움직임은 본 적이 있는데(말 그대로 한국어와 한글에 기반한 프로그래밍 언어 창조) 기존의 영어문 기반의 프로그래밍 언어에서도 한국어도 함수명이나 변수를 쓸 수 있는게 신기하다. 개인 프로젝트에는 한번 시도해봐야겠다. (물론 프로그래밍 언어의 작명 가이드라인에는 전혀 맞지 않을 것이다. 그 가이드라인 조차도 영어문 기준일테니.)12345let 더하기 = (정수1, 정수2) =&gt; &#123; return 정수1 + 정수2;&#125;console.log(더하기(1, 2)); // 3 HTML&amp;CSS만으로 Todo-list 만들기 How creating CSS images made me a better developer 위 두 글에서도 나타나듯 최근엔 디자인적인 면, 애니메이션의 부분을 css만으로 처리하려는 경향이 있고 심지어 (물론 매우 괴랄맞게 길어진 코드지만) 유저와의 상호작용도 CSS만으로 처리해보려는 시도가 이어지고 있다. 프론트엔드 프레임워크를 대체할리는 없겠지만, css가 더 발전한다면 jQuery 정도는 대체하는 날이 올 수 있지도 않을까? 하는 생각이 들었다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171109-TIL","slug":"171109-TIL","date":"2017-11-09T00:26:47.000Z","updated":"2017-11-10T02:32:30.000Z","comments":true,"path":"2017/11/09/171109-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/09/171109-TIL/","excerpt":"","text":"오늘 한 일 Activity 알고리즘 퀴즈 [미완]caeser(s, n) Angular Component Basics Template Data Binding Built-in directive 메모 Firebase를 실제 모바일 백엔드로 사용하면 일어날 수 있는 일들 안드로이드 백엔드에 관련된 내용이라 가볍게 읽었다. 내일은 해커톤을 한다고 하는데 이미 해본 경험도 있고 밤늦게까지 있을 수 없어서 차라리 아침 일찍 가서 일찍 돌아가야겠다. TIL을 쓰면서 느끼는 것이 조금 부족하게 느껴지는 TIL이라도 deploy를 마치면 뭔가 해냈다는 뿌듯한 기분이 들고 하지 않고 밀려 있으며 계속 찜찜한 기분이든다는 것이다. 조금 부족하더라도 그냥 당일당일 TIL을 deploy하는 편이 낫겟다는 생각이 들었다. 내일 할 일 Angular Component 복습 Todo-list v2(no mongoDB) 작성 상호작용하는 로그인 창 만들기(no css)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171108-TIL","slug":"171108-TIL","date":"2017-11-08T02:23:13.000Z","updated":"2018-02-06T14:25:00.677Z","comments":true,"path":"2017/11/08/171108-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/08/171108-TIL/","excerpt":"","text":"오늘 한 일 Todo-list v2 Firebase로 진행(not mongoDB) Firebase 전까지만 진행 TypeScript, Angular 복습 Angular 예습(interaction까지) 몽키패치: 런타임상에서 함수, 메소드, 속성을 바꾸는 것을 이야기 한다. (http://wiki.sagwangho.com/pages/viewpage.action?pageId=4063243), 흥미러운 점은 원래 게릴라 패치였던 것이 발음의 유사성으로 인해 고릴라 패치가 되고, 이것이 너무 위협적으로 들려 몽키패치가 되었다는 점이다. 알고리즘 퀴즈 nextBigNumber() jumpCase() 메모 jumpCase()는 도저히 모르겠어서 풀이를 찾아보니 그냥 ‘재귀’ 이런 식의 설명이다. 그런 접근 방식이 좋은 걸까? 다른 방식으로도 도전해봐야겠다. Todo-list v2를 firebase 기반으로 구현할 줄 알았는데 시간상의 문제로 할 수 없었다. 아쉽다. 혼자 찾아봐야 하려나? 알고리즘 퀴즈에 너무 많은 시간을 쏟는 느낌이다. 과제일지라도 하루에 1문제, 최대 1시간으로 정해야겠다. [번역] 30살에 주니어 개발자가 된다는 것 (Being a Junior Developer at 30) 내일 할 일 수업 복습","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171107-TIL","slug":"171107-TIL","date":"2017-11-07T01:57:41.000Z","updated":"2017-11-10T02:32:27.000Z","comments":true,"path":"2017/11/07/171107-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/07/171107-TIL/","excerpt":"","text":"오늘 한 일 Angular Basic Angular CLI Architecture TypeScript, Angular 복습 자소서 완성 메모 PT Mono 폰트를 적용하고 vscode 설정에 “workbench.fontAliasing”: “antialiased”를 적용했다. 폰트는 마음에 들고 Aliasing은 화면이 살짝 어두워져서 좀 별로였다. 하지만 좋다고 하니까 일단 써보고 적응해봐야겠다. 개인 면담: 스타트업에 대한 정보 문의, 채용 상담에 대한 대비, 팀프로젝트와 패스트캠퍼스 운영에 대한 피드백, mongoDB 내용이 빠진 것에 대한 아쉬움 등 내일 할 일 알고리즘 퀴즈 [미완]nextBigNumber() jumpCase()","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171106-TIL","slug":"171106-TIL","date":"2017-11-06T00:38:22.000Z","updated":"2017-11-10T02:32:27.000Z","comments":true,"path":"2017/11/06/171106-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/06/171106-TIL/","excerpt":"","text":"오늘 한 일 TypeScript와 JS-SPA SPA Todo-list v2 완성(DB연결까지) ES6 시험 HTML&amp;CSS 시험 예시 : 박스 모델이 뭐죠? grid는 어떻게 짜시나요? display 속성에 대해서 아시는대로 말씀해주세요. TypeScript ‘2-4. 외부 라이브러리의 사용을 위한 TypeScript Definition 설치’는 올드한 내용이라 읽을 필요가 없음. Angular 예습 기존의 JavaScript/ES6 중 Class와 ES6에 대한 이해가 필요 메모내일 할 일","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171104-171105-TIL","slug":"171104-171105-TIL","date":"2017-11-05T00:38:17.000Z","updated":"2017-11-08T09:06:34.610Z","comments":true,"path":"2017/11/05/171104-171105-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/05/171104-171105-TIL/","excerpt":"","text":"주말동안 한 일 자소서 작성 Todo-list v2 내일 할 일 알고리즘 퀴즈 [미완]nextBigNumber() 자소서 작성","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171103-TIL","slug":"171103-TIL","date":"2017-11-03T06:39:09.000Z","updated":"2017-11-08T09:07:10.000Z","comments":true,"path":"2017/11/03/171103-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/03/171103-TIL/","excerpt":"","text":"오늘 한 일 네트워크 특강 메모 그런 REST API로 괜찮은가 주말동안 할 일 자소서 작성 Todo-list v2 완성","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171102-TIL","slug":"171102-TIL","date":"2017-11-02T01:32:48.000Z","updated":"2017-11-03T00:37:08.533Z","comments":true,"path":"2017/11/02/171102-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/02/171102-TIL/","excerpt":"","text":"오늘 한 일 Todo-list v2 메모 미래의 프론트엔드 개발은 어떻게 될까? 모호해지는 웹앱과 네이트브앱의 구분 URI의 중요성/중요해진 성능관리 모듈화되는 CSS/CSS 전처리기와의 작별/HTML-CSS의 중요성 경쟁력있는 빌드 프로세스 하루종일 Todo-list v2를 했는데 결국 끝내지 못했다. 질문 Todo-list의 index.html에 &lt;form&gt;태그가 없는 이유는? &lt;form&gt; 태그는 유효성 검증 등의 여러 기능을 지원하지만 여러 한계점이 있고 태생적으로 화면전환이 일어난다는 치명적인 단점 존재 그래서 특정 프레임워크를 사용하지 않는 경우라면 현업에선 쓰지 않는 것이 보통(회사마다 다를 수 있음) Angular2는 &lt;form&gt;태그를 사용하면서 이러한 한계점을 보완할 수 있는 방법을 제공 결론: Angular2 짱짱 참고자료: HTML 표준 폼과 Angular 폼 내일 할 일 JavaScript &amp; ES6 복습 Ajax (XMLHttpRequest 등) Promise Restful API (payload, PUT) JavaScript 필수 체크리스트 Array(map, filter, reduce, forEach…) -&gt; 콜백함수의 인자값과 실행원리까지 확인하자 콜백함수와 비동기 알고리즘 퀴즈 [미완]nextBigNumber()","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"JavaScript-22-RegExp","slug":"JavaScript-22-RegExp","date":"2017-11-01T11:27:01.000Z","updated":"2017-11-01T12:02:55.688Z","comments":true,"path":"2017/11/01/JavaScript-22-RegExp/","link":"","permalink":"http://girin-dev.github.io/2017/11/01/JavaScript-22-RegExp/","excerpt":"","text":"JavaScript 22. 정규표현식 (RegExp)정규표현식 정규표현식을 사용하는 자바스크립트 메소드 RegExp.prototype.exec(str) 실행 결과를 자체 배열로 반환 [ ‘is’, index: 2, input: ‘This is a pen.’ ] RegExp.prototype.test(str) 실행 결과를 Boolean값으로 반환 String.prototype.match(regexp) 정규표현식에 부합하는 문자를 배열로 반환 String.prototype.replace(regexp) 정규표현식에 부합하는 문자를 특정 문자로 변경 후 문자열로 반환 String.prototype.search(regexp) 정규표현식에 부합하는 문자의 갯수를 반환 String.prototype.split(regexp) 정규표현식에 부합하는 문자를 기준으로 문자열을 나눠서 배열로 반환 123456789101112var targetStr = 'This is a pen.';var regexr = /is/ig;// RegExp 객체의 메소드console.log(regexr.exec(targetStr)); // [ 'is', index: 2, input: 'This is a pen.' ]console.log(regexr.test(targetStr)); // true// String 객체의 메소드console.log(targetStr.match(regexr)); // [ 'is', 'is' ]console.log(targetStr.replace(regexr, 'IS')); // ThIS IS a pen.console.log(targetStr.search(regexr)); // 2console.log(targetStr.split(regexr)); // [ 'Th', ' ', ' a pen.' ]","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"171101-TIL","slug":"171101-TIL","date":"2017-11-01T01:37:33.000Z","updated":"2017-11-06T13:29:38.000Z","comments":true,"path":"2017/11/01/171101-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/11/01/171101-TIL/","excerpt":"","text":"오늘 한 일 Sass를 이용한 Grid 만들기(임기완 조교님) Github 레포 알고리즘 퀴즈 [미완]isPair() 괄호 확인하기 결국 풀지 못해 해설을 보았다. 원리는 ‘(‘, ‘)’의 체크여부에 따라 임의의 변수에 할당한 0에 1을 하나씩 더하거나 빼서 그 임의의 변수의 상태 체크하는 것이다. 다른 사람의 풀이를 보니 정규표현식을 통해 푼 사람도 있었다. 다음에 한번 더 도전해봐야겠다. Todo-list v2 팀프로젝트: 반려동물 depth 짜기(Information Architecture) 메모 D2Coding 코딩할때 쓰면 좋은 폰트라고 해서 다운받아봤는데, 딱히 잘 모르겠다. 너무 얇고 익숙치가 않다. 요새는 이게 트렌드인가 싶었지만 그냥 기존에 쓰던 기본 폰트로 돌아갔다. React보다 Angular2에 더 주목해야하는 이유 마크업과 코드의 분리, HTML표준과 WEB component, TypeScript 등 여러 장점이 있다고 한다. 아직 Angular2를 공부해보지 않아서 정확히 이해할 수는 없었지만 어렴풋하게나마 느낄 수 있었다. Sass를 직접 실습하니 훨씬 편하고 친근하게 느껴진다. 아마 TypeScript를 공부할 때에도 이런 느낌이 아닐까 싶다. 팀프로젝트 depth를 직접 짜니 내 생각의 한계점이나 몰랐던 점도 알게 되었다. 가령 나는 대쉬보드 형식의 웹페이지를 구상했는데, 기존에 자료가 있는 유저에겐 유익하지만, 처음 가입하는 유저에게는 아직 입력하지 않은 텅 빈 화면이 큰 부담으로 느껴질 수 있다는 느낌이다. 내일 할 일 알고리즘 퀴즈 [미완]nextBigNumber() Todo-list v2","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"JavaScript-23-Array","slug":"JavaScript-23-Array","date":"2017-10-31T11:03:40.000Z","updated":"2017-11-02T03:15:04.827Z","comments":true,"path":"2017/10/31/JavaScript-23-Array/","link":"","permalink":"http://girin-dev.github.io/2017/10/31/JavaScript-23-Array/","excerpt":"","text":"JavaScript 23. 배열 (Array)배열의 생성배열 요소의 추가와 삭제배열 요소의 열거Array PropertyArray Method Array.prototype.forEach() 각 요소 순회하면서 무언가 함 원본배열 유지(콜백함수의 세번째 인자로 원본배열 조작가능) 두번째 인자 this 가능 Array.prototype.map() 원본배열을 1:1 매핑하는 새로운 배열 생성 원본배열 유지(콜백함수의 세번째 인자로 원본배열 조작가능) 두번째 인자 this 가능 Array.prototype.filter() return값이 true인 값만을 추려 새로운 배열 생성(if문처럼 다양하게 활용가능) 원본배열 유지 두번째 인자 this 가능 Array.prototype.reduce() 이전 콜백의 반환값(이전 순회에서 반환한 값)을 인자로 받아와 이용.(재귀적 특징) 원본배열에 영향을 주지 않음.ㅍ Array.prototype.find() 있는지 없는지가 중요하기 때문에 처음으로 찾으면 그 값을 반환. 원본배열에 영향을 주지 않음. ES6에 새롭게 도입 (IE미지원) 객체를 가진 배열에 유용하게 쓸 수 있음. filter()가 콜백함수에 의해 반환된 것들을 묶은 배열을 반환하는 것에 반해, find()는 콜백함수에 의해 반환된 첫번째 요소를 반환","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"171031-TIL","slug":"171031-TIL","date":"2017-10-31T00:56:09.000Z","updated":"2017-11-01T11:29:45.000Z","comments":true,"path":"2017/10/31/171031-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/31/171031-TIL/","excerpt":"","text":"오늘 한 일 Express Basic(Routing, Middleware, Static file, Template engine) Todo-list.v3 axios, babel-polyfill, body-parser, dotenv, express, mongoose sass, webpack, eslint MongoDB와 mLab(https://mlab.com/) 활용 Back-end와 서버는 ungmo2님 제공 JavaScript 집중 체크리스트 res.data와 err.response 메모 사파리의 주소창에서 enter키가 작동하지 않는 오류로 며칠동안 고생했는데, 맥을 껐다켰더니 해결되었다. 사실 코멘트(주석)이 없이 읽혀지는 코드가 베스트. 하지만 반드시 그럴 수는 없기 때문에 약간의 코멘트를 추가해주는 것. 너무 많아도 좋지 않다. CSS 프레임워크 100+ Best CSS Frameworks for Responsive Design, Semantic UI, Bootstratp, Material Design 팀프로젝트가 잘 되었으면 좋겠다. 팀프로젝트를 통해 협업과 소통의 경험을 쌓고, 몰랐던 지식을 습득적용하며, 부수적으로는 가시적 결과물로 만족감도 얻고 싶다. axios: promise를 지원하는 HTTP 클라이언트 라이브러리 더 이상 배우려 하지 않는 개발자 : Expert Beginner의 등장 신기술에 관심없는 개발자 이야기일 줄 알았는데, 자신이 부족한 점을 잘 알지 못한 채 주변 몇몇 성과물을 갖고 더이상 발전할 필요를 느끼지 못하는 개발자에 대한 이야기. 지난 2년동안의 나의 모습이 이런 Expert Beginner의 모습이 아니었을까? 언제든지 다시 올 수 있고, 그 사실조차 알아챌 수 없을지도 모른다. 해결방법은 피어리뷰(peer review)와 개발자 커뮤니티와의 교류. 내일 할 일 팀프로젝트: 반려동물 depth 짜기(Information Architecture) 알고리즘 퀴즈 [미완]nextBigNumber() [미완]isPair() 괄호 확인하기 Todo-list v2","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171030-TIL","slug":"171030-TIL","date":"2017-10-30T01:24:04.000Z","updated":"2017-10-31T11:53:09.168Z","comments":true,"path":"2017/10/30/171030-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/30/171030-TIL/","excerpt":"","text":"오늘 한 일 ES6 Promise Node.js &amp; Express Node.js basics 모듈화와 npm JavaScript 표준을 위한 움직임: CommonJS와 AMD Module loading system Express Basic(Routing, Middleware, Static file, Template engine) 맛보기 Todo-list.v1 복기 알고리즘 퀴즈 [미완]nextBigNumber() 맘에 드는 codepen https://codepen.io/tonkec/pen/jWmgqN 2016 인기있는 codepen 메모 HTTP error code 304 이미 캐시에 저장이 되어 받아온 데이터의 변경이 없어 캐시에 저장된 데이터를 그대로 불러올 때. http://ohgyun.com/175 좋은 책 You don’t know JS 내일 할 일 Express Error handling 알고리즘 퀴즈 [미완]nextBigNumber() [미완]isPair() 괄호 확인하기 JavaScript 집중 체크리스트","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171028-171029-TIL","slug":"171028-171029-TIL","date":"2017-10-28T13:22:23.000Z","updated":"2017-10-30T16:49:04.320Z","comments":true,"path":"2017/10/28/171028-171029-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/28/171028-171029-TIL/","excerpt":"","text":"주말동안 한 일 알고리즘 퀴즈 getMinSum() 최솟값 만들기 isPair() 미완 Todo-list 복기 JavaScript 집중 체크리스트 Array.prototype.(map, filter, reduce, forEach) forEach: 각 요소 순회하면서 무언가 함, 원본배열 유지(콜백함수의 세번째 인자로 원본배열 조작가능), 두번째 인자 this 가능 map: 원본배열을 1:1 매핑하는 새로운 배열 생성, 원본배열 유지(콜백함수의 세번째 인자로 원본배열 조작가능), 두번째 인자 this 가능 filter: return값이 true인 값만을 추려 새로운 배열 생성(if문처럼 다양하게 활용가능), 원본배열 유지, 두번째 인자 this 가능 reduce: 이전 콜백의 반환값(이전 순회에서 반환한 값)을 인자로 받아와 이용.(재귀적 특징), 원본배열 유지, 예습 ES6-Promise Node.js","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171027-TIL","slug":"171027-TIL","date":"2017-10-27T08:36:38.000Z","updated":"2017-10-30T14:22:53.044Z","comments":true,"path":"2017/10/27/171027-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/27/171027-TIL/","excerpt":"","text":"오늘 한 일 Network &amp; Database 특강 Network LAN, WAN, MAN, WLAN 네트워크 연결 구조 방식: Star, Ring, Bus Network OSI 7 layers Packet에서 byte와 octet HTTP(HyperText Transfer Protocol)의 TCP/UDP IP갯수와 인구수의 괴리?(사설IP와 공인IP IPv4와 IPv6 Database DB와 DBMS(DataBase Management System) 흔히 떠올리는 Oracle, Mysql 등은 DB가 아니라 DBMS DataBase와 File System(OS의 저장방식)의 차이 자기기술성, 어플리케이션 종석성이 DBMS에는 없다. File System에서 1.hwp를 열려면 한글 프로그램이 있어야 한다. SQL과 NoSQL MongoDB &amp; robomongo 설치 알고리즘 퀴즈 (미완)isPair() 괄호 확인하기 LINE PLUS 동계인턴 채용상담 이태원 라인프렌즈샵 느낀 점 IPv4와 IPv6 처음에 255.255.255.0처럼 각 자리를 세 자리 수로 끊는 IPv4와 IPv6가 왜 각 자리를 네 자리 수로 끊는지 궁금했다.(FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)서양인들한테는 숫자를 세자리 수로 끊어 읽는게 편할텐데. 그런데 다시 생각해보니 이 의문이 지극히 인문학적이라는 생각이 들었다. 사실 저 숫자의 자리 수는 십육진수를 몇 개 표현할 것인가에 따른 것으로 인간이 읽는 십진수와는 전혀 다른 것인데, 몇 자리로 끊은들 그것으 무슨 상관이겠느냐는 생각이다. LINE PLUS 동계인턴 채용상담 수업 1시간을 뺴먹으면서까지 받고 싶었던 상담이었는데 1시간 반을 넘게 기다려도 순서가 안 오길래 결국 받지 못하고 나왔다. 나오면서 채용담당자는 아니지만 행사 책임자로 보이는 직원 분이 간단하게 질의응답을 해주셨다. 하지만 질의응답 공식 루트인 페북 페이지로 구체적 답변을 받아야겠다. 이해가 가지 않았던 것이 웹 Front-End 직군도 Python이나 C/C++, Java 시험을 통해 뽑는다는 것이다. HTML이나 CSS는 아니더라도 JavaScript로 볼 수 있는 기회는 줘야 하는 것이 아닌가 싶은데… 접수 책임자분이 잘못 알려주신 것이기를 바랄 수 밖에 없을 듯 싶다. 개발 직군이야 당연히 그렇겠지만 전공지식(컴공)을 많이 물어본다고 한다. 코딩시험 언어 제한도 그렇고… 뭐 당연한거겠지만, 전공과 무관하게 뽑겠다고 했으면서도 왠만하면 전공인 사람이 오길 바라는 것 같았다. 주말동안 할 일 Todo-list3 까지 마무리 JavaScript 집중 체크리스트 예습","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171026-TIL","slug":"171026-TIL","date":"2017-10-26T08:41:51.000Z","updated":"2017-10-30T01:59:36.383Z","comments":true,"path":"2017/10/26/171026-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/26/171026-TIL/","excerpt":"","text":"오늘 한 일 ES6 Destructuring Class Module 알고리즘 퀴즈 lv2_sumBetween 프로젝트 팀 빌딩 반려동물팀","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171025-TIL","slug":"171025-TIL","date":"2017-10-25T12:51:32.000Z","updated":"2017-10-30T14:23:54.732Z","comments":true,"path":"2017/10/25/171025-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/25/171025-TIL/","excerpt":"","text":"오늘 한 일 알고리즘 퀴즈 lv2_logestPalindrom Todo-list2 임기완 조교님의 라이브코딩","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171024-TIL","slug":"171024-TIL","date":"2017-10-24T02:16:09.000Z","updated":"2017-10-30T16:49:27.000Z","comments":true,"path":"2017/10/24/171024-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/24/171024-TIL/","excerpt":"","text":"오늘 한 일 ES6 let, const Template Literals Arrow function Extended Parameter Handling Enhanced Object property 느낀 점 동욱형과 만났다. 이 형도 프론트엔드 개발을 하고 있고, IT분야에 대한 관심이 많아서 서로간에 이야기할 것이 많았다. 11월에 있을 GDG에서도 만나기로 했다. 동욱형이 알려준 사이트 Hika Maeng의 유튜브 JavaScript, ES6 참고사이트 며칠 전부터 갑작스럽게 ‘컴공 부전공으로라도 할까?’라는 생각이 든다. 30학점만 들으면 되니까 1학기만 추가해서 다니면 충분할 것 같기도 한데… 원래 수료후 바로 구직활동을 하려고 했는데 고민이다. 내일 할 일","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171023-TIL","slug":"171023-TIL","date":"2017-10-23T06:33:37.000Z","updated":"2017-10-29T14:51:26.000Z","comments":true,"path":"2017/10/23/171023-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/23/171023-TIL/","excerpt":"","text":"오늘 한 일 JavaScript 시험 + 복습 Todo-list2 복습 Sass 특강 Basics SassScript CSS Extensions Built-in Function 느낀 점 시험을 봤는데 부족한 점이 많은 것이 느껴진다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171021-171022-TIL","slug":"171021-171022-TIL","date":"2017-10-22T00:12:35.000Z","updated":"2017-10-29T06:26:11.000Z","comments":true,"path":"2017/10/22/171021-171022-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/22/171021-171022-TIL/","excerpt":"","text":"주말동안 한 일 2017 FEconf Performance Optimization JavaScript Fatigue electron으로 만드는 데스크탑 메신저 Redux-thunk에서 Redux-saga로 쉽게 써봅시다. RxJS! Angular 컴포넌트 대화법 TypeScript가 그대를 이롭게 할지니! Todo-list2 기본 기능 구현 완료 그러나 id값 함수은 구현하지 못하고, 삭제 기능도 불완전(값만을 삭제) 시험대비 복습 느낀 점 퍼포먼스 최적화 서비스를 단 0.1초라도 빠르게 만들고자 하는 개발자들의 고충이 느껴진다. 이미지를 줄이고 코드를 줄이고 렌더 방식을 손보고 등등 현업에서 개발자들이 어떻게든 빠르게 화면을 띄우려는 노력이 중요한 것 같다. 2017 FEconf에 가서 사실 많은 내용은 이해하기 어려운 내용이었다. 내가 아직 모르는 것들이 많았고, TypeScript나 Angular도 내가 아직 배우지 않은 내용이라 멀뚱멀뚱 볼 수 밖에 없었다. electron이 역시 신기하다는 것이 기억이 나고 계속해서 변천사를 겪고 있는 JavaScript의 얄궂은 운명을 알 수 있었다. 무엇을 해야 가장 좋을지는 모르겠다. 그렇다고 모든 걸 마스터할때까지 기다릴 수는 없는 법이다. 최신의 기술, 트렌드는 무엇이고 개발자들의 열정만큼은 확실히 알 수 있었다. 최근의 트렌드는 컴포넌트화이다. 사실 가장 큰 성과는 우연히 지인을 만난 것이다. 프로그래밍 동아리 Codrug 창립자 중 한 명이었던 동욱이 형인데, 같이 서로간의 공부 내용을 공유하고 진로 방향에 대해서도 이야기를 나눌 수 있었다. 신사역 근처에서 일하고 계신다는 내용도 알게 되어 나중에 한번 만나 커피라도 마시자고 했다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171020-TIL","slug":"171020-TIL","date":"2017-10-20T00:56:41.000Z","updated":"2017-10-29T06:14:26.000Z","comments":true,"path":"2017/10/20/171020-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/20/171020-TIL/","excerpt":"","text":"오늘 한 일 Activity Todo list 만들기 중 데이터 구조 id 만드는 함수 =&gt; reduce() 활용 (임기완 조교님) Object.freeze() 쓸 수 있음 Trend of Software Engineering 웹앱은 (앱에서 웹페이지를 띄워주는 것) 트렌드에 맞지 않음 (모바일은 모바일답게, 웹은 웹답게) 개인정보와 보안 이슈 클라우드 컴퓨팅 환경에서 서비스를 배포 웹과 앱의 통합 =&gt; PWD(프로그레시브 웹 앱) 안드로이드에서 알리익스프레스에 접속해서 홈화면에 추가해보라. DevOps 기존의 오퍼레이션(Ops) 팀을 쫓아내고 개발팀에서 다 함. Software Engineering 특강 개발자가 회사, 프로젝트 등 다양한 사람들과 협업하는 방식과 자세 DevOps 기존의 회사들은 Dev(개발)부서와 Ops(관리운영)부서가 나뉘어있었다. 그러나 기술지향적 분위기와 협업, 소통의 문제로 최근엔 개발부서가 관리운영까지 맡는 DevOps이 탄생하였다. 개발자와 프로그래머, 코더의 구분 시스템과 알고리즘과 코드화에 따른 능력과 역하 컴퓨터적 사고(Computational Thinking) 과정 문제 조직화(추상화) 솔루션 구현(자동화) 솔루션 실행 및 평가(분석) 특징 문제 분해 패턴인지 / 데이터표현 일반화 / 추상화 알고리즘 다양한 문서와 명세 user case diagram user scenario user stories 소프트웨어 개발주기 과정 모델 Build-fix model: 설계없이 개발, 수정 반복. 빠른 착수와 무계획적 진행 폭포수 모델(Waterfall model): 순차적 개발 모델(전 단계의 완료 전까지 다음 단계로 넘어갈 수 없음), 정형화된 접근과 체계적 문서화, 굉장히 느림 Prototype model: 빠른 프로토타입 제작 이후 피드백 반영하며 진행. 대규모 프로젝트 적용 힘듦 Spiral model: 대규모/고비용, 프로젝트 위험요인 제거가능, 불명확한 각 단계 RAD, Iterative Development model, V model, Component Based Development 소프트웨어 개발 과정 애자일(Agile): 도입/상세/구축/이행의 반복(UP), 스크럼 마스터의 프로세스 주도/각자의 역할에 충실/TDD 중시(XP) 애자일 도구: Planing Poker(애자일 추정과 시간설계를 위한 도구) Pair programming 재미있었고 내가 모르는 부분을 알려주어서 좋았다. TDD(Test Driven Development): 객체지향적, 재설계 시간 단축, 디버깅 시간 단축, 애자일과 시너지(사용자 중심적), 테스트 문서 대체, 추가구현 용이 소프트웨어 배포 과정 Pre-alpha/Alpha/Beta/Closed-Beta(이건 다소 홍보목적) RC(정식제품이 될 가능성이 있는 베타버전)/RTM(소프트웨어 제공 준비 완료)/GA(유저이용 가능상태) TIP Alfred로 화면 띄우기 내용을 채우고 난 이후 option + command + L 누르기 스쿨 네트워크 세션 OT 느낀 점 애자일이라는 새로운 업무방식을 알게 되어서 좋았다. 늘 말로만 들었던 애자일의 여러 도구들과 방식을 실현해봐서 좋았다. 테키한 IT회사들에 있어서 뭔가 초딩스러운 요소가 많은 것 같다. 초딩스럽다고는 하지만 좀 더 생각해보면 생각의 구체화, 단계의 시각화, 명확한 지시전달 등 업무의 핵심적인 요소를 담고 있는 듯. 사실 아주 정확하게 알지는 못하겠지만 하나 명확히 기억이 나는건 ‘Scrum master와 친하게 지내자’라는 것 PWA(Progresive Web App)의 개념이 신기하다. 홈화면 추가가 아니라 좀 더 쉽고 편하게 접근할 수 있는 방법이 생긴다면 더 활성화될 것 같다. Back-end 웹스쿨 분들은 사업을 목적으로 이러한 수업을 듣는 사람도 많은 것 같다. 하지만 의문점은 사업을 할건데 개발을 왜 배우냐는 것이다. 물론 개발을 알면 사업에 도움이 되겠지만 그 정도의 수준은 이러한 고비용 스쿨이 아니라 멋쟁이 사자처럼이나 무료 인터넷 강의같이 더 낫지 않을까? 개발자 출신 사업가는 보았어도, 사업가를 하기 위해 개발을 배우는 건 뭔가 순서가 잘못된 것 같은데… 사실 남의 선택에 왈가왈부할 것은 없다. 나는 사업을 할 것이 아니고 개발자가 되기 위해 개발을 공부하는 것이다. 프로젝트도 기똥찬 아이디어나 수익모델 적용이 아니라, 배운 것을 구현, 복습하고 협업경험을 키우는데 방점을 찍고 싶다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171019-TIL","slug":"171019-TIL","date":"2017-10-19T01:02:25.000Z","updated":"2017-10-29T05:44:58.881Z","comments":true,"path":"2017/10/19/171019-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/19/171019-TIL/","excerpt":"","text":"오늘 한 일 Activity 알고리즘 퀴즈(JS): 서울에서 김서방 찾기 프로그래머스 github Todo-list 만들기 DOM, Event 등 데이터 내부의 id를 지정해주는 함수는 따로 만들어야 한다. 자소서 특강 계기와 분야의 전문가로서 할수 있는 하고 싶은 일은? 왜 개발을 시작했을까? 그럼 하필이면 왜 프론트를 시작하게 되었는가? 개발과 관련된 나의 경험과 기억은 무엇이 있을까? 협업 경험에 대해서 내일 할 일 과제 Todo-list1 Todo-list2","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171018-TIL","slug":"171018-TIL","date":"2017-10-18T01:08:01.000Z","updated":"2017-10-29T05:46:14.000Z","comments":true,"path":"2017/10/18/171018-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/18/171018-TIL/","excerpt":"","text":"오늘 한 일 Git 특정 폴더만 pull하기 git config core.spareCheckout true echo &quot;[원하는 특정 폴더명]&quot; &gt;&gt; .git/info/sparse-checkout git pull upstream master 알고리즘 퀴즈 페어프로그래밍 18번, 19번 20번, 21번, 22번 복습 Ajax, REST API 예습 SPA &amp; Routing","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171017-TIL","slug":"171017-TIL","date":"2017-10-17T01:09:56.000Z","updated":"2017-10-29T05:46:56.584Z","comments":true,"path":"2017/10/17/171017-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/17/171017-TIL/","excerpt":"","text":"오늘 한 일 Activity 13, 14, 15, 27, 28번 퀴즈 해설 JavaScript 이벤트(Event) 마무리 Ajax REST API 과제","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171016-TIL","slug":"171016-TIL","date":"2017-10-16T04:58:14.000Z","updated":"2017-10-29T05:46:52.218Z","comments":true,"path":"2017/10/16/171016-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/16/171016-TIL/","excerpt":"","text":"오늘 한 일 Activity 7, 8, 9, 10, 11번 퀴즈 해설 JavaScript 문서 객체 모델 (DOM) 동기식 처리 모델 vs 비동기식 처리 모델 (Asynchronous processing model) 사용자와 웹페이지의 상호작용을 위한 이벤트 (Event) 과제 DOM 연습문제 2개(27, 28번) 알고리즘(js) 문제 (13 ~ 15번) 복습(Ajax, REST API, SPA&amp;Routing) 느낀 점 문제를 풀때나 업무를 할때나 정확한 표현과 의도가 중요하다. 커뮤니케이션 능력 중요! 문제나 글도 꼼꼼히 읽고 말도 명확하게 읽고 듣자. 추천 공부 방법: 블로그 쓰기. 내가 보기 위한 블로그를 써야하는 것. 구글 이용해서 검색기능 달아야겠다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"JavaScript_Exam_171010","slug":"JavaScript-Exam-171010","date":"2017-10-13T01:03:08.000Z","updated":"2019-01-03T03:23:42.980Z","comments":true,"path":"2017/10/13/JavaScript-Exam-171010/","link":"","permalink":"http://girin-dev.github.io/2017/10/13/JavaScript-Exam-171010/","excerpt":"","text":"JavaScript Exam 171010수기작성 + 손코딩 index.html에서 main.js를 로드하기 위한 코드를 완성하라. 단 index.html은 프로젝트 루트에 위치하고 main.js는 src/js 디렉토리에 위치한다. 1&lt;script src=&quot;src/js/main.js&quot;&gt;&lt;/script&gt; 12345// 정답&lt;script src=”src/js/main.js”&gt;&lt;/script&gt;&lt;script src=”./src/js/main.js”&gt;&lt;/script&gt;// 아래 코드도 정상 작동&lt;script src=”/src/js/main.js”&gt;&lt;/script&gt; 변수란 무엇인가? 1변수란 사람이 알아볼 수 있는 형식을 이용해 데이터 값을 메모리에 할당, 참조하여 호출, 사용할 수 있도록 하는 것이다. 12// 정답변수는 위치(주소)를 기억하는 저장소이다. 위치란 메모리 상의 주소(address)를 의미한다. 즉 변수란 메모리 주소(Memory address)에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자(identifier)이다. JavaScript의 자료형을 모두 나열하라. 1문자열(String), 숫자형(Number), null, undefined, boolean, Symbol의 기본자료형과 Object(객체)가 있다. 123// 정답기본자료형(primitive data type): Boolean, null, undefined, Number, String, Symbol(ES6에 추가)객체형(Object type): Object var foo = 42 / -0; console.log(foo);의 결과를 기술하라. 1-Infinity 12// 정답-Infinity 변수 선언 시 var 키워드를 생략할 수 있다. 이때 변수는 전역 변수가 되는데 그 이유는 무엇인가? 123&gt; // 순환논리의 오류&gt;var 키워드를 생략할 경우 자바스크립트는 암묵적으로 var를 붙여서 처리하게 된다. 자바스크립트는 function-block-scope를 갖기 떄문에 function 내 변수가 아닌 한 모두 전역변수이다. 따라서 해당 변수는 전역 변수가 된다.&gt; 12// 정답자바스크립트 엔진은 변수 할당문을 만나면 해당 스코프 내에서 해당 변수의 선언을 검색한다. 이때 검색에 실패하면 상위 스코프에서 해당 변수의 선언을 검색한다. 최상위 스코프인 전역에서도 해당 변수 선언의 검색에 실패한 경우, 자바스크립트 엔진은 해당 변수를 전역 변수로 간주하고 선언하기 때문이다. 변수 호이스팅이 발생하는 이유를 설명하라 1변수는 변수 선언, 초기화, 값 할당의 절차를 거치는데, 자바스크립트 엔진은 스크립트를 읽기 전 모든 변수를 취합해 VO(Variable Object)에 넣어 선언하고 동시에 undefined로 초기화한다. 이후 변수 선언 코드를 읽을 때 값을 할당하게 된다. 이 절차상의 순서 차이로 인해 변수 호이스팅이 발생한다. 12// 정답var 키워드로 선언된 변수는 선언 단계와 초기화 단계가 한번에 이루어진다. 즉, 스코프에 변수가 등록되고 변수는 메모리에 공간을 확보한 후 undefined로 초기화된다. 따라서 변수 선언문 이전에 변수에 접근하여도 Variable Object에 변수가 존재하기 때문에 에러가 발생하지 않는다. 다만 undefined를 반환한다. var x = 5;일 때, console.log(x != &#39;5&#39;);의 결과는 무엇인가? 1false 12// 정답false var foo = false &amp;&amp; &#39;Cat&#39;; 일 때, foo의 값은 무엇인가? 1false 12// 정답false console.log(!!null);의 결과는 무엇인가? 12&gt;undefined&gt; 12// 정답false 0에서 10미만까지 홀수만을 큰 수부터 출력하는 코드를 for문을 사용하여 작성하라. 123456&gt;for (i = 5; i &gt; 0; i--)&#123;&gt; var n = 0;&gt; n = 2i - 1;&gt; console.log(n);&gt;&#125;&gt; 1234// 정답for (var i = 0; i &gt;= 0; i--) &#123; if (i % 2 !== 0) console.log(i);&#125; 0에서 10미만까지 3의 배수를 큰 수부터 출력하는 while문을 사용하여 작성하라. 단 0은 출력하지 않는다. 1234567i = 10;while (i &gt; 1) &#123; i--; if (i % 3 === 0)&#123; console.log(i); &#125;&#125; 123456// 정답var i = 9;while (i &gt; 0) &#123; if(i % 3 === 0) console.log(i); i--;&#125; 문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단, 객체 리터럴 방식을 사용한다. 12345&gt;var obj = &#123;&gt; name: 'string',&gt; sayName: this.name&gt;&#125;&gt; 12345678// 정답var obj = &#123; name: 'Lee', sayName: function() &#123; console.log(this.name); &#125;&#125;;obj.sayName(); 문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단 생성자 함수 방식(함수 Person)을 사용한다. 123456&gt;var Person = function(name)&#123;&gt; this.name = name;&gt; this.sayName = console.log(this.name);&gt;&#125;&gt;var obj = Person('string')&gt; 123456789// 정답function Person() &#123; this.name = 'Lee'; this.sayName = function () &#123; console.log(this.name); &#125;;&#125;var obj = new Person();obj.sayName(); var person = { &#39;my-name&#39;: &#39;Lee&#39;}; 일 떄, my-name 프로퍼티 값을 ‘Kim’으로 변경하고 console.log()를 사용하여 출력하는 코드를 작성하라. 123&gt;person[&apos;my-name&apos;] = &apos;Kim&apos;;&gt;console.log(person);&gt; 1234// 정답var person = &#123; 'my-name': 'Lee' &#125;;person['my-name'] = 'Kim';console.log(person['my-name']); pass-by-refence와 pass-by-valuse의 차이점에 대해 설명하라. 12pass-by-value는 기본자료형에 해당하는 것으로 변수를 할당할 떄 '값'으로 하게 된다는 것이다. 이때 새로운 변수에 이전 변수를 할당하더라도 이 두 변수는 같은 메모리 위치를 가르키지 않고 값만을 복사하여 이전 변수의 메모리 위치가 아닌 곳에 할당한다.pass-by-reference는 객체에 해당하는 것으로 변수를 할당할 떄 참조값을 할당한다. 새로운 변수를 이전 변수와 같이 할당하면 두 변수는 정확히 같은 곳을 가르키게 된다. 또한 둘 중 하나의 값이 변경되면 이전의 변수의 값도 같이 변경된다. 12345// 정답pass-by-value기본자료형의 값은 값(value)으로 전달된다. 즉, 복사되어 전달된다. 기본자료형은 값이 한번 정해지면 변경할 수 없다.(immutable)pass-by-reference참조형(object type)의 값은 실제 객체가 아닌 객체에 대한 참조값이다. 즉, 참조형을 할당하면 객체가 복사되어 전달되는 것이 아니라 참조값(reference)가 전달된다. 객체는 변경 가능한 프로퍼티들의 집ㅍ합이다.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript Exam","slug":"JavaScript-Exam","permalink":"http://girin-dev.github.io/tags/JavaScript-Exam/"}]},{"title":"171013-TIL","slug":"171013-TIL","date":"2017-10-13T00:45:56.000Z","updated":"2017-10-29T09:30:46.000Z","comments":true,"path":"2017/10/13/171013-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/13/171013-TIL/","excerpt":"","text":"오늘 한 일 Scrum 1주 내용 정리 JavaScript 퀴즈 1~3번, 26번, 6번 해설 substring(startIndex[, endIndex]) 정리 시험 복습 &amp; 정리 자기만의 말로 표현할 수 있어야 한다. 수업 내용 복습 Closure Object-Oriented Programming Pair Programming Driver와 Navigator의 협업 정규표현식 9번 퀴즈 (Number, Math) 느낀 점 함수선언식보다 함수표현식을 쓰는 습관을 들이자. 함수선언식은 함수 호이스팅이 발생하고 함수 표현식은 변수 호이스팅이 발생하는데, 이때 변수 호이스팅이 우리의 직관과 논리에 더 부합하기 떄문이다. 이것은 의도하지 않은 오류를 줄여주고 코드의 일관성을 유지하는데 도움을 준다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171012-TIL","slug":"171012-TIL","date":"2017-10-12T00:20:40.000Z","updated":"2017-10-29T09:30:06.955Z","comments":true,"path":"2017/10/12/171012-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/12/171012-TIL/","excerpt":"","text":"오늘 한 일 Activity 과제 풀이 해설 String RegExp JavaScript Execution Context Closure Object-Oriented Programming 과제 예습 복습 퀴즈 (7개) 1주간 공부내용 정리 추천도서 1순위(필수): 인사이드 자바스크립트 2순위(심화) 더글라스 크락포드의 자사스크립트 핵심 속깊은 JavaScript 3순위(좋은 책) 자바스크립트 완벽 가이드 러닝 자바스크립트(ES6초기) 자바스크립트 닌자 비급 자바스크립트&amp;제이쿼리 느낀 점 주말에 복습, 정리해야 할 내용의 양이 어마어마하다. this와 프로토타입은 꼭 다시 봐야겠다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"171011-TIL","slug":"171011-TIL","date":"2017-10-11T01:13:21.000Z","updated":"2017-10-29T09:29:59.318Z","comments":true,"path":"2017/10/11/171011-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/11/171011-TIL/","excerpt":"","text":"오늘 한 일 Activity 시험 풀이 JavaScript Number Math Array RegExp(정규표현식) 과제 예습(Execution Context/Closure/OOP) 복습 퀴즈 String RegExp","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"JavaScript 17. 표준 빌트인 객체 (Standard Built-in Objects)","slug":"JavaScript-17-Standard-Built-in-Objects","date":"2017-10-10T09:07:09.000Z","updated":"2018-01-10T09:50:00.013Z","comments":true,"path":"2017/10/10/JavaScript-17-Standard-Built-in-Objects/","link":"","permalink":"http://girin-dev.github.io/2017/10/10/JavaScript-17-Standard-Built-in-Objects/","excerpt":"","text":"JavaScript 17. 표준 빌트인 객체 (Standard Built-in Objects) Global Objects 라고 표기하기도 하는데 전역객체(Global Object)와 다른 의미 전역 객체 (Global Object) 전역객체도 표준 빌트인 객체 중 하나. 브라우저와 서버에서 전역객체는 다르다.(각각 window와 global) 전역객체는 어플리케이션 안에서 오직 하나만 존재. undefined를 제외하고 모든 것을 가질 수 있음(Object 참고) 전역함수는 전역 객체의 메소드였다.(전역 객체는 전역 변수를 프로퍼티로 갖는다.) 따라서 전역함수와 전역변수를 남발하면 전역객체의 덩치가 점점 커진다. 성능이슈 발생 글로벌 영역에 선언한 함수도 전역 객체의 프로퍼티로 접근 가능. 123456789function moveTo(url) &#123; var location = &#123;'href':'move to '&#125;; // 전역 객체 window의 프로퍼티 location과 충돌 alert(location.href + url); // 이 코드로 실행시 alert까지 뜨고 그냥 지역변수 location의 값을 바꿔주고 끝. // location.href = url; // 이 코드로 실행시 alert 뜬 이후 전역객체의 프로퍼티 location 기능 수행.(페이지 이동) window.location.href = url;&#125;moveTo('http://www.google.com'); 전역객체의 기술은 대개 생략하지만 위 코드와 같이 사용자가 정의한 변수와 전역 객체의 자식 객체 이름이 충돌할 경우, 전역객체를 명확히 기술해 혼동을 방지할 수 있다. 하지만 애초에 이런 식의 코드는 짜지 않는 것이 좋다. 표준 빌트인 객체도 전역 객체의 자식 객체. 따라서 전역 객체 기술을 생략할 수 있다.12// window.alert('Hello world!');;alert('Hello world!'); 전역 프로퍼티 (Global property) Infinity NaN undefined 전역 함수 (Global function) eval() 매개변수에 전달된 문자열 구문 또는 표현식을 평가 실행 보안상의 문제로 절대 사용 금지 isFinite() 매개변수에 전달된 값이 유한수인지 아닌지를 검사 유한수이면 true, 무한수이면 false를 반환 전달값이 문자열의 숫자인 경우, 숫자로 변환하여 검사를 수행한다. 숫자도 아니고 문자열 속의 숫자도 아닌 경우 false로 반환한다.(null 예외)1234567891011isFinite([검사하고자 하는 값])console.log(isFinite(Infinity)); // falseconsole.log(isFinite(NaN)); // falseconsole.log(isFinite('Hello')); // falseconsole.log(isFinite('2005/12/12')); // falseconsole.log(isFinite(1/3)); // true, 컴퓨터는 무한소수를 끝까지 표현하지 않고 버려서 유한소수로 표현.console.log(isFinite(0)); // trueconsole.log(isFinite(2e64)); // trueconsole.log(isFinite(null)); // true: null-&gt;0 isNaN() 매개변수에 전달된 값이 NaN인지 검사, 숫자가 맞다면 false 숫자가 아니면 true 반환.1234567891011121314151617181920isNaN([검사하고자 하는 값])isNaN(NaN) // trueisNaN(undefined) // true: undefined -&gt; NaNisNaN(&#123;&#125;) // true: &#123;&#125; -&gt; NaNisNaN('blabla') // true: 'blabla' -&gt; NaNisNaN(true) // false: true -&gt; 1isNaN(null) // false: null -&gt; 0isNaN(37) // false// stringsisNaN('37') // false: '37' -&gt; 37isNaN('37.37') // false: '37.37' -&gt; 37.37isNaN('') // false: '' -&gt; 0isNaN(' ') // false: ' ' -&gt; 0// datesisNaN(new Date()) // false: new Date() -&gt; NumberisNaN(new Date().toString()) // true: String -&gt; NaN parseFloat() 이어서…","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"JavaScript 16. 자바스크립트가 제공하는 내장 객체 (Built-in Object)","slug":"JavaScript-16-Built-in-Object","date":"2017-10-10T09:05:59.000Z","updated":"2017-10-10T14:38:29.066Z","comments":true,"path":"2017/10/10/JavaScript-16-Built-in-Object/","link":"","permalink":"http://girin-dev.github.io/2017/10/10/JavaScript-16-Built-in-Object/","excerpt":"","text":"JavaScript 16. 자바스크립트가 제공하는 내장 객체 (Built-in Object) Built-in(API) 이란? 이미 자바스크립트에 내장된, 또한 검증된 것들(객체, 함수 등) 쓰려면 뭐가 있는지는 알아야 한다. 모르면 자기가 직접 만들려고 할 것이고 그럼 그 검증되지 않은 코드는 퍼포먼스 등에서 문제가 생긴다. String과 Array(순회가능, index라는 순서가 있어서 다루기가 편함, array의 built-in은 성능이 우수) 등 빌트인 객체 (내장객체, Built-in Object) Standard Built-in Objects (Global Objects, not Global Object전역객체) BOM (Browser Object Model) DOM (Document Object Model) Standard Built-in Objects(표준 빌트인 객체) Global Objects라고도 하지만 전역 객체(Global Object)와 다른 뜻 혼동하지 말 것 자세한 내용은 표준 빌트인 객체 (Standard Built-in Objects) 참고 Native Object (BOM/DOM) BOM 브라우저를 프로그래밍적으로 통제할 수 있음 window document, history, location, navigator, screen DOM CSS와 HTML 등의 구조를 프로그래밍적으로 통제할 수 있음 필요시 따로 공부해야 함","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"171010-TIL","slug":"171010-TIL","date":"2017-10-10T00:21:15.000Z","updated":"2017-10-29T09:30:02.301Z","comments":true,"path":"2017/10/10/171010-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/10/10/171010-TIL/","excerpt":"","text":"오늘 한 일 Activity 예습/복습 JavaScript Built-in(API) Object Standard Built-in Object String Date 과제 예습(Number/Math/RegExp/Array) 복습(시험, 퀴즈) 퀴즈 String 1~10,000 중 8이 등장하는 횟수 구하기(Google) 짝수와 홀수 구하기 문자열 검증하기 Date 요일 구하기 느낀 점 정리는 주말에 하고 복습에 집중하자","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"JavaScript 12. 함수 호출 패턴에 따라 결정되는 this","slug":"JavaScript-12-this","date":"2017-10-09T04:34:31.000Z","updated":"2018-02-22T05:51:46.000Z","comments":true,"path":"2017/10/09/JavaScript-12-this/","link":"","permalink":"http://girin-dev.github.io/2017/10/09/JavaScript-12-this/","excerpt":"","text":"JavaScript 12. 함수 호출 패턴에 따라 결정되는 this 일반적인 객체에는 this가 없고 함수객체에만 존재. 기본은 this가 전역객체(window/global)를 의미 이 두가지 빼고는 메소드와 생성자 함수일 때만 다름. 함수 호출 패턴과 this 바인딩 아래 4가지 패턴에 따라 어떤 객체 this에 바인딩할지 결정. 함수 호출 패턴 매소드 호출 패턴 생성자 호출 패턴 apply 호출 패턴 1. 함수 호출 패턴(Function Invocation Pattern) 브라우저에서는 window, 서버(node.js)에서는 global 2. 메소드 호출 패턴(Method Invocation Pattern) 해당 메소드를 소유한 객체가 this 3. 생성자 호출 패턴(Constructor Invocation Pattern) 생성자로 만든 함수라면 new를 넣어주자… new 연산자와 함께 생성자 함수를 호출하면 자바스크립트가 알아서 빈 객체를 생성하고 함수 내부의 this 의 참조(원래 window)를 지우고 생성한 빈 객체를 참조하게 한다. 따라서 이때 this는 생성된 빈 객체~(this를 생성된 빈 객체에 바인딩한다.) [앞] instanceof [뒤]=&gt; ‘뒤’가 ‘앞’을 만든 주체니? 라는 뜻 callee 는 불림 당한 것 / caller 는 부른 것 4. apply 호출 패턴(Apply Invocation Pattern) 특정 객체에 명시적으로 this를 바인딩해주는 방법 call()도 동일한 기능을 수행하며 단지 넘겨받는 인자의 형식에 차이가 있다. apply()는 기본적으로 함수를 호출하는 것 그 뿐이며 호출하면서 this를 명시적으로 바인딩해주고, 해당 함수에서 쓰일 인자들을 배열의 형태로 넘길 수 있게 한다.(1) 기본 형식function.apply(thisArg, [argsArray]) 첫번째 인자 thisArg는 해당 함수 내부에서 사용한 this에 바인딩할 객체 두번째 인자 argArray는 해당 함수를 호출할 때 넘길 인자들의 배열 1234567891011121314151617181920212223// Person 객체 생성자 함수 예시// 생성자 함수function Person (name, age, gender) &#123; this.name = name; this.age = age; this.gender = gender;&#125;// foo 빈 객체 생성var foo = &#123;&#125;;// apply() 메소드 호출Person.apply(foo, ['foo', 15, 'female']);console.log(foo); // &#123; name: 'foo', 15, 'female' &#125;// foo는 Person의 this를 명시적으로 바인딩한 것으로 빈 객체// ['foo', 15, 'female']는 Person 함수의 인자들의 배열// call()// apply()가 두번째 인자를 배열의 형태로 넘기는 것과 달리 인자를 하나하나 넘긴다.Person.call(foo, 'foo', 15, 'female');// Math.max() 예시var array = [1, 2, 3, 4, 5]Math.max(array) // NaNMath.max.apply(null, array) // 5, 이 경우 해당 함수에서 this를 사용하지 않으므로 어떤 값을 넣어도 무관하다. (2) 유사 배열 객체에서 배열 메소드 사용하기 apply()의 대표적인 용도 pop()이나 shift()와 같은 경우 리스트가 아닌 객체는 표준 배열 메소드를 사용할 수 없는데 apply()를 활용하면 얼마든지 가능1234567891011121314151617// Array.prototype.slice() 예시function myFunction() &#123; console.dir(arguments); // arguments.shift(); // 이 경우 에러 출력 Uncaught TypeError: arguments.shift is not a function // arguments 객체를 배열로 반환 var args = Array.prototype.slice.apply(arguments); console.dir(args);&#125;myFunction(1, 2, 3);// 해설 // 1. Array.prototype.slice(start, end)는 배열의 특정 부분에 대한 \"복사본\"을 생성한다.// 2. Array.prototype.slice.apply(arguments)는 두번째 인자를 넣지 않았으므로 this를 arguments에 바인딩하고 Array.prototype.slice()로 아무 인자를 넘기지 않았다는 뜻.// 3. 그 경우 변수 args에 리턴되는 값은 arguments 객체의 모든 요소를 그대로 \"복사\"한 \"배열\"이다.// 4. 이제부터 변수 args는 배열(Array)로써 표준 배열 메소드를 사용할 수 있다.// 5. 즉. Array.prototype.slice() 메소드를 arguments 객체 자신의 메소드인 것처럼 arguments.slice()와 같은 형태로 호출하라는 것. (3) 호출 함수와 콜백 함수의 this를 일치시킬때 사용할 수 있는 call() 호출하는 외부 함수와 콜백 함수의 this가 다를 경우(외부 함수는 해당 함수를 호출한 객체, 콜백함수는 window나 global 콜백 함수의 this를 명시적으로 지정하여 호출 함수의 this와 일치시켜 사용할 수 있음 1234567891011121314151617// call() 활용function Person(name) &#123; this.name = name&#125;Person.prototype.doSomething = function(callback) &#123; if(typeof callback == 'function') &#123; callback.call(this) // 이 코드가 없다면 아래 function foo() 함수 정의에 의하여 인자로 받을 callback 함수의 this는 Person 객체가 아니다. &#125;&#125;;function foo() &#123; console.log(this.name)&#125;var p = new Person('Lee');p.doSomething(foo); // 'Lee' [Function.prototype.bind()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)나 ES6의 Arrow function을 활용하는 방법도 있다. 123456789101112131415161718// Function.prototype.bind() 활용function Person(name) &#123; this.name = name&#125;Person.prototype.doSomething = function(callback) &#123; if(typeof callback == 'function') &#123; callback() &#125;&#125;;function foo() &#123; console.log(this.name)&#125;foo.bind(Person)var p = new Person('Lee');p.doSomething(foo); // 'Lee'","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"JavaScript 11. 변수에의 접근성과 생존기간 (life-cycle)","slug":"JavaScript-11-Scope","date":"2017-10-09T04:34:25.000Z","updated":"2017-11-02T01:22:05.000Z","comments":true,"path":"2017/10/09/JavaScript-11-Scope/","link":"","permalink":"http://girin-dev.github.io/2017/10/09/JavaScript-11-Scope/","excerpt":"","text":"JavaScript 11. 변수에의 접근성과 생존기간 (life-cycle) 자바스크립트는 블록레벨스코프가 아니라 펑션레벨스코프! 블록레벨스코프처럼 쓰고 싶으면 var가 아니라 ES6에 새롭게 추가된 let을 쓰자. 스코프는 동일한 변수를 또 쓰기 위해서 고안된 개념(폴더와 디렉토리 개념과 비슷) Global scope 전역의 실체 server-side(Node.js)에서는 glabal(전역객체) 브라우저-side에서 window라는 전역객체 전역변수라는 것은 결국 전역객체 window의 프로퍼티. Non block-level scope function 밖에서 선언된 변수는 블럭 내에서 선언되었다고 할지라도 모두 전역변수, 즉 global scope를 가짐. Function scope 함수 내에서 선언된 매개변수와 변수는 내부에서만 유효(지역변수) 전역변수와 지역변수가 같은 이름으로 중복 선언 되었다고 해도 지역변수를 우선한다. 즉, 실행 컨텍스트에서 스코프 체인에 의한 참조 순위가 존재한다는 뜻. 암묵적 전역 (inplied globals) 함수 내에서 var를 사용하지 않고 변수를 설정하더라도 자바스크립트는 이를 암묵적으로 전역변수로 선언 하지만 의도치 않은 전역변수는 혼란을 초래하므로 var를 반드시 사용할 것. 각각의 코드를 실행해보면서 확인해 볼 것. Lexical scoping (Static scoping) 자바스크립트는 함수가 선언된 시점에서의 유효범위를 갖는다. 호출 시점이 아니다. 따라서 지역함수 내에 호출이 벌어져도 선언 시점에서의 스코프가 결정. 변수명의 중복 여러 javascript파일을 불러오는 경우 전역변수들끼리 중복이 될 수 있다. 이 경우 중복된 변수가 영향을 미쳐 코드가 정상작동하지 않을 수 있다. 따라서 전역변수는 되도록 쓰지 말아야 하며 스코프는 좁힐수록 좋다. 최소한의 전역변수 사용 즉시실행함수사용 더글라스 크락포드의 제안: 굳이 쓰려면 전연변수를 모아놓은 객체를 만들어서 쓸 것. 즉시실행함수를 이용한 전역변수 사용 억제 즉시실행함수를 사용하면 전역변수를 만들지 않게 되어 라이브러리에 자주 이용된다. 실행함수가 실행된 후 해당 함수는 바로 전역에서 사라진다.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"JavaScript 10. 프로토타입과 객체지향 (Prototype)","slug":"JavaScript-10-Prototype","date":"2017-10-08T13:19:07.000Z","updated":"2018-02-23T00:36:48.168Z","comments":true,"path":"2017/10/08/JavaScript-10-Prototype/","link":"","permalink":"http://girin-dev.github.io/2017/10/08/JavaScript-10-Prototype/","excerpt":"","text":"JavaScript 10. 프로토타입과 객체지향 (Prototype) 보통 객체지향언어는 클래스를 사용해서 상속으르 구현. 그러나 자바스크립트는 프로토타입으로 함. 객체 리터럴이나 생성자 함수를 통해 객체를 생성.프로토타입 객체 모든 객체의 prototype 종점은 Object.prototype[[Prototype]] 프로퍼티 vs prototype 프로퍼티 [[Prototype]]은 크롬과 파이어폭스 등의 브라우저에서 __proto__로 구현되어 있음 생성자 함수가 생성한 객체의 [[Prototype]]프로퍼티와 생성자 함수의 prototype 프로퍼티가 가르키는 것은 같은 프로토타입 객체constructor 프로퍼티 constructor 프로퍼티는 객체의 입장에서 자신을 생성한 객체Prototype chain1. 프로토타입 체이닝 특정 객체의 프로퍼티나 메소드에 접근하려고 할 때, 찾는 프로퍼티나 메소드가 해당 객체에 없을 때 [[Prototype]] 링크를 따라 부모 역할을 하는 프로토타입 객체의 프로퍼티를 차례대로 검색하는 것 가령 객체 리터럴 방식으로 생성된 객체에 hasOwnProperty(&#39;...&#39;)와 같이 정의하지도, 메소드로 갖고 있지도 않은 것을 불러와 사용할 수 있는데 그것은 프로토타입 체이닝으로 가능한 것 객체 리터럴 방식과 생성자 함수 방식의 프로토타입 체이닝의 모습은 다른다. 그러나 원칙은 같다. 모든 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 객체를 자신의 프로토타입 객체(부모 객체)로 취급한다.(1) 객체 리터럴 방식의 프로토타입 체이닝 생성된 객체가 [[Prototype]] 링크를 따라 Object.prototype 객체를 향함 생성된 객체를 생성한 생성자 함수는 Object() 생성자 함수(2) 생성자 함수 방식의 프로토타입 체이닝 생성된 객체가 [[Prototype]] 링크를 따라 생성자 함수의 prototype 프로퍼티가 가르키는 객체를 향하고, 이 객체는 최종적으로 Object.prototype 객체를 향한다. 아래 예제의 경우, foo의 객체는 Person() 생성자 함수의 prototype 프로퍼티가 가르키는 Person.prototype 객체를 향하고, 이 객체는 최종적으로 Object.prototype 객체를 향한다.123456789// Person() 생성자 함수function Person(name) &#123; this.name = name;&#125;// foo 객체 생성var foo = new Person('foo');// Person.prototype 객체 출력console.log(Person.prototype); // constructor: ƒ Person(name)를 가진 객체 2. 프로토타입 체이닝의 종점 어떤 방식이든 모든 자바스크립트의 객체는 Object.prototype가 프로토타입 체이닝의 종점 따라서 어떤 객체이든 Object.prototype 객체가 가진 프로퍼티와 메소드에 접근할 수 있다.강의를 들었을 때 썼는데 무슨 말인지 모르겠는 내용…? 객체 리터럴로 생성한 인스턴스와 생성자 함수로 생성한 인스턴스는 prototype chain이 다르다. 따라서 prototype을 활용하고 싶다면 ‘생성자 함수를 통한 인스터스 생성’을 해야 한다. 왜 생성자 함수를 통한 인스턴스 생성을 해야하나? 라는 질문에 대한 답이 된다. 프로토타입 객체의 확장 프로토타입 객체도 객체이므로 일반 객체와 같이 동적으로 프로퍼티를 추가/삭제할 수 있음 추가하는 즉시 반영 그러나 프로토타입 객체 자체를 임의의 객체로 바꾸는 경우에는 이와 관계가 없다.(“프로토타입 객체의 변경” 참고)1234567891011121314function Person(name) &#123; this.name = name;&#125;var foo = new Person('foo');foo.sayHello() // Uncaught TypeError: foo.sayHello is not a function// Person의 프로토타입 객체에 sayHello()라는 함수(메소드)를 동적으로 추가Person.prototype.sayHello = function() &#123; console.log('Hello');&#125;foo.sayHello(); // Hello 기본자료형(Primitive data type)의 확장 new String() -&gt; 문자열을 객체로 갖는 객체 생성자 함수. 문자열.constructor === String이 가능한 건 자바스크립트가 연관 객체(String())로 일시적으로 변환되어 프로토타입 객체를 공유하기 때문 기본자료형 뒤에 점을 찍고 메소드를 적으면 자바스크립트가 내부적으로 관련한 객체로 변환하여 작동시키고, 작동이 끝나면 다시 기본자료형으로 돌려놓음. 빌트인을 건드려서 관련 모든 인스턴스에 영향을 미칠 수 있는 나만의 메소드를 만들 수 있는데… 이것은 비추! 관대한 자바스크립트의 특성을 볼 수 있는 부분.(다른 언어들은 빌트인을 아예 못 건드리게 하는게 보통) 프로토타입 메소드와 this 바인딩 메서드 호출 패턴의 this는 해당 메소드를 호출한 객체에 바인딩.12345678910111213141516171819function Person(name) &#123; this.name = name;&#125;// Person의 프로토타입 객체에 getName()이라는 프로토타입 메소드를 추가Person.prototype.getName = function() &#123; // 해당 메소드는 this 를 갖고 있다. return this.name&#125;var foo = new Person('foo');console.log(foo.getName()); // foo// 실행시 foo 객체 자체에서 getName()을 찾을 수 없으므로 프로토타입 체이닝에 따라 this.name을 반환한다.// 이때 getName()을 호출한 객체는 foo이기 때문에 getName()의 this는 foo 객체에 바인딩되며 따라서 foo 객체의 name인 'foo'를 반환한다.Person.prototype.name = 'person';console.log(Person.prototype.getName());// 이때는 getName()을 호출한 객체가 Person이므로 getName()의 this는 Person.prototype에 바인딩된다.// Person.prototype.name을 동적으로 추가해주지 않으면 this에 바인딩 된 Person.prototype 중 name 프로퍼티를 찾을 수 없기 때문에 undefined가 출력 프로토타입 객체의 변경 자바스크립트는 클래스를 활용하는 자바와 같지 않은데… 자바처럼 쓸 수 없을까? 라는 생각으로 나온 꼼수. 이후에 ES6에서 클래스를 아예 추가해줬다. 물론 이것도 내부적으로는 프로토타입개념으로 작동 권장하는 방식은 아님 constructor 연결이 깨짐.123456789101112131415161718192021222324252627function Person(name) &#123; this.name = name;&#125;console.log(Person.prototype.constructor); // Person(name)// 사전에 정의한 Person(name) 생성자 함수를 가리킨다.var foo = new Person('foo');console.log(foo.country); // undefined// 디폴트 프로토타입 객체를 다른 임의의 프로토타입 객체로 변경// 생성자 함수 Person의 프로퍼티 prototype이 실제 변경된다.Person.prototype = &#123; country: 'korea'&#125;console.log(Person.prototype.constructor); // Object()// 이때 (변경된) Person.prototype은 생성자 함수가 아니라 constructor 프로퍼티를 갖고 있지 않은 임의의 객체일 뿐이므로 프로토타입 체이닝이 동작하여 counstructor를 찾아 상위로 올라간다. // 임의의 객체는 객체 리터럴 방식으로 생성했기 때문에 [[Prototype]] 링크는 Object.prototype으로 연결된다. // Object.prototype은 Object() 생성자 함수와 연결된 프로토타입 객체이다.// 따라서 print(Person.prototype.constructor)는 Object() 생성자 함수를 출력한다.var bar = new Person('bar');// 이때 생성된 bar는 Person.prototype = &#123;...&#125; 로 인해 prototype 프로퍼티가 변경된 Person() 생성자 함수의 instance이다.console.log(foo.country); // undefined// foo는 변경되기 이전의 Person() 생성자 함수의 instance이므로 country 프로퍼티를 갖고 있지 않다.console.log(bar.country); // korea// bar는 변경된 이후의 Person() 생성자 함수의 instance이므로 country 프로퍼티를 갖고 있다.console.log(foo.constructor); // Person(name)console.log(bar.constructor); // Object() 프로토타입 체인 동작 조건 객체의 프로퍼티를 참조할 때(값을 읽거나 메소드를 실행할 때) 해당 객체에 프로퍼티가 없는 경우, 프로토타입 체인이 동작한다. 객체의 프로퍼티에 값을 할당할 때, 프로토타입 체인이 발생하지 않는다. 자바스크립트는 객체에 없는 프로퍼티에 값을 쓰려고 하면 동적으로 객체에 프로퍼티를 추가하기 때문","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"JavaScript 09. 함수 (Function)","slug":"JavaScript-09-Function","date":"2017-10-08T13:18:13.000Z","updated":"2018-02-07T13:22:27.086Z","comments":true,"path":"2017/10/08/JavaScript-09-Function/","link":"","permalink":"http://girin-dev.github.io/2017/10/08/JavaScript-09-Function/","excerpt":"","text":"JavaScript 09. 함수 (Function) 특정 작업 수행을 위해 구문들을 그룹화해 놓은 개념. 코드의 재사용 객체 생성, 객체의 행위 지정(메소드), 정보의 구성/은닉, 클로저, 모듈화 등 여러 기능 수행 함수도 객체의 일부이며 변수나 객체, 배열 등에 저장할 수 있고, 인수 및 반환값으로도 기능할 수 있다.(일급객체의 특징) 1. 함수 정의 방법 3가지(암기) 함수선언식 (Function declaration) 함수표현식 (Function expression)hd Function() 생성자 함수 (1) 함수선언식 (Function declaration) 내부적으로 변수명과 함수명을 똑같이 만든 함수표현식으로 인식한다. 호이스팅에서 함수표현식과 차이가 나는데, 정의되는 위치와 무관하게 어디서든 호출할 수 있다. 반면 함수표현식은 변수 호이스팅 발생. 함수명을 생략할 수 없고 0개 이상의 매개변수(자료형 미정으로 함수 몸체에서 자료형 체크 필요) 실행 구문을 갖는다.123function plus(num)&#123; return num + num;&#125; (2) 함수표현식 (Function expression) 함수는 일급객체로서의 특징을 갖는다 함수를 정의하고 변수에 할당하는 방식 아래 식에서 함수명 plus는 함수 안에서면 유요한 이름.(재귀적이거나 디버깅에만 쓰임) 12345678910111213// 기명 함수표현식(이름붙은 함수 표현식)// 호출시 함수명이 아니라 변수명으로 해야한다.var foo = function plus(num1, num2)&#123; return num1 + num2;&#125;// 익명 함수표현식(이름없는 함수 포현식)var bar = function(num1, num2)&#123; return num1 + num2;&#125;console.log(foo(1, 2)); // 3console.log(bar(1, 2)); // 3console.log(plus(1, 2)); // Uncaught ReferenceError: plus is not defined 함수표현식을 다른 변수로 새로 할당하면 객체인 함수의 특성상 동일한 참조값을 갖는다. 일반 객체와 달리 다른 변수를 재할당하면 다른 값을 갖도록 할당된다(?) 재공부 필요.1234567891011121314var foo = function(a, b)&#123; return a * b;&#125;var bar = foo;console.log(foo(2, 5), bar(2, 5)); // 10 10console.log(foo === bar); // truevar foo = function(a, b)&#123; return a + b;&#125;console.log(foo(2, 5), bar(2, 5)); // 7 10console.log(foo === bar); // false// 이것은 변수 foo가 변경된 것이 아니라 재할당 된 것이기 때문에 값이 다르게 나온 것. (3) Function() 생성자 함수 내부적으로 함수선언식은 함수표현식으로 처리되고, 함수표현식은 Function() 생성자 함수로 처리된다. 결국 앞의 두 방법은 3번의 방법을 쓰기 편하게 만들어 놓은 것. 성능 이슈와 함수의 호이스팅을 고려했을때 함수 표현식을 쓰는게 좋다.123new Function([매개변수1], [매개변수2], ... [매개변수N], [함수 몸체] )var cup = new Function('number', 'return number + number');console.log(cup(10)); // 20 2. 함수 호이스팅 (Function Hoisting) 호이스팅이란 var나 function 등의 선언문을 해당 Scope의 맨 위로 옮기는 것. 자바스크립트 엔진이 스크립트 로딩되는 그 시점에 바로 함수선언식으로 정의된 함수를 한번에 선언, 초기화, 할당해버린다. (VO, variable object에 저장) 이 때문에 함수선언식의 경우 어디에서 선언하든 호출이 가능하다. 그러나 이런 식의 코드는 비추. 123456// 함수선언식var foo = plus(5,6);function apple(num1, num2)&#123; return num1 + num2;&#125; ES6는 let, const를 포함한 모든 선언(var, let, const, function, class)를 호이스팅 함수표현식 은 변수 호이스팅이 발생하기 때문에 변수 생성, undefined으로 초기화만 진행되고, 선언할 때 할당된다. 스크립트 로딩 시점에 VO에 함수를 할당하는 함수선언식과 구분. 우리의 논리적 직관에 맞지 않고 VO에 부담을 주는 함수선언식보다 함수표현식을 쓸 것을 추천(Douglas Crockford) 3. First-class object (일급객체) 일급객체의 조건 무명의 리터럴로 표현 가능 변수나 자료구조(객체, 배열..)에 저장 가능 함수의 파라미터로 전달 가능 =&gt; (함수의 인자로 다른 함수를 넣을 수 있다. -콜백함수) 반환값(return value)으로 사용 가능 (이렇게 짜여진 남의 코드를 독해할 줄 알아야 한다.) javascript 함수는 일급객체 다른 객체와 구별되는 특징: 호출 가능 4. 매개변수 (Parameter, 인자)함수내 변수와 동일하게 작동 (1) 매개변수 (Parameter, 인자)와 인수(argument) 매개변수는 인수가 할당된 파라미터에 할당된 것. 인수를 전달받지 못한 매개변수는 undefined로 초기화된다.1234var foo = function(p1, p2)&#123; console.log(p1, p2);&#125;foo(1); // 1 undefined (2) Call-by-value 기본자료형의 동작방식 함수 호출시 기본자료형 인수를 매개변수로 전달할 때, 매개변수에 값을 복사하여 함수로 전달하는 방식 따라서 함수 내에서 전달된 인수의 값이 변경되었다고 해도 전달이 완료된 기본자료형 값은 변경되지 않는다.12345678910function foo(primitive)&#123; primitive += 1; return primitive;&#125;var x = 0;console.log(foo(x)); // 1console.log(x); // 0// 함수 foo를 통해 함수 내 인수(x)의 값이 변경되었으나 기존의 기본자료형 전역변수인 x는 그대로 0이다. (3) Call-by-reference 함수의 인자(매개변수)에 외부의 객체를 전달했을때, 해당 함수에서 객체의 값이 변경되면, 외부의 원래 객체의 값도 같이 변경된다. (객체는 변경가능하니까) Pass-by 와 동일한 작동. pass와 call는 용어가 다르지만 사용처의 차이일 뿐.(pass는 변수, call은 함수)12345678910111213141516171819202122function changeVal(primitive, obj)&#123; primitive += 10; obj.name = 'Yi'; obj.gender = 'male';&#125;var num = 100;var objt = &#123; name: 'Park', gender: 'female'&#125;;console.log(num); // 100;console.log(objt); // Object &#123;name: 'Park', gender: 'female'&#125;changeVal(num, objt);// 함수를 통해 매개변수로 받은 인수를 변경하면// num은 기본자료형으로 그 값이 변하지 않지만// objt는 객체로 그 값이 변한다.console.log(num); // 100;console.log(objt); // Object &#123;name: 'Yi', gender: 'male'&#125; (4) 순수함수와 비순수함수 순수함수외부에 영향을 주지 않는 함수 비순수 함수위 changeVal과 같이 외부에 영향을 주는 함수외부 객체를 인자로 갖고 있는 함수일 확률이 높고 의도치 않은 값의 변경이 나타날 수 있음.즉, 코드의 예측성을 떨어뜨림. 반환값 (return value) return을 만나면 함수 진행을 중단하고 함수를 호출한 코드로 되돌아간다. return이 없으면 undefined을 반환. 생성자 함수에서 return을 지정하지 않은 경우 생성된 객체를 반환. 의도적인 return이 존재한다면 생성된 객체와 무관하게 return값을 반환. 이때 return된 값이 객체가 아닌 경우라면 이를 무시하고 this로 바인딩된 객체 반환1234567function Person(name, age) &#123; this.name = name; this.age = age; return 100;&#125;var foo = new Person('foo', 30);console.log(foo); // Person &#123; name: 'foo', age: 30 &#125; 비순수함수의 경우 의도적으로 return을 생략하기도 한다. (외부 값 변경을 막기 위해서) 함수의 객체 프로퍼티 함수도 객체이기 때문에 프로퍼티를 갖는다. 일반 객체와 달리 함수만의 표준 프로퍼티를 갖는다. arguments, caller, length, name, prototype, __proto__ arguments 유사 배열 객체(순회가능) 123456789function multiply(x, y) &#123; console.log(arguments); return x * y;&#125;console.log(multiply()); // &#123;&#125;console.log(multiply(1)); // &#123; '0': 1 &#125;console.log(multiply(1,2)); // &#123; '0': 1, '1': 2 &#125;console.log(multiply(1,2,3));// &#123; '0': 1, '1': 2, '2': 3 &#125; 여기서 ‘0’은 프로퍼티명, 1은 프로퍼티값. 프로퍼티명을 0,1,2,3,…. 이런 순서로 갖고 있기 때문에 배열처럼 쓰이는 객체다~라고하면서 유사배열객체라고 한다. 매개변수를 몇개 받아야 할지 판단할 수 없거나 이용자의 판단에 맡겨야 하는 상황이라면, 이때 아예 매개변수를 의도적으로 쓰지 않고 유사배열객체인 arguments를 사용한다. 이를 가변 인자 함수 구현이라고 한다. caller 자신을 호출한 함수 의미 length 매개변수의 갯수 name 함수명 익명함수의 경우 빈 문자열을 값으로 가짐 __proto__ 프로토타입 체인, [[Prototype]] 프로퍼티 자식에게 없으면 생성자함수로 가는게 아니라 부모를 찾아간다. 엄밀히 말하면 부모-자식관계가 아니라 부모 역할을 하는 프로토타입 객체를 찾는데 거기도 없으면 쭉 찾아서 Object prototype까지 가서 있으면 출력, 없으면 Reference Error 출력. prototype 함수 객체만이 갖고 있는 프로퍼티(객체지향의 근간) 함수 객체가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 객체를 가리킨다. 1[객체생성자함수명].prototype.[프로퍼티명]= “[어떤값]” 위 코드의 경우 실행결과가 [객체생성자함수명]이 만든 모든 인스턴스에 동시에 적용이 된다. 공통적인 내용을 다수의 인스턴스가 적용할 때 하나하나 일일히 인스턴스마다 추가해 주는 것은 비효율적이기 때문에 사용된다. 예를 들면 Person.prototype이라는 부모에 sayHello= “[어떤값]” 을 추가해놓으면 알아서 자동으로 모든 인스턴스가 해당 값을 갖게 된다. 함수의 다양한 형태 즉시호출함수표현식(IIFE, Immediately Invoke Function Expression) 최초 한번만 호출되어 재호출 불가. 초기화 처리 등에 사용. 변수명 충돌을 방지하는 목적으로도 사용.(jQuery 등 여러 라이브러리의 변수들의 변수명 충돌 방지) 서버같은거 설정 바뀌면 껏다 켜야 하는데 이 경우가 설정파일을 실행 후 딱 한번만 읽게 하는 것으로 이 경우에 사용가능. 전역변수로 골머리를 앓는데 이때도 유용. 전역변수를 하나도 안 쓸 수 있음.12345678910111213// 기명 즉시실행함수(named immediately-invoked function expression)(function namedFunction() &#123; var a = 2; var b = 4; return a * b;&#125;());// 익명 즉시실행함수(immediately-invoked function expression)(function () &#123; var a = 2; var b = 4; return a * b;&#125;()); 내부함수 (Inner function) 전역/지역 구분 필요 함수 내부에 정의된 함수 내부함수(자식)는 부모함수의 변수에 접근할 수 있다. 부모함수는 자식함수의 변수에 접근할 수 없다. 내부함수는 부모함수 외부에서 접근할 수 없다. 콜백함수 (Callback function) 명시적 호출이 아닌 특정 이벤트 발생시 시스템에 의해 호출되는 함수 이벤트 핸들러가 대표적인 예 비동기식 처리 모델에 사용(처리가 종료되었을때 호출될 함수(콜백함수)를 미리 매개변수에 전달해 놓았다가, 실제 처리가 종료되면 콜백함수 호출)12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt; &lt;button id=\"myButton\"&gt;Click me&lt;/button&gt; &lt;script&gt; // 특정 이벤트(클릭)이 발생했을때 시스템에 의해 호출. var button = document.getElementById('myButton'); button.addEventListener('click', function() &#123; console.log('button clicked!'); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"JavaScript 07. 객체(Object)","slug":"JavaScript-07-Object","date":"2017-10-07T05:00:58.000Z","updated":"2017-10-10T01:13:52.106Z","comments":true,"path":"2017/10/07/JavaScript-07-Object/","link":"","permalink":"http://girin-dev.github.io/2017/10/07/JavaScript-07-Object/","excerpt":"","text":"JavaScript 07. 객체(Object) 자바스크립트에서 기본자료형(문자열, 숫자, Boolean, null, undefined, symbol)을 제외한 모든 값들은 객체 객체(Object)란? property(데이터-이름(키)과 값)와 method(행위)로 구성되어 있고, 갖고 있는 데이터를 활용하게 하는 것을 포함한 것. 객체 간의 상속관계를 통해 각 개체들에 프로퍼티와 메소드를 쓰는 불필요한 중복을 방지할 수 있다. 프로퍼티 (Property) 프로퍼티 명명법: 변수명과 다르게 빈 문자열이나 숫자로 시작해도 무관. 프로퍼티 값: undefined는 오지 못함(undefined는 값을 할당하지 않은 경우 강제적으로 할당하는 것으로 객체의 정보를 담고 있지 않은 객체로서의 프로퍼티는 존재의 의미가 없다. 따라서 undefined을 쓰면 syntax error 발생. 관련 링크 http://insanehong.kr/post/javascript-object/) 메소드 (Method) 프로퍼티 값에 일반 값이 아닌 함수가 오면 메소드가 됨. 객체 생성 방법(암기) 객체를 마음대로 언제든지 바꿀 수 있다는 것이 자바스크립트의 장점. 객체 생성 방법 3가지 객체 리터럴 Object() 생성자 함수 생성자 함수 객체리터럴 내부적으로 2번 방식으로 처리하며, 쓰기 편하라고 만들어 놓은 편의기능. 선언과 동시에 인스턴스 생성. 123456789101112var [객체명] = &#123; [프로퍼티명]: [프로퍼티값]; [프로퍼티명]: [함수(메소드)];&#125;;var girin = &#123; location: 'Seoul', computer: 'MacBook Pro', saySth: function () &#123; console.log('I live in '+ this.location) &#125;&#125; Object() 생성자 함수 new 연산자와 Object() 생성자 함수를 이용해 빈 객체를 생성하고 여기에 프로퍼티와 메소드를 추가하는 방법. 특별한 이유가 없다면 1. 객체리터럴 방식이 더 유용.(어차피 내부 작동방식은 동일) 1234567891011var [객체명] = new Object();[객체명].[프로퍼티명] = [프로퍼티값];[객체명].[프로퍼티명] = [함수(메소드)];var girin = new Object();girin.cafe = 'americano';girin.coffee = function()&#123; console.log('I like ' + this.cafe)&#125; 생성자 함수 중복된 객체를 다수 만들어야 할 경우(중복된 인스턴스가 많을 경우) 사용. 생성자 함수명은 일반적으로 대문자로 시작(암묵적 약속, 일반 함수와의 혼란을 방지) 123456789// 내용을 채운 객체(생성자 함수) 생성function [생성자함수명]([인자값1],[인자값2])&#123; this.[프로퍼티명] = [인자값1]; this.[프로퍼티명] = [인자값2]; this.[프로퍼티명] = [함수(메소드)]&#125;// 정의한 생성자 함수를 이용해 인스턴스 생성var [객체명] = new [생성자함수명]([인자값1], [인자값2]); 1234567891011121314function Seoulian(name, gender)&#123; var married = true; // private this.name = name; // public this.gender = gender; this.sayHello = function()&#123; console.log('Hi! I\\'m Seoulian, ' + this.name) &#125;;&#125;var seoulian1 = new Seoulian('girin', 'female');var seoulian2 = new Seoulian('owl', 'male');console.log(seoulian1.name); // 'girin'console.log(seoulian1.married); // undefined 이때 this는 생성자 함수로 생성될 인스턴스를 가르키며 외부에서 참조 가능하다.(public) 반면 var는 생성자 함수 안에서 선언된 지역 변수로서 외부에서 접근 불가능하다.(private) 객체 프로퍼티 접근 이미 생성한 프로퍼티를 어떻게 쓸 것인가에 대한 문제 프로퍼티 이름 프로퍼티명은 사실 문자열이기 때문에 ‘’를 붙여줘야 하지만 자바스크립트에서 생략 가능. 그러나 -와 같이 연산자로 착각할 수 있는 문자열이 프로퍼티명에 있을 경우 ‘’를 반드시 써줘야 함. (케밥케이스) 그래서 그냥 캐멀케이스나 스네이크케이스를 쓰든지 해라. ‘’로 처리된 프로퍼티명은 외부에서 접근시 [‘’]로만 접근 할 수 있음. 안 붙이면 프로퍼티가 아닌 변수로 인식. 자바스크립트에서 이미 약속되어 있는 예약어도 가급적 피할 것. 프로퍼티 읽기 마침표 표기법 대괄호 표기법123456789101112131415var seoulian = &#123; 'location': 'gangnamgu', 'former-job' : 'teacher', gender: 'etc',&#125;;// console.log()를 빼고 입력하면 출력시 ''를 포함// 마침표 표기법console.log(seoulian.former-job); // ReferenceError: job is not definedconsole.log(seoulian[former-job]); // ReferenceError: former is not definedconsole.log(seoulian['former-job']); // teacher// 대괄호 표기법console.log(seoulian.location); // gangnamguconsole.log(seoulian[location]); // undefined(브라우저), ReferenceError: location is not defined(node.js)console.log(seoulian['location']); // gangnamgu 프로퍼티 값 갱신 변수의 재할당과 동일한 원리로 갱신(복사 후 참조 변경) 동일한 원리인 이유는 객체는 변경가능하나 객체 내의 프로퍼티들은 변경불가한 기본형이기 때문.12345678var seoulian = &#123; 'location': 'gurogu', 'former-job': 'teacher', gender: 'etc',&#125;;seoulian['former-job'] = 'soldier';console.log(seoulian['former-job']); // soldier 프로퍼티 동적 생성 객채가 이미 갖고 있지 않은 프로퍼티라도 값을 할당하면 객체에 해당 프로퍼티를 추가하고 값을 할당함.1234567var seoulian = &#123; 'location': 'jongrogu', 'former-job': 'ironman', gender: 'female',&#125;seoulian.age = 62;console.log(seoulian.age); // 62 프로퍼티 삭제 delete 연산자 활용123delete [객체명].[프로퍼티명] // 프로퍼티 삭제delete [객체명] // 그냥 무시됨.// 객체를 삭제한다는 것은 참조값을 삭제한다는 것으로 [객체명]이 null을 참조하게 해야한다는 것이다. 일반적인 의미로 ''객체를 삭제한다'라는 것 자체가 모순. for-in문 / for-of문 for-in문 객체 내 모든 프로퍼티에 대한 루프(loop)를 수행하게 함.프로퍼티 갯수만큼 알아서 순회한다.그러나 프로퍼티의 순서를 보장하지 않는다.(객체는 동적할당이라는 개념이 있기 때문).여간하면 쓴 순서대로 나오지만 그렇게 나오지 않는 경우가 존재한다는 뜻.\\따라서 배열에서는 쓰지 않는 것을 추천. for-of문 배열 내 모든 요소에 대한 루프(loop)를 수행하게 함.배열은 순서가 중요하기 때문에 ES6에서 새롭게 추가되었다.123456789101112131415161718192021222324252627var seoulian = &#123; 'first-name': 'girin', 'last-name': 'dev', gender: 'male'&#125;;// for-in문for (var prop in seoulian) &#123; console.log(prop + ': ' + seoulian[prop]);&#125;/*first-name: girinlast-name: devgender: male*/// for-of문var array = ['남','한','산','성'];for (const value of array) &#123; console.log(value);&#125;/*남한산성*/ Pass-by-reference 객체는 메모리 저장시 heap이라는 방법으로 할당. heap은 차곡차곡 쌓아 순차적 저장을 하는 stack과 다르게 공간을 찾아서 분리저장하는 것. object는 객체형 또는 참조형. 즉, 객체는 값을 갖고 있는게(실제값) 아니라 값을 갖고 있는 메모리의 주소를 갖고 있는 것(참조값). 1var bar = [객체]; 위와 같은 코드가 있다고 하면 전역변수 bar와 객체가 모두 정확히 같은 메모리를 가르키게 되고, 이것은 복사해서 사실상 다른 위치에 저장하게 되는 pass-by-value와 다르다. 이 방식은 원본 객체가 다른 요소에 의해 변경될 위험을 내재하고 있다.12345678910111213// 객체 리터럴 방식 생성var jeju = &#123; tangerine: 10&#125;var seoguipo = jeju;console.log(jeju.tangerine, seoguipo.tangerine); // 10 10console.log(jeju === seoguipo); // trueseoguipo.tangerine = 20;console.log(jeju.tangerine, seoguipo.tangerine); // 20 20console.log(jeju === seoguipo); // true// 전역변수 seoguipo의 프로퍼티를 변경하였지만 객체 jeju의 프로퍼티도 같이 변경됨을 확일할 수 있다. Pass-by-value 기본자료형은 값이 한번 정해지면 바뀔 수 없다.(변경불가성)12345678910var a = 1;var b = a;console.log(a, b); // 1 1console.log(a === b); // truea = 10;console.log(a, b); // 10 1console.log(a === b); // false// 전역변수 a는 1이라는 숫자형 값을 갖고 있고, b는 마찬가지로 a와 같은 값의 숫자형 값 1을 갖고 있다. 이후 a를 10에 할당(재할당)하자 a는 10이 되지만, b는 그대로 1이다. 기본자료형의 값은 변경이 불가하며 값을 복사하여 저장한다. 즉, a와 b는 같은 1을 갖고 있지만 다른 메모리 위치를 참조하고 있다. 객체의 분류 Object는 웹페이지 등을 표현하기 위해 이미 내장되어 있는 Built-in Object(내장객체)와 사용자가 임의로 생성할 수 있는 Host Object(사용자 정의 객체)를 갖고 있다. Built-in Object에는 Standard Built-in Objects (or Global Objects), BOM (Browser Object Model), DOM (Document Object Model)이 있다. 이 중 BOM와 DOM을 묶어 Native Object라고 하는데 이것은 브라우저(클라이언트)에 존재.(node에는 없다.) 자바스크립트는 DOM을 컨트롤하는 것.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"JavaScript 06. 제어문(Control Flow)","slug":"JavaScript-06-Control-Flow","date":"2017-10-04T07:20:23.000Z","updated":"2017-10-10T00:52:56.339Z","comments":true,"path":"2017/10/04/JavaScript-06-Control-Flow/","link":"","permalink":"http://girin-dev.github.io/2017/10/04/JavaScript-06-Control-Flow/","excerpt":"","text":"JavaScript 06. 제어문(Control Flow) 제어문(조건문과 반복문) 에 의한 흐름제어로 데이터 흐름을 제어 조건에 따른 명령 실행(조건문)과 반복 실행(반복문)이며 일반적으로 순차적으로 진행되는 코드의 진행을 변경하고 조건과 실행여부 등을 변경, 반복할 수 있다. 블록 구문 (Block statement) { } 구문의 기본 함수는 함수 선언 단계에서 실행되지 않고 호출을 할 때에만 실행된다. 자바스크립트에서 지역변수는 함수에만 적용된다. (Scope) 조건문 (Conditional statement) if문 [조건식]이 true일 경우 특정 코드블록을 실행한다. else if와 else는 생략해도 코드는 실행된다.1234567if ([조건식1])&#123; // 조건식1이 true일 경우 이 코드불록을 실행.&#125; else if ([조건식2]) &#123; // 조건식1이 false이고 조건식2가 true일 경우 이 코드블록을 실행.&#125; else &#123; // 조건식1, 조건식2가 모두 false일 경우 이 코드블록을 실행&#125; switch문 switch 변수의 값과 일치하는 case문 실행. break를 넣지 않으면 변수값과 일치하는 case문을 실행한 이후에도 진행하여 break;에 대항하는 값 반환123456789101112131415var coffee = 'americano';switch (coffee) &#123; case 'americano': console.log('coffee americano'); break; case 'cafe-latte': console.log('coffee cafe-latte'); break; case 'espresso': console.log('coffee espresso'); break; default: console.log('unknown coffee'); &#125; 반복문 (Loop, Iteration) for문, while문, do while문 for문 가장 일반적인 반복문 특정 조건이 거짓일 때까지 반복 내부의 식들은 선택사항. (아무 것도 선언하지 않으면 무한루프) 초기문 선언시 변수는 전역변수로 처리되어 메모리 할당(ES5의 문제점) 반복문 시행순서 유의1234567891011121314151617181920for ([초기문]; [조건문]; [증감문]) &#123; 구문;&#125;for (var i = 0; i &lt; 5; i++) &#123; console.log(i);&#125;// i가 0부터 1씩 증가시킨 값을 출력하는데 5 미만까지 출력하라.// 0// 1// 2// 3// 4// 역으로 반복하는 것도 가능// i가 4부터 1씩 감소시킨 값을 출력하는데 0 이상까지 출력하라.for (var i = 4; i &gt;= 0; i--) &#123; console.log(i)&#125;// 출력 값은 위와 같으나 순서가 역순 while문 조건문이 참이면 코드블록 반복(언제나 참이면 무한루프) 조건문이 언제나 참이어도 특정 조건에서 break문을 이용해 무한루프에서 탈출할 수 있다.12345678910111213var n = 0;var x = 0;while (n &lt; 5) &#123; n++; x += 1; console.log(x);&#125;// 0// 1// 2// 3// 4 do while문 while문과 유사하나 조건문 확인 전 무조건 1회 실행. 현업에서 거의 쓰이지 않는다고 함.12345678var i = 0;do &#123; console.log(i); i++;&#125; while (i &lt; 3);// 0, 무조건 1회 실행된 값// 1// 2 continue 구문 실행을 스킵하고 반복문 조건문으로 이동1234567for (var i = 0; i &lt; 5; i++)&#123; if (i &lt; 3) continue; console.log(i);&#125;// 3// 4// 0,1,2는 3보다 작기 때문에 continue;에 의해 스킵. 평가 (Evaluating) 조건식에 일반적 표현식(피연산자와 이항연산자) 뿐만 아니라 문자열, 숫자, 변수, 내장값(true, falsse, null, undefined, NaN, Infinity 등) 또한 들어갈 수 있음. 이때 최대한 이 조건식을 참/거짓의 boolean으로 해석하려고 노력함. 문맥에 따른 암묵적인 강제 형 변환이 이루어진다는 뜻. Type Conversion Table 자료형 변환 문자열(string) -&gt; 숫자(number)123456789101112var string = '123'; // '123'string = +string; // 123string = string * 1; // 123string = parseInt(string); // 123string = Number(string); // 123, 그러나 Number()는 형변환을 위해 만들어진 함수가 아니기 때문에 비추. 원래 Number()란 숫자를 만들어내기 위해 자바스크립트가 갖고 있는 객체.``` * 숫자(Number) -&gt; 문자열(string)```javascriptvar = number = 123; // 123number = number + ''; // '123'number = number.toString(); // '123'number = String(number) // '123', 그러나 String()은 형변환을 위해 만들어진 함수가 아니기 때문에 비추. 원래 String()도 Number()와 마찬가지로 문자열를 만들어내기 위해 자바스크립트가 갖고 있는 객체. Truthy &amp; Falsy values 왠지 false일 것 같은 느낌이 드는 것들은 false 처리된다.(Falsy values) false undefined null 0 NaN &#39;&#39; 이외의 값과 객체들은 모두 true로 처리. (Truthy values) Checking equality 두 값을 비교할 때에는 동등연산자(==, !=)보다 일치연산자(===, !==)을 사용 의도치 않은 결과와 복잡성, 예측성을 때문. Checking existence 객체나 배열이 값을 갖고 있으면 truthy value로 취급되는데 이를 통해 존재여부를 확인할 수 있다.(빈 객체나 배열도 true 취급, 그러나 빈 문자열은 false)","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"JavaScript 05. 연산자(Operator)","slug":"JavaScript-05-Operator","date":"2017-10-02T03:23:50.000Z","updated":"2017-10-09T16:51:49.600Z","comments":true,"path":"2017/10/02/JavaScript-05-Operator/","link":"","permalink":"http://girin-dev.github.io/2017/10/02/JavaScript-05-Operator/","excerpt":"","text":"JavaScript 05. 연산자(Operator) 하나 혹은 그 이상의 값을 하나의 값으로 만들 때 사용한다. 값을 연산, 평가할 때 사용한다. 산술연산자 (Arithmetic Operator) +, -, *, / 덧셈, 뺼셈, 곱셈, 나눗셈 % 나머지 ++, -- 1씩 증가, 감소 +의 특징 연산 대상이 모두 숫자일 경우: 덧셈 수행 문자열이 포함된 경우: 문자열 연결 연산123456789101112131415161718var a = 1;var b = 2;console.log(a+b);// 3var a = 5;var b = 'hello';var c = true;var d = null;var e; // undefinedvar f = Symbol('key');a + b; // '5hello'a + c; // 6 // (boolean true를 1로 치환해 계산, false는 0으로 치환)a + d; // 5a + e; // NaNa + f; // TypeError: Cannot convert a Symbol value to a number 대입연산자 (Assignment Operators) +=, -=, *=, /=, %= 원리대입연산자를 보면 해석된 식을 떠올릴 수 있어야 함.1234567891011var a = 4;var b = 2;a += b; // a = a + b; // 6;a *= b; // a = a * b; // 8;a /= b; // a = a / b; // 2;a %= b; // a = a % b; // 0; 비교연산자 (Comparison Operator) ==, ===의 차이(엄격성) 관계비교 연산자: 이상, 이하 부호순서 주의 삼항연산자: 한 줄로 처리할 수 있을 때만 쓰고 그 이상일 경우 if문을 쓰는게 낫다. | Operator | Description || :————- | :————- || == | 동등비교(loose equality) 최대한 비교 가능하게 형 변환후, 비교 || === | 일치비교(strict equality) 값의 내용 뿐만 아니라 타입까지 일치해야 true 반환 || != , !== | 부등비교 , 불일치비교 || &gt;, &lt;, &gt;=, &lt;= | 관계비교 || ? | 삼항 연산자 | 1234var condition = true;var result = condition ? ['result of true'] : ['result of false'];console.log(result);// 설정된 condition이 true인가? 그럼 ['result of true']이고 false이면 ['result of false'] 논리연산자 (Logical Operators) Boolean (true/false) 값을 반환하는 것이 일반적 사실 원리는 피연산자 중 하나를 반환하는 것. 연산자에 따라 뒤의 값까지 판단하여 뒤 피연산자를 반환하거나 앞의 피연산자 값만으로도 판단이 가능하여 즉시 그 값을 반환할 수 있음.(단축 평가와 연관) || or &amp;&amp; and ! not12345678910111213141516171819true || true // true, 앞의 피연산자 값true || false // true, 앞의 피연산자 값false || true // true, 뒤의 피연산자 값false || false // false, 뒤의 피연산자 값true &amp;&amp; true // true, 뒤의 피연산자 값true &amp;&amp; false // false, 뒤의 피연산자 값false &amp;&amp; true // false, 앞의 피연산자 값false &amp;&amp; false // false, 앞의 피연산자 값!true // false!false // true// true와 false로 간주되는 것들!1 // false!'string' // false!0 // true!null // true!undefined // true 단축평가 (Short-Circuit Evaluation) Boolean값과 함께 사용되지 않은 논리연산자의 경우 판단근거가 되는 피연산자값을 반환한다. 이때 반환하는 피연산자값은 Boolean이 아닐 수 있다. | 평가식 | 평가 결과 || :————- | :————- || true || anything | true (앞) || false || anything | anything (뒤) || true &amp;&amp; anything | anything (뒤) || false &amp;&amp; anything | false (앞) | 1234'foo' || 'bar' // 'foo''foo' &amp;&amp; 'bar' // 'bar'0 || 'bar' // 'bar''foo' &amp;&amp; 0 // 0 타입 연산자 (Type Operators) typeof() 피연산자의 데이터 타입을 문자열로 출력. 12345678910111213// 기본자료형(null 제외)typeof('girin-dev'); // \"string\"// 함수typeof(function()&#123;&#125;); // \"function\"// null, 배열 등 객체(object)typeof([1,2,3,4]); // \"object\"typeof(&#123;name:'girin', city:'seoul'&#125;); // \"object\"typeof(null); // \"object\", 설계적 결함// 선언되지 않은 변수에 대해 오류를 출력하지 않는 설계적 결함typeof(variable_undefined); // \"undefined\" instanceof() 객체가 해당 객체형의 인스턴스인지 확인 123function Person()&#123;&#125;var girin = new Person();girin instanceof Person; // true !! 피연산자를 불린값으로 변환. 기본자료형과 달리 객체는 빈 객체라도 존재하기만 하면 true로 변환.1234567!!''; // false!!1; // trueobj = &#123;&#125;;!!obj; // truearr = [];!!arr; // true","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"알고리즘 퀴즈 (JavaScript, 반복문, 쉬움)","slug":"Algorithm-iteration-easy","date":"2017-10-01T06:58:46.000Z","updated":"2019-01-03T03:30:20.000Z","comments":true,"path":"2017/10/01/Algorithm-iteration-easy/","link":"","permalink":"http://girin-dev.github.io/2017/10/01/Algorithm-iteration-easy/","excerpt":"","text":"조건에 맞는 수 출력(짝수, 홀수) for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 출력하시오. 생각의 흐름: for문을 통해 1부터 10까지 값을 하나씩 얻어낸 후, if문을 활용해 각각의 값을 2로 나눈 나머지가 0인 값만을 선택해 출력한다.123456789101112for (var i = 1; i &lt; 10; i++) &#123; if (i % 2 === 0) &#123; console.log(i); &#125;&#125;// 2// 4// 6// 8// i를 0부터 시작할 경우 0이 출력되는 문제가 발생.// i를 1부터 출력시키는 방법을 선택하였고, 0부터 출력시키게 한다면 if문과 continue; 를 통해 i = 0 인 경우 출력에서 제외시킬 수 있다.// 이외에도 if (i % 2 === 1) continue; 를 통해 짝수가 아닌 수들을 제외하는 방향으로 진행할 수도 있다. for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 문자열로 출력하시오. 생각의 흐름: str라는 변수명을 가진 변수에 빈 문자열을 할당. for문을 이용해 1부터 10미만의 수를 반복시켜 값을 하나씩 얻어낸 후, if문을 활용해 각각의 값을 2로 나눈 나머지가 0인 값을 선택해 str이라는 문자열에 하나씩 더해준다. 반복이 끝나면 str을 출력한다.1234567891011121314var str = '';for (var i = 1; i &lt; 10; i++) &#123; if (i % 2 === 0) &#123; str += i; &#125;&#125;console.log(typeof str + ': ' + str);// string: 2468// Number 자료형을 String 자료형으로 바꾸는 방법// Number 자료형 변수 val// 1. val + ''(빈 문자열), 본 문제에서 사용한 방식// 2. val.toString();// 3. String(val); String()은 형 변환을 위한 함수가 아니기 때문에 비추 for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오. 생각의 흐름: for문을 활용하여 9 부터 0 초과까지 1씩 빼면서 값을 하나하나 구해내어, 각각의 값을 2로 나눈 값이 0인 값만을 구해내 출력한다.1234567891011for (var i = 9; i &gt; 0; i--) &#123; if (i % 2 === 0) &#123; console.log(i); &#125;&#125;// 9// 7// 5// 3// 1// 수를 감소시키면서 반복 가능. while문을 사용하여 0부터 10까지 정수 중에서 짝수만을 작은 수부터 출력하시오. 생각의 흐름: 반복 변수 변수 i를 0으로 할당한다. while문을 활용하여 반복변수 i가 10을 넘기면 반복을 정지시키는 조건을 설정하고, 매 반복마다 i에 1씩을 더해간다. 그 i의 값이 2로 나누어 0이 되면 그때그떄 i를 출력한다.123456789101112var i = 0;while (i &lt; 10) &#123; i++; if (i % 2 === 0) &#123; console.log(i); &#125;&#125;// 2// 4// 6// 8// 첫 시도때 n이라는 변수도 함꼐 설정하여 출력값과 반복변수값를 따로 분리해서 만들었다. 그러나 결국 i와 n의 값이 동일하게 진행되어 n을 지우고 출력값과 반복변수값을 합쳐 코드를 간소화하였다. while문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오. 생각의 흐름: 반복 변수 i를 0으로, 출력할 값을 받을 변수 n을 10으로 할당한다. while문을 활용하여 i가 10을 넘으면 반복을 멈추도록 조건을 설정한다. 매 반복마다 i는 1씩 증가시키고, n은 1씩 감소시킨다. 이때 n을 2로 나눈 나머지가 0인 값을 제외하고 나머지 값을 매 반복마다 출력한다.12345678910111213var i = 0;var n = 10;while (i &lt; 10) &#123; i++; n--; if (n % 2 === 0) continue; console.log(n);&#125;// 9// 7// 5// 3// 1 조건에 맞는 합 구하기 for 문을 사용하여 0부터 10미만의 정수의 합을 출력하시오 생각의 흐름: sum_6의 값을 할당하지 않고, for문을 활용하여 i를 0부터 10미만까지 1씩 늘려가며 표현식을 반복한다. 표현식은 sum_6에 i값을 더해간다. 반복이 끝나면 sum_6을 출력한다.123456var sum_6 = null;for (var i = 0; i &lt; 10; i++) &#123; sum_6 += i;&#125;console.log(sum_6);// 0+1+2+3+4+5+6+7+8+9 = 45 1부터 20까지의 정수 중에서 2 또는 3의 배수가 아닌 수의 총합을 구하시오. 생각의 흐름: sum_7의 값을 할당하지 않고, for문을 활용하여 i를 0부터 20이하까지 1씩 늘려가며 표현식을 반복한다. 표현식은 sum_7에 i값을 더해가는데, 이때 i의 값이 2 또는 3의 배수일 때 값을 제외한다. 반복을 끝내고 sum_7을 형식에 맞게 출력한다.123456789var sum_7 = null;for (i = 0; i &lt;= 20; i++) &#123; if (i % 3 === 0 || i % 2 === 0) continue; sum_7 += i&#125;console.log('최종합: ' + sum_7);// 0+1+5+7+11+13+17+19// 최종합: 73 1부터 20까지의 정수 중에서 2 또는 3의 배수인 수의 총합을 구하시오. 생각의 흐름: sum_8의 값을 할당하지 않고, for문을 활용하여 i를 0부터 20이하까지 1씩 늘려가며 표현식을 반복한다. 표현식은 sum_7에 i값을 더해가는데, 이때 i의 값이 2 또는 3의 배수일 때 값만을 더해간다. 반복을 끝내고 sum_8을 형식에 맞게 출력한다.12345678var sum_8 = null;for (i = 0; i &lt;= 20; i++) &#123; if (i % 3 === 0 || i % 2 === 0) &#123; sum_8 += i &#125;&#125;console.log('최종합: ' + sum_8); 주사위 두 눈 연산 두 개의 주사위를 던졌을 때, 눈의 합이 6이 되는 모든 경우의 수를 출력하시오. 생각의 흐름 내가 접근한 방식: for문을 활용하여 반복 변수 dice_a과 dice_b를 각각 1부터 6이하 까지 반복한다. 이중 for문을 활용하여 dice_a의 각 값마다 dice_b의 모든 값을 비교할 수 있게 하여 그 합을 sum이라는 변수에 담는데 sum이 6이 되었을 때만 출력한다. 예를 들어 dice_a가 1일 때, dice_b의 1~6까지 각각의 값을 모두 더해보고 그 값이 6일 때 그 값만을 출력하게 하는 것이다. 배열을 활용한 방법: 변수 dice_a와 dice_b에 각각에 [1, 2, 3, 4, 5, 6]이라는 배열을 할당한다. 반복 변수 i를 0부터 6미만까지(배열 내 순서는 0부터 시작) 1씩 증가시키며 반복하고 1번의 방법과 마찬가지로 이중 for문을 활용해 dice_a의 i번째 값을 dice_b의 모든 값(반복변수j)과 합쳐보고 그 값이 6이 되면 출력한다. 배열을 활용한 것이지만 생각의 흐름은 1번과 거의 비슷하다.123456789101112131415161718192021222324252627282930// 1. 내가 접근한 방식for (var dice_a = 1; dice_a &lt;= 6; dice_a++) &#123; for (var dice_b = 1; dice_b &lt;= 6; dice_b++) &#123; var sum = dice_a + dice_b if (sum === 6) &#123; console.log('(A ' + dice_a + ', ' + dice_b + ' B)'); &#125; &#125;&#125;// (A 1, 5 B)// (A 2, 4 B)// (A 3, 3 B)// (A 4, 2 B)// (A 5, 1 B)// 2. 배열을 활용한 방법dice_a = [1, 2, 3, 4, 5, 6]dice_b = [1, 2, 3, 4, 5, 6]for (var i = 0; i &lt; 6; i++) &#123; for (var j = 0; j &lt; 6; j++) &#123; if (dice_a[i] + dice_b[j] === 6) &#123; console.log('(A ' + dice_a[i] + ', ' + dice_b[j] + ' B)'); &#125; &#125;&#125;// (A 1, 5 B)// (A 2, 4 B)// (A 3, 3 B)// (A 4, 2 B)// (A 5, 1 B) *로 삼각형 출력하기 삼각형 출력하기 생각의 흐름 for문과 매 반복마다 console.log()을 활용한 방법: sum_10을 빈 문자열로 할당한다. 반복 변수 i를 0부터 5 미만까지 1씩 증가시켜 반복해 표현식을 수행한다. 표현식은 sum_10에 매 반복마다 문자열 *을 더해주고 sum_10을 출력한다. 이중 for문으로 매 반복마다 *을 더하는 방법: sum_10을 빈 문자열로 할당한다. 이중 for문을 활용하여 i를 0부터 5미만까지 1씩 증가시켜 반복하고 내부 for문은 반복 변수 r은 0부터 (i+1) 미만까지 1씩 증가시켜 반복한다. 내부 for문의 표현식을 sum_10에 *을 더해준다. i의 값에 따라 *의 반복 갯수를 결정해주는 방식이다. while문을 활용하는 방법 repeat() 함수를 활용하는 방법 switch를 활용한 방법: 배운 것을 활용해 봄. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// 1. for문과 매 반복마다 `console.log()`을 활용한 방법var sum_10 = '';for (i = 0; i &lt; 5; i++) &#123; sum_10 += '*'; console.log(sum_10);&#125;// 2. 이중 for문으로 매 반복마다 `*`을 더하는 방법var sum_10 = '';for (i = 0; i &lt; 5; i++) &#123; for (r = 0; r &lt; i + 1; r++) &#123; sum_10 += '*'; &#125; sum_10 += '\\n'&#125;console.log(sum_10);// 3. while문을 활용하는 방법var c = 0;var result_10 = '';while (c &lt; 5) &#123; c++; result_10 += '*'; console.log(result_10);&#125;// 4. repeat() 함수를 활용하는 방법for (i = 1; i &lt;= 5; i++) &#123; console.log('*'.repeat(i));&#125;// [반복시키고자 하는 값].repeat([반복시키고자 하는 횟수])// 5. switch를 활용한 방법for (i = 1; i &lt;= 5; i++) &#123; switch (i) &#123; case 1: console.log('*'); break; case 2: console.log('**'); break; case 3: console.log('***'); break; case 4: console.log('****'); break; default: console.log('*****'); &#125;&#125;// 모두 다음과 같이 출력// *// **// ***// ****// ***** 트리 출력하기 생각의 흐름 while문과 이중 for문을 동시에 사용하여 for문 2개를 단순나열을 해소하는 방법: for문을 이용해 i가 2부터 5이하까지 반복하여 i가 홀수인 경우에만 다음 방법을 수행한다. 다음 방법은 변수 n을 0으로 할당하고 sum_11을 빈 문자열로 할당한다. 또한 n이 i값 이하일때만 실행시키는 while문을 작성하고 이떄 n은 1씩 증가시키고 sum_11에 *를 더해나간 후 바로 sum_11을 출력한다. 1번 방법을 도출하기 전 단계의 방법: 1번과 동일. for문 2개를 단순나열하는 방법 제일님 방법: for문을 활용하여 1~5까지 별을 합하여 출력시키는데 중간에 반복변수 i가 3일 때 한번 출력시키는 방법. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// 1. while문과 이중 for문을 동시에 사용하여 for문의 단순나열을 해소하는 방법(2번 방법의 간소화)for (i = 2; i &lt;= 5; i++) &#123; if (i % 2 !== 0) &#123; var n = 0; var sum_11 = ''; while (n &lt; i) &#123; n++; sum_11 += '*' console.log(sum_11); &#125; &#125;&#125;// 2. 1번 방법을 도출하기 전 단계의 방법// for문에서 원하는 숫자값을 도출해서 그 1부터 그 숫자값까지의 별의 갯수를 출력해주는 방식// 이럴거면 반복문을 왜 썼나 싶은 생각이 드는 방식var sum_11_3 = '';var sum_11_5 = '';var n = 0;var m = 0;for (i = 2; i &lt;= 5; i++) &#123; if (i % 2 !== 0) &#123; while (n &lt; i) &#123; n++; sum_11_3 = '*'.repeat(n); console.log(sum_11_3); &#125; &#125; else if (i === 5) &#123; while (m &lt; i) &#123; m++; sum_11_5 = '*'.repeat(m); console.log(sum_11_5); &#125; &#125;&#125;// 3. for문 2개를 단순나열하는 방법var sum_11_3 = '';for (i = 1; i &lt;= 3; i++) &#123; sum_11_3 += '*'; console.log(sum_11_3);&#125;var sum_11_5 = '';for (i = 1; i &lt;= 5; i++) &#123; sum_11_5 += '*'; console.log(sum_11_5);&#125;// 4. 제일님 방법var starCount = '';var starSum = '';for (var i = 1; i &lt;= 5; i++) &#123; starCount += '*'; starSum += starCount + '\\n'; if (i === 3) &#123; console.log(starSum); &#125;&#125;console.log(starSum);// 모두 다음과 같이 출력// *// **// ***// *// **// ***// ****// ***** 정삼각형 출력하기 생각의 흐름 for문과 2개의 내부 for문을 활용해 더해가는 방법: for문을 이용하여 반복변수 i를 1부터 5 이하까지 1씩 증가시키며 두 개의 내부 for문을 반복한다. 첫 for문은 반복변수 z를 0부터 (5-i)까지 1씩 증가시키면서 빈 칸 ‘ ‘을 더해간다. (5-i)미만까지 증가시키는 것이기 때문에 i값이 늘어날수록 ‘ ‘의 수는 줄어든다. 다음 for문은 반복변수 x를 0부터 (2i-1)미만까지 1씩 증가시킨다. i의 값이 커질수록 `의 수는 늘어난다. 이때 중요한 것이 외부 for문을 반복할떄마다*`과 ‘ ‘을 더해 할당하는 변수 tree를 빈 값으로 할당하는 일종의 ‘초기화’ 과정이 필요하다는 것이다. repeat() 함수를 활용한 방법: repeat() 함수를 사용하면 for문을 반복할 필요없이 간소하게 만들 수 있다. 123456789101112131415161718192021222324// 1. 3개의 for문을 활용하여 빈 칸의 수는 줄어들고 `*`은 늘어나게 하는 방법for (i = 1; i &lt;= 5; i++) &#123; var tree = ''; for (z = 0; z &lt; 5 - i; z++) &#123; tree += ' ' &#125; for (x = 0; x &lt; 2 * i - 1; x++) &#123; tree += '*' &#125; console.log(tree);&#125;// 2. repeat() 함수 활용한 방법for (i = 1; i &lt;= 5; i++) &#123; var space = ' '; var star = '*'; console.log(space.repeat(5 - i) + star.repeat(2 * i - 1) + space.repeat(5 - i));&#125;// *// ***// *****// *******// ********* 역-정삼각형 출력하기 생각의 흐름 for문과 2개의 내부 for문을 활용해 더해가는 방법: 12번의 방식을 활용하되, 빈 칸과 *을 만들어 줄 반복문의 반복 범위 설정에 주의한다. 이 방법은 함수화가 되지 않는 방식으로, 함수화가 되는 방식을 고민해야한다. 1234567891011121314151617// 1. for문과 2개의 내부 for문을 활용해 더해가는 방법for (i = 1; i &lt;= 5; i++) &#123; var tree = ''; for (x = 1; x &lt; i; x++) &#123; tree += ' ' &#125; for (z = 0; z &lt; 10 - (2 * i - 1); z++) &#123; tree += '*' &#125; console.log(tree);&#125;// *********// *******// *****// ***// *","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://girin-dev.github.io/categories/Computer-Science/"}],"tags":[{"name":"Algorithm quiz","slug":"Algorithm-quiz","permalink":"http://girin-dev.github.io/tags/Algorithm-quiz/"}]},{"title":"170930~171001-TIL","slug":"170930-171001-TIL","date":"2017-09-30T13:22:29.000Z","updated":"2017-10-02T02:59:25.023Z","comments":true,"path":"2017/09/30/170930-171001-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/30/170930-171001-TIL/","excerpt":"","text":"오늘 한 일 반복문 함수 마무리 후 제출 알고리즘 퀴즈 (JavaScript, 반복문, 쉬움) 정리 함수화 마무리 후 제출 주말~추석 과제 및 복습 하루에 최소 2개 파트씩 정리 느낀 점 해야할 과제가 많기 떄문에 추석에도 노트북을 가져가야 할 것 같다. 인쇄를 해가면 더 좋았을텐데 어차피 .md파일로 저장해야 하니까 노트북을 아예 갖고 가야겠다. Angular와 Angular2의 차이가 뭘까 궁금해서 검색해봤더니 Angular는 ES5를 활용하고 Angular2는 Typescript를 활용한 방식이라고 한다. 참고 사이트 Angular와 Angular2 http://www.sbeenlife.com/22 (특징과 유용성에 대한 여러 차이점 서술) https://hackya.com/kr/angular-angular2-%EA%B7%B8%EB%A6%AC%EA%B3%A0-typescript/ (이 글은 댓글을 통해 논쟁이 오가고 있으며 내용에 대해서 논란이 있는 듯 하다.) 내일 할 일 11.Scope, 12.this 복습 및 정리","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170929-TIL","slug":"170929-TIL","date":"2017-09-29T08:00:08.000Z","updated":"2017-10-01T06:44:29.897Z","comments":true,"path":"2017/09/29/170929-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/29/170929-TIL/","excerpt":"","text":"오늘 한 일 Activity * 역-정삼각형 만들기 함수화 풀이 반복문을 활용한 풀이 재귀함수를 활용한 풀이 Git fork 뜬 레포를 원본 레포로 최신화하는 방법 fork 뜬 레포를 직접 최신화하는 방법은 없음. 로컬 영역에 clone 뜬 디렉토리를 원본 레포로 pull 받아 fork 뜬 레포로 push 하는 방법이 있음12345678&gt; cd [fork 뜬 레포를 pull 받은 로컬 디렉토리]# 로컬 디렉토리에 원본 레포를 연결 후 pull&gt; git remote add upstream [원본 레포 주소]&gt; git pull upstream [브랜치명]# 최신화 된 로컬 디렉토리를 fork 뜬 레포로 push&gt; git push origin master JavaScript 프로토타입과 객체지향(Prototype) 프로토타입 객체 [[Prototype]] 프로퍼티 vs prototype 프로퍼티 constructor 프로퍼티 Prototype chain 프로토타입 객체의 확장 기본자료형(Primitive data type)의 확장 프로토타입 객체의 변경 포로토타입 체인 동작 조건 Scope Global scope Non block-level scope Function scope 암묵적 전역 (implied globals) Lexical scoping (Static scoping) 변수명의 중복 최소한의 전역변수 사용 즉시실행함수를 이용한 전역변수 사용 억제 this 함수 호출 패턴과 this 바인딩 함수 호출 패턴(Function Invocation Pattern) 메소드 호출 패턴(Method Invocation Pattern) 생성자 호출 패턴(Constructor Invocation Pattern) 생성자 함수 동작 방식 객체 리터럴 방식과 생성자 함수 방식의 차이 생성자 함수에 new 연산자를 붙이지 않고 호출할 경우 apply 호출 패턴(Apply Invocation Pattern) 프로그래머 소양 진짜 실력은 버그가 발생했을 때 문제를 해결하는 능력 자기가 짠 코드의 작동 원리를 모르면 절대 해결할 수 없음 JavaScript built-in은 기본이고 Deepdive도 지속적 공부 필요. 느낀 점 this 부분이 특히 어려워서 복습이 필수인 것 같다. prototype 부분은 처음엔 어려웠는데 한번 이해가 되니 기억도 잘나고 효과도 직접 설명할 수 있을 것 같다. this도 이럴 수 있도록 복습하자. 추석 연휴동안 그동안 챙기지 못했던 부분과 정리하지 못했던 부분을 챙기고, 전체적인 복습을 하자. 개발은 노력을 배신하지 않는 분야인 것 같다. 주말동안 할 일 반복문 함수 마무리 후 제출 주말, 추석 과제 및 복습 poiemweb 인쇄 알아보기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170928-TIL","slug":"170928-TIL","date":"2017-09-28T01:18:19.000Z","updated":"2017-10-02T02:25:08.643Z","comments":true,"path":"2017/09/28/170928-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/28/170928-TIL/","excerpt":"","text":"오늘 한 일 Activity CLI 명령어 채용정보 중요한 건 이론과 기본지식 =&gt; 왜 이렇게 쓰는가? AWS, Git &amp; Github, HTTP, RESTful AP 아니 적어도 풀네임 정도라도 알자. 언어 / 환경 / 구조(앵귤러?리엑트? 뭘 써봤으며 왜 그걸 썼니?) / Webpack, Grunt, Gulp, Browserify 도구 경험 협업능력: 나의 요구사항, 상대의 요구사항을 잘 이해하고 반영할 수 있는가? 문서 작성, 주석 등… 개발자에게 질문하는 법 국문 영문 JavaScript 객체(Object) 객체란? 객체 생성 방법 객체 리터럴 Objcet() 생성자 함수 생성자 함수 객체 프로퍼티 접근 pass-by-reference pass-by-value 객체의 분류 함수 (Function) 함수 정의 함수 생성 방법 (중요) 함수 선언식 함수 표현식 Function() 생성자 함수 함수 호이스팅 First-class object(일급객체) 매개변수(parameter, 인자) 반환값 함수 객체의 프로퍼티 함수의 다양한 형태 Prototype 맛보기 반복문 예제 13문 * 역-정삼각형 만들기 예제 12번, 13번을 함수화하기 예습 Prototype Scope this 느낀 점 개발자로의 취업에 있어서 가장 중요한 건 코딩테스트와 면접. 이를 위해서 이론 공부가 필수적이다. 예전에는 ‘그냥 만들면 되는거 아냐?’, ‘포트폴리오 잘 만들면 그게 곧 실력이지’ 라고 생각했는데 현실은 전혀 달랐던 것 같다. 생각하면 할수록 컴공 부전공을 하지 않은게 후회된다. 하지만 지금이라도 열심히 해야지. Prototype 부분이 이해가 안가서 팀원 선화님과 계속 서로 설명해가면서 이해하려 노력했고, 최종적으로 선생님의 설명을 들었을때 서로의 대화가 유익했다는 것을 깨달았다. 개발자들끼리 소통하고 정보를 공유하는 것이 실력향상과 개념이해에도 좋은 영향을 끼치는 것 같다. 별로 역-정삼각형을 만다는 것은 이미 지난 수요일(27일)에 완성했으나 이것을 함수화하는 것은 또 차원이 다른 문제였다. 아예 생성원리를 다시 고민해서 새로 코딩을 해야 한다. 스쿨 멤버들과 치킨을 먹었다. 선생님과 조교님도 함께 먹었는데 정작 이걸 주도한 매니저님은 못 오셔서 아쉬웠다. 지금은 JavaScript를 하는데도 시간이 모자란다. Vue.js나 마크업css는 주말로 옮기고, 오히려 여유가 조금 생기면 알고리즘 문제를 하루에 하나씩이라도 풀어봐야겠다. 내일 할 일 * 역-정삼각형 만들기 함수화 풀이 예습하고 복습 및 정리 과제 주말과 추석 계획 세우기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170927-TIL","slug":"170927-TIL","date":"2017-09-27T10:08:12.000Z","updated":"2017-09-27T18:18:04.010Z","comments":true,"path":"2017/09/27/170927-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/27/170927-TIL/","excerpt":"","text":"오늘 한 일 커맨드 라인 연습 장고걸스 튜토리얼: 커맨드라인 시작하기 whoami 사용자 이름 출력 rm -r [폴더명] 폴더(디렉토리) 삭제 cp 파일 복사 mv 파일 이동 명령어 모음 https://ss64.com JavaScript 반복문 활용 문제 13개 풀이 및 발표 7~10과 예습 Object Immutability Function-level Prototye 4~6과 복습 느낀 점 같은 학생들끼리 알고리즘을 푸는 시간이 무척 즐거웠다. 따로 알고리즘 스터디를 하고 싶을 정도이다. 물론 때마침 토요일 스터디를 모집하는 글이 뜨긴 했는데, 토요일에 시간이 날지 모르겠어서 일단은 유보중… 스쿨 내에서 자바스크립트에 집중하는 알고리즘 스터디를 해보는 것도 좋겠다. 첫 self-study 시간과 미션 시간을 보냈는데, 굉장히 만족스러웠다. 같은 학생들끼리 점심도 먹고 커피도 마시면서 간단한 네트워킹 시간을 가질 수 있었다. 도시락을 먹는 것도 좋은데 종종 이런 시간도 가질 필요가 있겠다. 마침 내일은 치킨을 먹는다고 하니 더 친해지고 많은 정보를 공유하고 싶다. 맥북을 high sierra로 업데이트 했다. git관련 명령어가 잘 먹지 않아서 검색해보니 Xcode Command Line Tools 의존성 이슈가 발생하는 경우라고 한다. 예전에 OS X El Capitan에서 macOS Sierra 업데이트할 때도 이런 일이 있었다던데 매 업데이트마다 신경써줘야 하는 것 같다. (http://redutan.github.io/2015/10/05/osx-after-update-git-error) 내일 할 일 반복문 활용 알고리즘 문제 13개 풀이 복습과 예습","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"JavaScript 04. 자료형과 변수(Data type & Variable)","slug":"JavaScript-04-Data_type&Variable","date":"2017-09-26T10:32:37.000Z","updated":"2017-10-02T02:41:03.673Z","comments":true,"path":"2017/09/26/JavaScript-04-Data_type&Variable/","link":"","permalink":"http://girin-dev.github.io/2017/09/26/JavaScript-04-Data_type&Variable/","excerpt":"","text":"JavaScript 04. 자료형과 변수(Data type &amp; Variable) 프로그래밍이란변수를 통해 값을 저장, 참조하고연산자로 값을 연산, 평가하고조건문과 반복문에 의한 흐름제어로 데이터 흐름을 제어하고함수로 재사용이 가능한 구문의 집합을 만들며객체, 배열 등으로 자료를 구조화하는 것 변수 변수에 값을 할당한다는 것은 OS가 값을 저장하기 위해 메모리 공간을 확보하는 것을 말한다. JavaScript의 경우 undefined라는 변수값을 통해 확보하는데 이를 초기화라고 한다. 결국 변수라는 것은 값이 할당된 메모리의 주소(Memory address)에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 이름표(식별자, identifier). 실제 위치틑 0x00…. 식의 16진수 숫자로 나타난다. 변수값 할당과 재할당 할당 : undefined로 할당되어 있던 메모리 위치를 다른 위치에 할당한 변수값의 위치로 가르키게 함 (참조). 이때 undefined는 바로 사라지지 않고 적절한 때에 삭제됨(가비지 콜렉션 재할당 : 기존에 할당된 값을 바꾸는 것이 아니라 다른 위치에 값을 입력하고 그 위치로 재할당하는 것(참조를 바꿈) 변경불가한 값에 해당(immutable value) 자료형은 이러한 변수를 할당할 때, 값의 종류에 따라 확보해야할 메모리 크기가 다르기 때문에 나타나는 분류이다. 기본자료형 (Primitive Data Type) 변경 불가능한 값(immutable value) pass-by-value값은 값으로 복사되어 전달되지, 변경되지 않는다. booleantrue/false 두 가지 값을 가질 수 있고null, undefined, 숫자 0은 false로 간주된다. null오직 null 값만을 갖는다. null 값은 참조정보를 제거한다, 변수값이 할당되어 있는 메모리 주소를 제거한다 정도의 의미. 참조가 없어진 메모리 영역은 마찬가지로 가비지 콜렉션 수행. undefined값이 할당되지 않은 변수가 가진 값. 선언되었으나 할당이 되지 않았을 경우. NumberJavaScript는 오로지 하나의 숫자 자료형만 존재.+/- Infinity, NaN을 포함 String문자열 타입으로 텍스트 데이터 사용.유사배열 로서 인덱스를 통해 접근가능하나 변경할 수 없고 오직 read만 가능하다. SymbolES6에 새롭게 추가된 자료형으로 애플리케이션 전체에서 유일하며 변경 불가능한(immutable) 기본 자료형(primitive)이다. 주로 객체의 프로퍼티 키(property key)로 사용한다. 객체형 (Object type, 참조형) 객체는 데이터와 그 데이터에 관련되는 동작(절차,방법,기능)을 모두 포함할 수 있는 개념적 존재. 프로퍼티(property, 이름과 값을 갖는 데이터)와 메소드(method, 동작을 의미)를 포함하는 독립적 주체 pass-by-reference 변수 변수명 명명규칙 목적과 기능에 맞고 알아보기 쉽게 짓기 대소문자 구분 가능 주의 첫글자는 영문자(특수문자 제외), underscore ( _ ), 또는 달러 기호($)만 가능 변수의 중복 선언 사용 가능하다 비추. 변수 선언시 var 생략 허용 사용가능하지만 의도치 않게 변수를 전역화할 수 있음. 비추. 동적 타이핑 (Dynamic Typing) 변수의 타입설정이 필요없이 할당되는 과정에서 자동으로 자료형이 결정되는 구조. 변수 호이스팅(Variable Hoisting) 변수 선언의 3단계 선언 단계 (VO(variable object)에서 이루어짐) 초기화 단계 할당 단계 선언단계와 초기화단계는 한번에 이루어짐. 이 단계는 한줄한줄 읽어가면서 var을 만날 때 하는것이 아니라 자바스크립트 전체 문서를 쫙 읽은 다음에 변수 선언문을 싹 뽑아서 이 단계를 실행한 뒤 한줄한줄 읽어나간다. 이것이 변수 호이스팅. 변수 선언문의 위치가 별로 중요하지 않으나 가급적 변수 이용문(?) 보다 위에, 그리고 문서 맨 위에 위치시키는 것이 좋다. 이것은 ESLint의 규칙이기도 하다. var 키워드로 선언된 변수의 문제점 Function-level scope, var 생략 허용, 중복 선언 허용, 변수 호이스팅 등 JavaScript의 특징이 전역 변수의 남발, 의도치 않은 변수값 변경 등의 문제를 발생시킴. 복잡성, 성능이슈, 상호의존성 등 여러 면에서 변수의 범위는 좁을수록 좋다. 전역변수는 남발하지 말 것.","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://girin-dev.github.io/tags/JavaScript/"}]},{"title":"170926-TIL","slug":"170926-TIL","date":"2017-09-26T09:27:47.000Z","updated":"2017-10-29T06:15:46.777Z","comments":true,"path":"2017/09/26/170926-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/26/170926-TIL/","excerpt":"","text":"오늘 한 일 Activity 터미널 명령어 학습. 현재 디렉토리.. 상위(부모) 디렉토리../.. 상위(부모)의 상위 디렉토리~ (물결 tilde) 루트 디렉토리pwd (present working directory) 현재 디렉토리 표시[명령어] --help 명령어의 도움말 정보 표시cat [파일명] 해당 파일 보기cat [파일1] &gt; [파일2] 파일 1의 내용을 그대로 복사하여 파일2 만들기man [명령어] 해당 명령어의 메뉴얼 보기(–help와 비슷) JavaScript 자료형과 변수 (Data type &amp; Variable) 기본자료형 (Primitive Data Type) 객체형 (Object type, 참조형) 변수 연산자(Operator) 산술 연산자 (Arithmetic Operators) 대입 연산자 (Assignment Operators) 비교 연산자 (Comparison Operators) 논리 연산자 (Logical Operators) 단축 평가 (Short-Circuit Evaluation) 타입 연산자 (Type Operators) !! 제어문(Control Flow) 블록 구문 (Block statement) 조건문 (Conditional statement) 반복문 (Loop) 평가(Evaluating)] 유용한 플러그인 auto rename Beautify bookmark code runner (ctrl+alt+n) 느낀 점내일 할 일","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170925-TIL","slug":"170925-TIL","date":"2017-09-25T08:08:10.000Z","updated":"2017-09-26T01:31:52.000Z","comments":true,"path":"2017/09/25/170925-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/25/170925-TIL/","excerpt":"","text":"오늘 한 일 Scrum JavaScript Coding! 프로그래밍 언어: 0과 1과 연산 이 세 가지로 모든 것을 해내는 컴퓨터 Introduction! 자바스크립트의 개요와 역사 EMCAScript6 Syntax Basics HTML에서 JavaScript 실행하기 브라우저 동작원리 &lt;script&gt;의 위치 중요성 &lt;script async src=&quot;&quot;&gt;, &lt;script defer src=&quot;&quot;의 기능과 차이(ie9이하 지원x) 구문, 표현식, 변수, 값, 연산자, 키워드, 주석 ESlint 설치 JavaScript 코드 점검을 해주는 플러그인 ESLint 공식 사이트 https://eslint.org/ ESLint 설치법 http://poiemaweb.com/eslint 예습 Data type &amp; Variable 가비지 콜렉션 호이스팅 Operator Control Flow 느낀 점 무엇보다 중요한 것은 기초 포트폴리오보다는 코딩실력과 입사시험 대비 자바스크립트로 크로스플랫폼 앱제작이 가능하다는게 놀랍다. 일렉트론, 아이오닉 기회가 되면 공부해보고 싶다. 일렉트론은 인플런에도 관련 강좌가 있다. 예습, 복습을 철저히 하자. 입시공부하듯! 내일 할 일 예습 &amp; 복습 코딩퀴즈 풀어보기(1문제) Vue.js 30분","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170923~170924-TIL","slug":"170923-170924-TIL","date":"2017-09-23T04:21:23.000Z","updated":"2017-10-01T06:44:31.547Z","comments":true,"path":"2017/09/23/170923-170924-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/23/170923-170924-TIL/","excerpt":"","text":"오늘 한 일 주말에 끝내는 챗봇 참석 챗봇에 대한 간략한 정보와 챗봇을 개발, 배포할 수 있는 Azure Bot Framework 소개 챗봇을 사용하는 스타트업들 날씨 알림형: 판초(pancho) 개인별 추천형: H&amp;M, Skyscanner, 카약 공공기관형, GS Shop 등 홈쇼핑, 조이의 채널서비스 챗봇의 형식 사용자 인풋을 받아 스크립트 처리 후 echo (분노 챗봇 새새) 자연어 처리를 통해 사용자 의도(intent) 파악 후 대답 (Jill Watson 수업 조교 봇) 단순한 Q&amp;A (쇼핑몰과 카페 등 소규모 사업장) 좋은 봇의 기준 최소한의 단계로 사용자의 문제를 해결하는가? 대체 경험보다 더 낫고 빠르고 쉽게 사용자의 문제를 해결하는가? (트리구조는 안 좋은 예시) 사용자가 자연스럽게 그 봇을 사용할 때 무엇을 해야하는지 알고 있는가? (봇이 사전에 알려주는 방법이 있음) Azure Bot Framework 웹 소스를 제공하여 타 웹사이트에 &lt;iframe&gt;을 이용해 부착 가능 서버 구축은 C#이나 Node.js를 통해 지원 LUIS Language Understanding Intelligent Service MS에서 만든 자연어 처리 API 참고 사이트 챗봇 개발의 이해 http://jincrom.tistory.com/61 챗봇 개발의 생태계 https://brunch.co.kr/@pilsogood/2 Vue.js 상-하위 컴포넌트 간 데이터 전달 방법(Parent-Child 컴포넌트 통신) Props Event Bus Component - Props - For HTML&amp;CSS 복습 느낀 점 주말에 끝내는 챗봇 챗봇이라는 세계를 처음 만났다. 의외로 많은 사람들이 사용하고 있는 서비스였고 최근 인공지능의 등장과 함께 시너지효과도 일으킬 수 있는 유망있는 세계인 것 같다. 신세계를 만난 기분이었다. 특히 고인을 그대로 챗봇으로 만들어 소통한다는 걸 본 것은 무척 기이한 경험었다. 그러나 컨퍼런스 자체는 주제와 타겟이 불명확했다. 챗봇에 대한 설명인지, 개발하는 방법을 알려주는건지, 아니면 그냥 Azure를 홍보하는건지 알 수 없었다. 또 청자가 개발자면 개발자, 사업자면 사업자, 학생이면 학생이어야 할텐데 모든 사람들이 짬뽕되어 특히 구체적인 깊은 개발 이야기가 나올때 아마 많은 사람들이 이해하지 못했을 것 같다. 2차 컨퍼런스는 실제 개발을 할 거라고 하는데.. 갈지 말지 고민된다. 사실 혼자 공부해서 개발할 수도 있을 것 같은데.. 딱히 Azure Bot Framework가 메리트 있는지도 모르겠고… 내일 할 일 패캠강의 복습 및 정리 왓챠와 디에디트 진행 Vue.js 강의","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170922-TIL","slug":"170922-TIL","date":"2017-09-22T09:16:51.000Z","updated":"2017-09-26T09:30:11.000Z","comments":true,"path":"2017/09/22/170922-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/22/170922-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus Activity HTML &amp; CSS position: sitcky (ie11 미지원, 여러 브라우저 부분적 지원) polyfil우회적으로 적용하는 방법이라는 뜻. 보통 스크립트를 활용. transform: rotate([0~360]deg); 요소 회전시키기1234567.div &#123; /*(+)시계방향, (-)반시계방향*/ /*시계방향 90도 회전*/ transform: rotate(90deg); /* 회전기준점을 좌측 하단으로 설정 */ transform-origin: bottom left;&#125; 반응형 웹디자인 예제 완성 HTML &amp; CSS 수업 종료 느낀 점 HTML &amp; CSS 수업 종료 김데레사님의 2주동안의 강의는 정말 만족스러웠다. 실습시간이 부족했던 것이 조금 걸리지만 코스의 특성상 어쩔 수 없는 측면도 있었을 것 같다. 배운 것을 바탕으로 HTML과 CSS는 스스로 공부하는 수 밖에 없다. 줄어든 HTML&amp;CSS만큼 JavaScript가 늘었으니 더 열심히 해야겠다. HTML&amp;CSS도 매일 꾸준히 복습, 공부 해야지 주말동안 할 일 패캠강의 복습 및 정리 이전 과제 분석 Vue.js 강의","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170921-TIL","slug":"170921-TIL","date":"2017-09-21T09:36:18.000Z","updated":"2017-09-22T00:42:43.000Z","comments":true,"path":"2017/09/21/170921-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/21/170921-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus Activity 자습: 일과계획 정리, 블로그 SEO 정보 검색 HTML &amp; CSS &lt;video&gt; 태그 레퍼런스 문서1234&lt;video class=\"responsive\" controls poster=\"media/poster.jpg\" preload=\"none\" width=\"800\" height=\"448\"&gt; &lt;source src=\"media/google-developer-stories.webm\" type=\"video/webm; codecs=&amp;quot;vp8, vorbis&amp;quot;\"&gt; &lt;track src=\"media/video-subtitles-en.vtt\" kind=\"captions\" srclang=\"en\" label=\"English captions\" default=\"\"&gt;&lt;/video&gt; CSS 문서 작성시 우선적으로 해줘야 할 것 123/* 인코딩 설정과 css 문서에서 사용할 외부 요소 import(폰트, user agent style 무력화 등) */@charset \"utf-8\"@import url(\"./normalize.css\") transform: translateX(-50%): 자신의 박스에서 x축으로 50% 안쪽(중간)을 기준으로 삼는다. 반응형 웹 디자인(모바일, 유동적) 반응형을 정답이 아니라 여러 방법 중 하나. 대규모 프로젝트의 경우 모바일/데스크탑 웹사이트를 따로 만드는게 더 좋을 수 있음(유지보수와 성능이슈) Mostlyfluid, Offcanvas 등 다양한 레이아웃 구성 참고 미디어쿼리 @media only all and (조건문) {실행문} 화면크기, 기기스크린, 가로세로모드 등 다양한 기준으로 분기 설정 가능(보통 min-width, max-width) CSS3 미디어쿼리 이해 - naradesign background css를 통해 이미지를 배경처리하여 집어넣는 방법 (때때로 이미지 배경이나 장식을 마크업으로 처리하는게 유리할 떄도 있다. 이때 alt=&quot;&quot;로 주는 걸 잊지 말자.) 반응형 디자인에서는 박스 사이즈에 따라 이미지의 크기도 변동되어야 한다. contain과 cover1234.div &#123;background: orange url(\"images/logo.png\") no-repeat 0 0/[100% 100% / cover / contain 중 택1];&#125;/* cover는 가로 기준으로 채우기, contain은 세로 기준으로 채우기 */ Golden Grid System 2, 4, 6, 8, 12, 24 column으로 나누는 grid 시스템 한 css 문서 내에서 분기하는 내부분기와 css 파일을 분리하여 분기하는 외부분기. 외부분기는 복수의 css파일을 다 불러온다는 점 때문에 성능과 속도가 저하되어 내부분기를 선호. 그러나 대규모 프로젝트에서는 유지보수 관리 등의 이유로 외부분기를 쓰기도 한다. 그러나 사실 그 정도의 대규모 프로젝트라면 애초에 유동형 웹디자인을 하기 보다 모바일용과 데스크탑용 웹을 따로 만든다. RWD와 AWD RWD: Responsible Web Design. 미디어쿼리를 활용해 화면이나 기기스크린의 크기 등을 이용해 화면 분기, 대개 모바일~테블릿~데스크탑 등 유동적으로 나타남. AWD: Adaptive Web Design. 서버 등에서 접속환경, 기기 등을 파악하여 이를 통해 화면 분기. 보통 모바일 / 데스크탑 등으로 구분되어 나타남. 반응형 이미지 이슈와 해결방안 이슈 성능/속도 및 대역폭 고해상도 디스플레이 등장 아트 디렉션 처리 다양한 이미지 포맷 대응 해결방안 srcset과 src 속성 활용 &lt;picture&gt;태그 활용(ie11 미지원) @media only screen and (min-device-pixel-ratio:2) 느낀 점 오픈소스 기여 처음으로 기술 레퍼런스 오픈소스에 기여해봤다. MDN web docs의 &lt;video&gt; 태그 레퍼런스에 번역 중 실수로 지워지지 않은 영문을 삭제했고, 몇몇 부분을 원문 어감에 맞게 수정했다. 별 건 아니지만 반영되면 좋겠다. 기술적 기여를 하고 싶다. 비록 내가 짠 코드는 아니었지만, CSS를 꾸미기 전에 마크업 구조파악을 하고 시작하는 습관을 들이자. React의 라이센스와 관련한 영상을 한 편 보았다. 요지는 비록 페북이 저작권 소송을 하는 것은 맞지만 저작권 문제에 대해 걱정할 필요가 없다는 것이다. 우선 대개의 개발자들이 속한 회사가 페북과 소송전을 벌일 정도로 거대한 회사가 아니고, 만약 그 정도로 거대한 회사라면 기술력이 받쳐줄테니 그때 React를 다른 기술로 바꾸면 된다는 것이다. 따라서 그냥 열심히 공부하면 된다고 한다. 맞는 말인 것 같다. 그러나 여러 글이나 사람들의 말을 보면 프레임워크, 라이브러리 간에 경쟁이 정말 있는 것 같다는 생각은 든다. 내가 공부할 Angular2나 React, Vue.js 등 다양한 기술들을 옹호하거나 비판하는 사람들은 지천에 널렸다. 어느 기술이나 쉽게 터득할 수 있는 개발자가 되어야겠다. iOS11과 watchOS4로 업데이트했다. 왠만하면 최신 OS는 바로바로 업데이트하려고 노력한다. 여러가지 흥미로운 점이 많았는데 우선 접근성을 중시하는 웹의 정신처럼 장애인과 여성 등 다양한 계층의 사람들을 고려한 디자인이 흥미로웠다. 애플이 늘 잘하던 분야였고 이번에도 역시 기대를 저버리지 않았다. 역시 디자이너는 “디자인”을 하는 사람이지 “아트”를 하는 사람은 아니니까. 내일 할 일 강의 복습과 정리 Vue.js 다른 웹서비스 메인페이지 따라 만들어보기 시험 복습","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170920-TIL","slug":"170920-TIL","date":"2017-09-20T08:18:54.000Z","updated":"2017-09-21T00:34:41.000Z","comments":true,"path":"2017/09/20/170920-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/20/170920-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus Activity 자습: 일과계획 정리 HTML &amp; CSS &lt;footer&gt;는 제목(헤딩태그 &lt;h1&gt;..&lt;h6&gt;)을 갖지 않는다. &lt;address&gt; footer 안에서 사용하며 주소, 연락처 등의 정보를 기입할 때 쓰며, 종종 저작권 정보를 함께 넣어주기도 한다. 인용구 HTML과 CSS &lt;q&gt; 인용구에 쓰는 HTML5 태그 1234567891011&lt;p class=\"slogan-content\"&gt; &lt;!-- q태그의 cite 속성값으로 출처를 기입한다. --&gt; &lt;q cite=\"http://w3.org/WAI/\"&gt; The power of the Web is in its universality, Access by everyone regardless of disability is an essential aspect. &lt;/q&gt; Tim Berners - Lee , W3C Director and inventor of the World Wide Web&lt;/p&gt;&lt;!-- article 내부의 footer로 출처를 기재하여 스크립트화해서 이용할 수 있다.(공유하거나 퍼가거나 등등) --&gt;&lt;footer class=\"readable-hidden\"&gt;출처 : WAI - http://w3.org/WAI/&lt;/footer&gt; &lt;q&gt;태그를 쓰게 되면 자동으로 인용구 앞뒤로 &quot;가 붙게 되는데 CSS 속성 quote:&quot;[인용구 앞에 들어갈 문구]&quot; &quot;[인용구 뒤에 들어갈 문구]&quot; 를 통해 수정 가능 CSS의 구체성 이슈 세부 속성값을 정하는 속성의 경우엔 아래 재정의했다고 하더라도 해당 세부 속상만이 변경될 뿐 본 속성 자체가 무시되지 않는다.12345678.div &#123; background: #ccc linear-gradient(to bottom, #eee, #ccc);&#125;.div &#123; background-color: pink;&#125;/* 코드는 위에서 아래로 읽어나기 때문에 항상 뒤에 적힌 코드를 적용하기 때문에, 이 경우 앞의 .background가 .background-color에 의해 무시된다고 생각하기 쉽다. *//* 따라서 본 코드는 backgrond의 color 속성을 pink로 바꿔준 것일 뿐이고 linear-gradient는 그대로 남아 적용된다.(전자의 background의 color 속성값은 그라디언트를 지원하지 않는 환경일 때 나타나는 배경색을 의미.) */ font 속성 정리 12345678910111213.div &#123; font-weight: bold; font-style: italic; /* 대문자 자체는 유지하되 크기를 소문자 크기로 줄여주는 기능 */ font-variant: small-caps; font-size: 16px; line-height: 1.5; font-family: \"Noto Sans Bold\"; /* 속기법 순서유의 */ /* font: weight | style | variant | size / height | font-family */ font: bold italic small-caps 16px / 1.5 \"Noto Sans Bold\";&#125; transition 속성 정리 @keyframe보다 훨씬 쉽게 애니메이션 효과를 줄 수 있는 속성1234567891011121314.div &#123; /* 적용할 속성명 */ transition-property: all; /* 지속 시간 */ transition-duration: 0s; /* 애니메이션 동작 효과 */ transition-timing-function: ease; /* 효과 지연 시간 */ transition-delay: 0s; /* 속기법 */ /* transition: property name | duration | timing function | delay */ transition: margin-left 4s ease-in-out 1s;&#125; ol의 li 숫자 커스터마이징 방식: li 숫자를 직접 고치고 커스텀하는 방법은 없다. list-style-type: none : 스크립트 리더가 읽어주지 못해 접근성이 떨어지는 방식 overflow: hidden 활용 : 추천 방식, 숫자 입력시 counter-increment 속성 활용 수직 가운데 배열하기 transform 속성 활용 느낀 점 @keyframe으로 하면 코드도 길고 복잡해지는데 transition으로 하니까 매우 간단하게 구현할 수 있다. 회전이나 여러 다른 속성도 있다고 하니 꼭 챙겨봐야겠다. 편하지만 복잡한 애니메이션은 역시 @keyframe이나 JavaScript에서 구현 가능할 것 같다. 언뜻 보기에는 background-color가 더 복잡해보이지만 그저 background의 세부 속성 중 하나일 뿐… 할 일을 써놓고 실천을 하지 못하는 날이 잦다. 목표를 줄이든지, 실천을 늘리든지 하나만 하자 내일 할 일 강의 복습과 정리 이전 과제들 정리 grid 복습 정리하고 적용해보기 Vue.js 다른 웹서비스 메인페이지 따라 만들어보기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170919-TIL","slug":"170919-TIL","date":"2017-09-19T13:41:23.000Z","updated":"2017-09-20T13:09:49.000Z","comments":true,"path":"2017/09/19/170919-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/19/170919-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus Activity 9월 15일 과제 해설(음수마진, 9개의 정사각형 배치) HTML &amp; CSS IR기법(Image Replacement) overflow:hidden과 box-sizing: border-box 활용 &lt;span&gt; 활용 sprite 기법: 이미지와 background-position 활용 참고 Web standard Darum http://ui.daum.net/convention/css/css_ir NULI http://nuli.navercorp.com/sharing/blog/post/1132804 유니버설 디자인을 위한 실전 UI(HTML/CSS)개발 가이드 http://naradesign.net/open_content/lecture/wp/#section20 폰트 단위 em / rem / px / % line-height font awesome WAI-ARIA Web Accessibility Initiative Accessible Rich Internet Applications 웹 접근성 규칙 ARIA 역할과 HTML5 요소를 중복하지 않는다. 12345&lt;!-- 올바른 경우 --&gt;&lt;nav&gt;&lt;/nav&gt;&lt;div role=\"navigation\"&gt;&lt;/div&gt;&lt;!-- 올바르지 않은 경우 --&gt;&lt;nav role=\"navigation\"&gt;&lt;/nav&gt; 요소 기능의 변경은 제한된다. 12&lt;!-- h1의 기능은 heading이지 button이 아니다. --&gt;&lt;h1 role=\"button\"&gt;&lt;/h1&gt; 키보드 사용 보장해야 한다. 1&lt;div tabindex=\"0\"&gt;&lt;/div&gt; 적절한 레이블을 제공해야 한다. 참고자료 WCAG 가이드라인 : http://www.w3c.or.kr/Translation/WCAG20/ 한국형 웹컨텐츠 접근성지침 : http://wah.or.kr 적용사례연집 : http://wah.or.kr/board/boardView.asp?page=1&amp;brd_sn=5&amp;brd_idx=1019 개요 및 인증심사 방안 : https://github.com/seulbinim/aria 웹서비스 메인페이지 따라 만들기 watcha today-boxoffice-list 마크업 느낀 점 WAI-ARIA를 공부하며 접근성이라는 웹의 정신을 다시금 떠올렸다. 디자이너는 서비스와 상품을 적절히 디자인하는 것이지 예술을 하는게 아니라는 점이 인상적이었다. ir기법 중 sprite에 대해 확실히 공부했다. 다른 방법도 더 찾아봐야겠다. title 속성에 대한 국내 표준과 해외 표준이 다른건가? 데레사님께 여쭤봐야겠다. 마크업이 정말 어렵다. 모호한 기능이나 어떤 태그로 처리해야 할지 모를때가 많다. 그냥 모르겠으면 div로 처리하고 있는데 이게 맞는지 모르겠다. span을 써야할지 p를 써야할지 div를 써야할지 헷갈릴때도 많고 무엇보다 시멘틱 마크업 태그를 전부 알지 못하는 게 큰 것 같다. 의외로 카페에서 공부가 잘 된다. 내일 할 일 강의 복습과 정리 이전 과제들 정리 grid 복습 정리하고 적용해보기 Vue.js 다른 웹서비스 메인페이지 따라 만들어보기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170918-TIL","slug":"170918-TIL","date":"2017-09-18T08:35:47.000Z","updated":"2017-09-19T01:01:02.000Z","comments":true,"path":"2017/09/18/170918-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/18/170918-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus Activity HTML &amp; CSS group2의 notice, pds, news 제작 &lt;time&gt; 시간을 나타내는 HTML 태그 1&lt;time datatime=\"2017-09-18T17:35:47\"&gt;2017.09.18&lt;/time&gt; &lt;figure&gt; 설명을 나타내는 HTML 태그 1234&lt;figure class=\"[클래스명]\"&gt; &lt;img src=\"[이미지 주소]\" alt=\"[대체 텍스트]\"&gt; &lt;figcaption&gt;설명&lt;/figcaption&gt;&lt;/figure&gt; inline요소와 block요소(참고) 1234567&lt;a href=\"#\"&gt; &lt;div&gt;inline 요소인 a태그 안에 block요소인 div를 넣으면 문법오류&lt;/div&gt;&lt;/a&gt;&lt;a href=\"#\" style=\"display: inline-block;\"&gt; &lt;div&gt;a태그의 display 속성값을 block이나 inline-block으로 바꾸면 가능하나 권장하지 않음.&lt;/div&gt;&lt;/a&gt; text-overflow 일반적으로 같이 쓰이는 CSS 코드 123456white-space: nowrap;/* 줄바꿈 차단: inline요소가 블록을 넘어가도 줄바꿈을 하지 않음*/overflow: hidden;/* 블록을 넘어간 요소를 invisible 처리함 */text-overflow: ellipsis;/* overflow:hidden;을 통해 invisible 처리된 내용을 말줄임으로 바꿈 */ on( ) method 멀티 이벤트를 가능하게 하는 jquery method 1234567891011tab.click(function() &#123; $(this).parent().addClass('board-active').siblings().removeClass('board-active');&#125;);tab.focusin(function() &#123; $(this).parent().addClass('board-active').siblings().removeClass('board-active');&#125;);// 위 두 코드를 아래처럼 하나로 표현 가능tab.on('click focusin', function() &#123; $(this).parent().addClass('board-active').siblings().removeClass('board-active');&#125;) 기타 jquery의 css속성은 가급적 쓰지 말 것. (CSS)클릭 속성 부여 cursor: pointer; Hiring이나 프로젝트에서 모듈화는 중요. Grid 학습 gridgarden 클리어 과제 group2의 notice, pds 복습 Github Vue.js 상-하위 컴포넌트 간 데이터 전달 방법 props 느낀 점 여전히 시멘틱 마크업이 부족하다. 꼭 빼먹는 태그 한 두개씩 있거나 논리적인 구조를 짜는데 어려움을 겪는다. 오늘 한 일에 코드를 많이 넣어봤는데 이 방법이 더 나은 것 같다. jquery가 조금 손에 익는 듯 하다. HTML과 CSS는 배울수록 느끼는 것이지만 세부적인 규칙이 많고, 구현 방법이 정말 다양하다. 이건 프론트엔드를 어렵게 만들기도 하고 더 매력적으로 만들기도 하는 것 같다. 내일 할 일 강의 복습과 정리 이전 과제들 정리 gird 복습 정리하고 적용해보기 Vue.js 다른 웹서비스 메인페이지 따라 만들어보기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170916~170917-TIL","slug":"170916-170917-TIL","date":"2017-09-17T08:03:22.000Z","updated":"2017-09-17T16:54:14.000Z","comments":true,"path":"2017/09/17/170916-170917-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/17/170916-170917-TIL/","excerpt":"","text":"주말동안 한 일 Fastcampus 과제 음수마진(negative margin) margin-left, margin-top / margin-right, margin-bottom 주제별 정리 Computer Science Web의 역사와 정신 시멘틱 마크업 HTML CSS Jquery 웹서비스 메인페이지 따라 만들기 the-edit : 패캠 이전에 만들던 것 Watchahttps://github.com/girin-dev/practice_others Vue.js 전역, 지역컴포넌트 실습https://github.com/girin-dev/learnVuejs 느낀 점 아래에 있는 4~5번 블록을 올리는 건 알겠는데 이미 최상단에 있는 1번같은 블록을 내리는 법을 모르겠음. Watcha 메인 페이지 만들기를 시작하면서 알게 된 두 가지. Watcha가 시멘틱마크업으로 짜여져 있지 않다. 왜 김데레사님이 시멘틱마크업이 가장 어렵다고 한 것인지 알게 되었다. 주제별 정리해서 하나씩 하나씩 블로그에 올려야지. 다른 스쿨분들의 정리 내용도 참고해야겠다. 블로그 css를 고치고 route를 추가해보려 했으나 ul의 padding값을 조정하는데에 그쳤다. 이것도 막상 하려고 하니 큰 작업이다. MDN 문서 번역 기여를 시도해보았다. 주말에 끝내는 챗봇과 프론트엔드 컨퍼런스 코리아에 참여신청을 했다. 내일 할 일 패캠강의 복습 및 정리 이전 과제 분석 왓챠와 디에디트 진행 Vue.js 강의","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170915-TIL","slug":"170915-TIL","date":"2017-09-15T08:26:42.000Z","updated":"2017-09-17T06:37:23.000Z","comments":true,"path":"2017/09/15/170915-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/15/170915-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus Scrum 1주일간 배운 바를 정리, 공유 HTML &amp; CSS title과 alt의 차이와 활용 예시(약도) margin의 겹침 이슈 용어 정의 태그 1234&lt;dl&gt; &lt;!-- 용어 정의 --&gt; &lt;dt&gt;Coffee&lt;/dt&gt; &lt;!-- 용어 이름 --&gt; &lt;dd&gt;Black hot drink&lt;/dd&gt; &lt;!-- 용어 설명 --&gt;&lt;/dl&gt; Vertical rhythm flex-fieldset과 webkit 기반 브라우저 버그 vertical-align calc() 에서 빼기 연산할 때 띄어쓰기 유의 실습 내용 Vue.js Vue 컴포넌트의 정의와 문법 전역 컴포넌트, 지역 컴포넌트 느낀 점 레이아웃을 짜는데 조금씩 자신감이 붙었다. 아직 자세한 차이까지는 모르지만 주말동안 배운 내용을 정리하고 실습 응용하면서 확실히 해야지. 저번에 배운 구조선택자를 다시 한번 복습해야겠다. nth-child() 이 괄호 안에 1,2,3 말고도 다양한 타입이 들어갈 수 있으니 연습해보자. css 애니메이션 연습하기 글씨의 위아래 배치공간에 대한 연습 주말동안 할 일 주제별 내용 정리 블로그 css 손보고 route 알아보기 오픈소스 기여에 대해 생각해보기 다른 웹서비스 메인페이지 따라 만들어보기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170914-TIL","slug":"170914-TIL","date":"2017-09-14T04:57:42.000Z","updated":"2017-09-15T09:03:29.000Z","comments":true,"path":"2017/09/14/170914-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/14/170914-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus FDS 6기(HTML&amp;CSS) Activity : 자습시간. 어제 못다한 TIL 작성과 계획 작성 HTML &amp; CSS background animation nth-child form의 필수 3요소 form fieldset - form 영역임을 알려주는 그룹 태그 legend - form의 이름을 지정해주는 태그 input input-label 또는 input title=”” 크로스 브라우징에 특히 신경써야 하는 부분 실습 내용 170914 과제 Vue.js 환경설정 Vue 시작, MVVM패턴 인스턴스와 Vue 라이프싸이클 https://github.com/girin-dev/learnVuejs 느낀 점 김데레사님과 나의 차이점 김데레사님은 코딩 전에 디자인 맵(손으로 그린 계획도)을 짜고, 큰 얼개부터 css 작업을 시작함. 다양한 태그 활용. 반면 나는 디자인 맵이고 뭐고 바로 코딩 들어가고, 손대기 쉬운 조그만 것(input의 width 같은 것)부터 css작업을 시작함. 어렵고 잘 몰라도 그냥 디자인 맵 그리는 연습과 큰 그림부터 잡아가는 연습을 하자. MDN 도큐먼트들을 보니 아직 한국어로 번역되지 않은 부분이 많았다. 오픈소스 개발에 참여하고 싶은데 번역부터 시작해도 괜찮을 것 같다. 로그인 요소를 직접 만들며 알아간다는 느낌이 많이 든다. Atom Editor 시작할 때 등장하는 welcome탭을 설정으로 비활성화 시켰다. http://naradesign.net/wp/2016/10/12/2212/ 내일 할 일 Activity 수업 복습 및 정리 과제 12,13일 과제-조교님 답안과 비교 참고 사이트 웹 프론트엔드 개발자, 어떻게 준비해야 할까? - 윤지수(코드스쿼드) 시멘틱 마크업 네이밍 방법론(BEM 등) CSS을 활용한 애니메이션들 - codepen","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170913-TIL","slug":"170913-TIL","date":"2017-09-13T01:04:10.000Z","updated":"2018-01-10T10:08:44.546Z","comments":true,"path":"2017/09/13/170913-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/13/170913-TIL/","excerpt":"","text":"오늘 한 일 Fastcampus FDS 6기(HTML&amp;CSS) Activity : 하노이의 탑 마무리 공통 &amp; 시멘틱 마크업 시멘틱 마크업을 하는 이유 논리적 구조 설계의 방법론 enter와 공백 이슈 변수, 함수 등의 네이밍에서 자신만의 규칙 만들기 HTML &amp; CSS 논리적으로 의미가 있지만 디자인적으로 보이지 말아야 할 요소 처리(invisible things) 버튼 등 클릭요소에 사용자 편의성 높이기 enter와 공백 이슈 position, font, line-height, text-shadow, outline, white-space, inline-block, ::before/::after inline과 부모의 사이즈의 상관관계 icon font의 활용 CSS를 활용한 애니메이션 효과(key-frame)과 크롬의 performance check jquery 맛보기: focusin(), focusout(), hover() 복습 과제 수업내용, 과제 170913 느낀 점 하노이의 탑 조교님께서 엑셀을 이용한 힌트를 알려주셨다. 한 번 시간내서 재도전해봐야겠다. 지하철을 타고 집에 가다가 과제에 대한 해결 방법(jquery)이 번뜩나서 그 자리에서 맥북을 켜서 해결했다. 뭔가 버려지는 시간을 현명하게 활용한 것 같아서 기분이 좋았다. Vue.js 공부를 하지 못했다. 어제 애플 키노트를 보느라 밤을 새서 그런지 피곤해서 그런지 잠들어 버렸다. 다음부턴 빼놓지 말고 하자. md(MarkDown)문서는 Atom Editor로 작성하고 있는데 켤 때마다 자꾸 Welcome탭 같은 쓸데없는게 나온다. 귀찮은데. 빨리 고쳐야지. 기술을 배우러 와서 이론만 공부하는 느낌이다.(가르쳐주는게 그렇다는게 아니라 내 공부가.) 스스로 복습하고 응용하는 연습을 더 많이 해야겠다. 내일 할 일 Activity Fastcampus FDS 수업 + 과제 Vue.js 30분 수업 정리","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"170912_TIL","slug":"170912-TIL","date":"2017-09-12T17:55:07.000Z","updated":"2018-01-30T03:19:10.825Z","comments":true,"path":"2017/09/13/170912-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/13/170912-TIL/","excerpt":"","text":"오늘 한 일 드디어 github.io 블로그를 만들었다. 테마는 그나마 깔끔해보이는 hexo-theme-apollo로 만들었다. 유저네임을 정하고 템플릿 고르는데 가장 많은 시간이 걸렸다. 그런데 Category나 Tag, About이 없어서 새로 만들든가 아니면 테마를 바꿔야 할지도 모르겠다. 썩 맘에 들지는 않는 템플릿… 그래도 이 블로그로 꾸준하게 TIL을 적는게 목표. 그 목표를 잘 지키면 진짜 기술 블로그처럼 만들고 싶다. 초보몽키(LEE HYUNJOO)님의 개발공부로그를 많이 참고했고, 앞으로도 많이 참고할 것이고, 초보몽키님처럼 열심히 공부하고 기록하는게 목적이다. Fastcampus FDS 6기 Activity : 하노이의 탑, 알고리즘 HTML&amp;CSS 레이아웃(flex/grid/float) 세부 마크업과 디자인, CSS 3대 이슈(겹침, 상속, 우선순위-구체성) position 과제 커리어 특강 : 스타트업에 대해 좀 더 알아봐야겠다. Fastcampus가 큰 도움이 되었으면 좋겠다. Inflearn의 Vue.js 수강 계획을 짰다. 장기효(캡틴판교)님의 강의인데 사실 패캠의 캠프 과정 중 하나라는 말에 끌린 듯 신청했다. Vue.js 라는 프레임워크의 기초라서 천천히 들어보면 나중에 도움이 될 듯 싶다. 하루에 30분씩 투자하고 정리하자. 애플의 키노트를 보면서 쓰는 중 애플워치, 애플TV, 아이폰8도 좋지만… 아이폰X가 훨씬 기대된다. One more thing… 느낀 점 하노이의 탑(알고리즘)은 너무 어렵다. 재귀함수가 나중에 많이 쓰인다고 하니 더 걱정이 된다. 더 공부하고 생각해야겠다. 논리적 마크업과 디자인적 배치는 별개라는 점. Flex는 기존의 float과 position을 활용해서 레이아웃을 짤 때보다 훨씬 쉽고 강력한 것 같다. 다만 뭔가 컴퓨터가 알아서 해주거나 상대적인 위치를 짜주는게 많아서 약간 찜찜하다. 어서 한국 개발환경에서도 많이 보급되었으면 좋겠다. 마크다운 작성은 여전히 익숙치 않은데 쓰다보니 은근히 재미있다. 내일 할 일 Activity Fastcampus FDS 수업 + 과제 Vue.js 30분 수업 정리","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]},{"title":"TIL을 시작하다.","slug":"170912-Start-TIL","date":"2017-09-12T17:42:35.000Z","updated":"2018-01-30T16:10:11.551Z","comments":true,"path":"2017/09/13/170912-Start-TIL/","link":"","permalink":"http://girin-dev.github.io/2017/09/13/170912-Start-TIL/","excerpt":"","text":"TIL을 시작하다.오늘 배운 것을 정리한다.처음 개발을 배웠을 때나 Fastcampus의 FDS 과정의 첫 주에 대해서도 적어보려고 한다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://girin-dev.github.io/categories/TIL/"}],"tags":[{"name":"TIL(Today I Learned)","slug":"TIL-Today-I-Learned","permalink":"http://girin-dev.github.io/tags/TIL-Today-I-Learned/"}]}]}