<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>기린개발의 일지</title>
  
  <subtitle>Girin-dev&#39;s development Blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://girin-dev.github.io/"/>
  <updated>2017-10-30T17:08:45.000Z</updated>
  <id>http://girin-dev.github.io/</id>
  
  <author>
    <name>Girin-dev</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>171030-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/30/171030-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/30/171030-TIL/</id>
    <published>2017-10-30T01:24:04.000Z</published>
    <updated>2017-10-30T17:08:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>ES6<ul><li>Promise</li></ul></li><li>Node.js &amp; Express<ul><li>Node.js<ul><li>basics</li><li>모듈화와 npm<ul><li><a href="http://d2.naver.com/helloworld/12864" target="_blank" rel="external">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a></li></ul></li><li>Module loading system</li></ul></li><li>Express<ul><li>Basic(Routing, Middleware, Static file, Template engine)</li></ul></li></ul></li><li>Todo-list2 복기</li><li>알고리즘 퀴즈<ul><li>[미완]nextBigNumber()</li></ul></li><li>맘에 드는 codepen<ul><li><a href="https://codepen.io/tonkec/pen/jWmgqN" target="_blank" rel="external">https://codepen.io/tonkec/pen/jWmgqN</a></li><li><a href="https://codepen.io/2016/popular/pens/" target="_blank" rel="external">2016 인기있는 codepen</a></li></ul></li></ul><h2 id="메모"><a href="#메모" class="headerlink" title="메모"></a>메모</h2><ul><li>HTTP error code 304<ul><li>이미 캐시에 저장이 되어 받아온 데이터의 변경이 없어 캐시에 저장된 데이터를 그대로 불러올 때.</li><li><a href="http://ohgyun.com/175" target="_blank" rel="external">http://ohgyun.com/175</a></li></ul></li><li>좋은 책<ul><li><a href="http://www.aladin.co.kr/shop/common/wseriesitem.aspx?SRID=96627" target="_blank" rel="external">You don’t know JS</a></li></ul></li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>Express<ul><li>Error handling</li></ul></li><li>알고리즘 퀴즈<ul><li>[미완]nextBigNumber()</li><li>[미완]isPair() 괄호 확인하기</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ES6&lt;ul&gt;
&lt;li&gt;Promise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node.js
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171028-171029-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/28/171028-171029-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/28/171028-171029-TIL/</id>
    <published>2017-10-28T13:22:23.000Z</published>
    <updated>2017-10-30T16:49:04.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="주말동안-한-일"><a href="#주말동안-한-일" class="headerlink" title="주말동안 한 일"></a>주말동안 한 일</h2><ul><li><p>알고리즘 퀴즈</p><ul><li>getMinSum() 최솟값 만들기</li><li>isPair() 미완</li></ul></li><li><p>Todo-list 복기</p></li><li><p>JavaScript 집중 체크리스트</p><ul><li><code>Array.prototype.(map, filter, reduce, forEach)</code><ul><li><code>forEach</code>: 각 요소 순회하면서 무언가 함, 원본배열 유지(콜백함수의 세번째 인자로 원본배열 조작가능), 두번째 인자 this 가능</li><li><code>map</code>: 원본배열을 1:1 매핑하는 새로운 배열 생성, 원본배열 유지(콜백함수의 세번째 인자로 원본배열 조작가능), 두번째 인자 this 가능</li><li><code>filter</code>: return값이 true인 값만을 추려 새로운 배열 생성(if문처럼 다양하게 활용가능), 원본배열 유지, 두번째 인자 this 가능</li><li><code>reduce</code>: 이전 콜백의 반환값(이전 순회에서 반환한 값)을 인자로 받아와 이용.(재귀적 특징), 원본배열 유지, </li></ul></li></ul></li><li><p>예습</p><ul><li>ES6-Promise</li><li>Node.js</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;주말동안-한-일&quot;&gt;&lt;a href=&quot;#주말동안-한-일&quot; class=&quot;headerlink&quot; title=&quot;주말동안 한 일&quot;&gt;&lt;/a&gt;주말동안 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;알고리즘 퀴즈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getMinSum() 최솟값 
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171027-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/27/171027-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/27/171027-TIL/</id>
    <published>2017-10-27T08:36:38.000Z</published>
    <updated>2017-10-30T14:22:53.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Network &amp; Database 특강</p><ul><li>Network<ul><li>LAN, WAN, MAN, WLAN</li><li>네트워크 연결 구조 방식: Star, Ring, Bus</li><li>Network OSI 7 layers</li><li>Packet에서 byte와 octet</li><li>HTTP(HyperText Transfer Protocol)의 TCP/UDP</li><li>IP갯수와 인구수의 괴리?(사설IP와 공인IP</li><li>IPv4와 IPv6</li></ul></li><li>Database<ul><li>DB와 DBMS(DataBase Management System)<ul><li>흔히 떠올리는 Oracle, Mysql 등은 DB가 아니라 DBMS</li></ul></li><li>DataBase와 File System(OS의 저장방식)의 차이<ul><li>자기기술성, 어플리케이션 종석성이 DBMS에는 없다. File System에서 1.hwp를 열려면 한글 프로그램이 있어야 한다.</li></ul></li><li>SQL과 NoSQL</li><li>MongoDB &amp; robomongo 설치</li></ul></li></ul></li><li><p>알고리즘 퀴즈</p><ul><li>(미완)isPair() 괄호 확인하기</li></ul></li><li><p>LINE PLUS 동계인턴 채용상담</p><ul><li>이태원 라인프렌즈샵</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li><p>IPv4와 IPv6</p><ul><li>처음에 255.255.255.0처럼 각 자리를 세 자리 수로 끊는 IPv4와 IPv6가 왜 각 자리를 네 자리 수로 끊는지 궁금했다.(FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)서양인들한테는 숫자를 세자리 수로 끊어 읽는게 편할텐데.</li><li>그런데 다시 생각해보니 이 의문이 지극히 인문학적이라는 생각이 들었다. 사실 저 숫자의 자리 수는 십육진수를 몇 개 표현할 것인가에 따른 것으로 인간이 읽는 십진수와는 전혀 다른 것인데, 몇 자리로 끊은들 그것으 무슨 상관이겠느냐는 생각이다.</li></ul></li><li><p>LINE PLUS 동계인턴 채용상담</p><ul><li>수업 1시간을 뺴먹으면서까지 받고 싶었던 상담이었는데 1시간 반을 넘게 기다려도 순서가 안 오길래 결국 받지 못하고 나왔다. 나오면서 채용담당자는 아니지만 행사 책임자로 보이는 직원 분이 간단하게 질의응답을 해주셨다. 하지만 질의응답 공식 루트인 페북 페이지로 구체적 답변을 받아야겠다. </li><li>이해가 가지 않았던 것이 웹 Front-End 직군도 Python이나 C/C++, Java 시험을 통해 뽑는다는 것이다. HTML이나 CSS는 아니더라도 JavaScript로 볼 수 있는 기회는 줘야 하는 것이 아닌가 싶은데… 접수 책임자분이 잘못 알려주신 것이기를 바랄 수 밖에 없을 듯 싶다.</li><li>개발 직군이야 당연히 그렇겠지만 전공지식(컴공)을 많이 물어본다고 한다. 코딩시험 언어 제한도 그렇고… 뭐 당연한거겠지만, 전공과 무관하게 뽑겠다고 했으면서도 왠만하면 전공인 사람이 오길 바라는 것 같았다.</li></ul></li></ul><h2 id="주말동안-할-일"><a href="#주말동안-할-일" class="headerlink" title="주말동안 할 일"></a>주말동안 할 일</h2><ul><li>Todo-list3 까지 마무리</li><li>JavaScript 집중 체크리스트</li><li>예습</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Network &amp;amp; Database 특강&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Networ
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171026-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/26/171026-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/26/171026-TIL/</id>
    <published>2017-10-26T08:41:51.000Z</published>
    <updated>2017-10-30T01:59:36.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>ES6</p><ul><li>Destructuring</li><li>Class</li><li>Module</li></ul></li><li><p>알고리즘 퀴즈</p><ul><li>lv2_sumBetween</li></ul></li><li><p>프로젝트 팀 빌딩</p><ul><li>반려동물팀</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ES6&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Destructuring&lt;/li&gt;
&lt;li&gt;Class
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171025-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/25/171025-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/25/171025-TIL/</id>
    <published>2017-10-25T12:51:32.000Z</published>
    <updated>2017-10-30T14:23:54.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>알고리즘 퀴즈<ul><li>lv2_logestPalindrom</li></ul></li><li>Todo-list2<ul><li>임기완 조교님의 라이브코딩</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;알고리즘 퀴즈&lt;ul&gt;
&lt;li&gt;lv2_logestPalindrom&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171024-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/24/171024-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/24/171024-TIL/</id>
    <published>2017-10-24T02:16:09.000Z</published>
    <updated>2017-10-30T16:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>ES6<ul><li>let, const</li><li>Template Literals</li><li>Arrow function</li><li>Extended Parameter Handling</li><li>Enhanced Object property</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>동욱형과 만났다. 이 형도 프론트엔드 개발을 하고 있고, IT분야에 대한 관심이 많아서 서로간에 이야기할 것이 많았다. 11월에 있을 <a href="https://devfest17-seoul.firebaseapp.com/" target="_blank" rel="external">GDG</a>에서도 만나기로 했다.</li><li>동욱형이 알려준 사이트<ul><li><a href="https://www.youtube.com/user/as3as3as3as3" target="_blank" rel="external">Hika Maeng의 유튜브</a></li><li><a href="http://wesbos.com/javascript30/" target="_blank" rel="external">JavaScript, ES6 참고사이트</a></li></ul></li><li>며칠 전부터 갑작스럽게 ‘컴공 부전공으로라도 할까?’라는 생각이 든다. 30학점만 들으면 되니까 1학기만 추가해서 다니면 충분할 것 같기도 한데… 원래 수료후 바로 구직활동을 하려고 했는데 고민이다.</li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ES6&lt;ul&gt;
&lt;li&gt;let, const&lt;/li&gt;
&lt;li&gt;Template Literal
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171023-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/23/171023-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/23/171023-TIL/</id>
    <published>2017-10-23T06:33:37.000Z</published>
    <updated>2017-10-29T14:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>JavaScript</p><ul><li>시험 + 복습</li><li>Todo-list2 복습</li></ul></li><li><p>Sass 특강</p><ul><li>Basics</li><li>SassScript</li><li>CSS Extensions</li><li>Built-in Function</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>시험을 봤는데 부족한 점이 많은 것이 느껴진다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시험 + 복습&lt;/li&gt;
&lt;li&gt;Todo
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171021-171022-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/22/171021-171022-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/22/171021-171022-TIL/</id>
    <published>2017-10-22T00:12:35.000Z</published>
    <updated>2017-10-29T06:26:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="주말동안-한-일"><a href="#주말동안-한-일" class="headerlink" title="주말동안 한 일"></a>주말동안 한 일</h2><ul><li><p>2017 FEconf</p><ol><li>Performance Optimization</li><li>JavaScript Fatigue</li><li>electron으로 만드는 데스크탑 메신저</li><li>Redux-thunk에서 Redux-saga로</li><li>쉽게 써봅시다. RxJS!</li><li>Angular 컴포넌트 대화법</li><li>TypeScript가 그대를 이롭게 할지니!</li></ol></li><li><p>Todo-list2</p><ul><li>기본 기능 구현 완료</li><li>그러나 id값 함수은 구현하지 못하고, 삭제 기능도 불완전(값만을 삭제)</li></ul></li><li><p>시험대비 복습</p></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>퍼포먼스 최적화<ul><li>서비스를 단 0.1초라도 빠르게 만들고자 하는 개발자들의 고충이 느껴진다. 이미지를 줄이고 코드를 줄이고 렌더 방식을 손보고 등등 현업에서 개발자들이 어떻게든 빠르게 화면을 띄우려는 노력이 중요한 것 같다.</li></ul></li><li>2017 FEconf에 가서 사실 많은 내용은 이해하기 어려운 내용이었다. 내가 아직 모르는 것들이 많았고, TypeScript나 Angular도 내가 아직 배우지 않은 내용이라 멀뚱멀뚱 볼 수 밖에 없었다. electron이 역시 신기하다는 것이 기억이 나고 계속해서 변천사를 겪고 있는 JavaScript의 얄궂은 운명을 알 수 있었다. </li><li>무엇을 해야 가장 좋을지는 모르겠다. 그렇다고 모든 걸 마스터할때까지 기다릴 수는 없는 법이다.</li><li>최신의 기술, 트렌드는 무엇이고 개발자들의 열정만큼은 확실히 알 수 있었다. 최근의 트렌드는 <strong>컴포넌트화</strong>이다.</li><li>사실 가장 큰 성과는 우연히 지인을 만난 것이다. 프로그래밍 동아리 Codrug 창립자 중 한 명이었던 동욱이 형인데, 같이 서로간의 공부 내용을 공유하고 진로 방향에 대해서도 이야기를 나눌 수 있었다. 신사역 근처에서 일하고 계신다는 내용도 알게 되어 나중에 한번 만나 커피라도 마시자고 했다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;주말동안-한-일&quot;&gt;&lt;a href=&quot;#주말동안-한-일&quot; class=&quot;headerlink&quot; title=&quot;주말동안 한 일&quot;&gt;&lt;/a&gt;주말동안 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2017 FEconf&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Performance 
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171020-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/20/171020-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/20/171020-TIL/</id>
    <published>2017-10-20T00:56:41.000Z</published>
    <updated>2017-10-29T06:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Activity</p><ul><li>Todo list 만들기 중 데이터 구조<ul><li>id 만드는 함수 =&gt; <code>reduce()</code> 활용 (임기완 조교님)</li><li><code>Object.freeze()</code> 쓸 수 있음</li></ul></li></ul></li><li><p>Trend of Software Engineering</p><ul><li>웹앱은 (앱에서 웹페이지를 띄워주는 것) 트렌드에 맞지 않음 (모바일은 모바일답게, 웹은 웹답게)</li><li>개인정보와 보안 이슈</li><li>클라우드 컴퓨팅 환경에서 서비스를 배포</li><li>웹과 앱의 통합 =&gt; PWD(프로그레시브 웹 앱) 안드로이드에서 알리익스프레스에 접속해서 홈화면에 추가해보라.</li><li>DevOps 기존의 오퍼레이션(Ops) 팀을 쫓아내고 개발팀에서 다 함.</li></ul></li><li><p>Software Engineering 특강</p><ul><li>개발자가 회사, 프로젝트 등 다양한 사람들과 협업하는 방식과 자세</li><li>DevOps<ul><li>기존의 회사들은 Dev(개발)부서와 Ops(관리운영)부서가 나뉘어있었다. 그러나 기술지향적 분위기와 협업, 소통의 문제로 최근엔 개발부서가 관리운영까지 맡는 DevOps이 탄생하였다.</li></ul></li><li>개발자와 프로그래머, 코더의 구분<ul><li>시스템과 알고리즘과 코드화에 따른 능력과 역하</li></ul></li><li>컴퓨터적 사고(Computational Thinking)<ul><li>과정<ol><li>문제 조직화(추상화)</li><li>솔루션 구현(자동화)</li><li>솔루션 실행 및 평가(분석)</li></ol></li><li>특징<ul><li>문제 분해</li><li>패턴인지 / 데이터표현</li><li>일반화 / 추상화</li><li>알고리즘</li></ul></li></ul></li><li>다양한 문서와 명세<ul><li>user case diagram</li><li>user scenario</li><li>user stories</li></ul></li></ul></li><li><p>소프트웨어 개발주기 과정 모델</p><ul><li>Build-fix model: 설계없이 개발, 수정 반복. 빠른 착수와 무계획적 진행</li><li>폭포수 모델(Waterfall model): 순차적 개발 모델(전 단계의 완료 전까지 다음 단계로 넘어갈 수 없음), 정형화된 접근과 체계적 문서화, 굉장히 느림</li><li>Prototype model: 빠른 프로토타입 제작 이후 피드백 반영하며 진행. 대규모 프로젝트 적용 힘듦</li><li>Spiral model: 대규모/고비용, 프로젝트 위험요인 제거가능, 불명확한 각 단계</li><li>RAD, Iterative Development model, V model, Component Based Development</li></ul></li><li><p>소프트웨어 개발 과정</p><ul><li>애자일(Agile): 도입/상세/구축/이행의 반복(UP), 스크럼 마스터의 프로세스 주도/각자의 역할에 충실/TDD 중시(XP)</li><li>애자일 도구: Planing Poker(애자일 추정과 시간설계를 위한 도구)</li><li>Pair programming<ul><li>재미있었고 내가 모르는 부분을 알려주어서 좋았다.</li></ul></li><li>TDD(Test Driven Development): 객체지향적, 재설계 시간 단축, 디버깅 시간 단축, 애자일과 시너지(사용자 중심적), 테스트 문서 대체, 추가구현 용이</li></ul></li><li><p>소프트웨어 배포 과정</p><ul><li>Pre-alpha/Alpha/Beta/Closed-Beta(이건 다소 홍보목적)</li><li>RC(정식제품이 될 가능성이 있는 베타버전)/RTM(소프트웨어 제공 준비 완료)/GA(유저이용 가능상태)</li></ul></li><li><p>TIP</p><ul><li>Alfred로 화면 띄우기<ul><li>내용을 채우고 난 이후 <code>option + command + L</code> 누르기</li></ul></li></ul></li><li><p>스쿨 네트워크 세션 OT</p></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>애자일이라는 새로운 업무방식을 알게 되어서 좋았다. 늘 말로만 들었던 애자일의 여러 도구들과 방식을 실현해봐서 좋았다. 테키한 IT회사들에 있어서 뭔가 초딩스러운 요소가 많은 것 같다. 초딩스럽다고는 하지만 좀 더 생각해보면 생각의 구체화, 단계의 시각화, 명확한 지시전달 등 업무의 핵심적인 요소를 담고 있는 듯. 사실 아주 정확하게 알지는 못하겠지만 하나 명확히 기억이 나는건 ‘<strong>Scrum master</strong>와 친하게 지내자’라는 것</li><li>PWA(Progresive Web App)의 개념이 신기하다. 홈화면 추가가 아니라 좀 더 쉽고 편하게 접근할 수 있는 방법이 생긴다면 더 활성화될 것 같다.</li><li>Back-end 웹스쿨 분들은 사업을 목적으로 이러한 수업을 듣는 사람도 많은 것 같다. 하지만 의문점은 사업을 할건데 개발을 왜 배우냐는 것이다. 물론 개발을 알면 사업에 도움이 되겠지만 그 정도의 수준은 이러한 고비용 스쿨이 아니라 멋쟁이 사자처럼이나 무료 인터넷 강의같이 더 낫지 않을까? 개발자 출신 사업가는 보았어도, 사업가를 하기 위해 개발을 배우는 건 뭔가 순서가 잘못된 것 같은데… 사실 남의 선택에 왈가왈부할 것은 없다. 나는 사업을 할 것이 아니고 개발자가 되기 위해 개발을 공부하는 것이다. 프로젝트도 기똥찬 아이디어나 수익모델 적용이 아니라, 배운 것을 구현, 복습하고 협업경험을 키우는데 방점을 찍고 싶다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Todo list 만들기 중 데이터 구조&lt;
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171019-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/19/171019-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/19/171019-TIL/</id>
    <published>2017-10-19T01:02:25.000Z</published>
    <updated>2017-10-29T05:44:58.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Activity</p><ul><li>알고리즘 퀴즈(JS): 서울에서 김서방 찾기<ul><li><a href="https://programmers.co.kr/learn/challenge_codes/106" target="_blank" rel="external">프로그래머스</a></li><li><a href="https://github.com/girin-dev/JS_Algorithm/blob/master/lv1_findKim.js" target="_blank" rel="external">github</a></li></ul></li></ul></li><li><p>Todo-list 만들기</p><ul><li>DOM, Event 등</li><li>데이터 내부의 id를 지정해주는 함수는 따로 만들어야 한다.</li></ul></li><li><p>자소서 특강</p><ul><li>계기와 분야의 전문가로서 할수 있는 하고 싶은 일은?</li><li>왜 개발을 시작했을까?</li><li>그럼 하필이면 왜 프론트를 시작하게 되었는가?</li><li>개발과 관련된 나의 경험과 기억은 무엇이 있을까?</li><li>협업 경험에 대해서</li></ul></li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>과제<ul><li>Todo-list1</li><li>Todo-list2</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;알고리즘 퀴즈(JS): 서울에서 김서방 찾
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171018-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/18/171018-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/18/171018-TIL/</id>
    <published>2017-10-18T01:08:01.000Z</published>
    <updated>2017-10-29T05:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Git 특정 폴더만 pull하기</p><ul><li><code>git config core.spareCheckout true</code></li><li><code>echo &quot;[원하는 특정 폴더명]&quot; &gt;&gt; .git/info/sparse-checkout</code></li><li><code>git pull upstream master</code></li></ul></li><li><p>알고리즘 퀴즈</p><ul><li>페어프로그래밍<ul><li>18번, 19번</li></ul></li><li>20번, 21번, 22번</li></ul></li><li><p>복습</p><ul><li>Ajax, REST API</li></ul></li><li><p>예습</p><ul><li>SPA &amp; Routing</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Git 특정 폴더만 pull하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git conf
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171017-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/17/171017-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/17/171017-TIL/</id>
    <published>2017-10-17T01:09:56.000Z</published>
    <updated>2017-10-29T05:46:56.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Activity<ul><li>13, 14, 15, 27, 28번 퀴즈 해설</li></ul></li><li>JavaScript<ul><li>이벤트(Event) 마무리</li><li>Ajax</li><li>REST API</li></ul></li><li>과제</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Activity&lt;ul&gt;
&lt;li&gt;13, 14, 15, 27, 28번 퀴즈 해설&lt;/li&gt;

      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171016-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/16/171016-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/16/171016-TIL/</id>
    <published>2017-10-16T04:58:14.000Z</published>
    <updated>2017-10-29T05:46:52.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Activity<ul><li>7, 8, 9, 10, 11번 퀴즈 해설</li></ul></li><li>JavaScript<ul><li>문서 객체 모델 (DOM)</li><li>동기식 처리 모델 vs 비동기식 처리 모델 (Asynchronous processing model)</li><li><strong>사용자와 웹페이지의 상호작용을 위한 이벤트 (Event)</strong></li></ul></li><li>과제<ul><li>DOM 연습문제 2개(27, 28번)</li><li>알고리즘(js) 문제 (13 ~ 15번)</li><li>복습(Ajax, REST API, SPA&amp;Routing)</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>문제를 풀때나 업무를 할때나 정확한 표현과 의도가 중요하다. 커뮤니케이션 능력 중요! 문제나 글도 꼼꼼히 읽고 말도 명확하게 읽고 듣자.</li><li>추천 공부 방법: 블로그 쓰기. 내가 보기 위한 블로그를 써야하는 것. 구글 이용해서 검색기능 달아야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Activity&lt;ul&gt;
&lt;li&gt;7, 8, 9, 10, 11번 퀴즈 해설&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript_Exam_171010</title>
    <link href="http://girin-dev.github.io/2017/10/13/JavaScript-Exam-171010/"/>
    <id>http://girin-dev.github.io/2017/10/13/JavaScript-Exam-171010/</id>
    <published>2017-10-13T01:03:08.000Z</published>
    <updated>2017-10-30T16:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Exam-171010"><a href="#JavaScript-Exam-171010" class="headerlink" title="JavaScript Exam 171010"></a>JavaScript Exam 171010</h1><p>수기작성 + 손코딩</p><ol><li><p>index.html에서 main.js를 로드하기 위한 코드를 완성하라. 단 index.html은 프로젝트 루트에 위치하고 main.js는 src/js 디렉토리에 위치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;src/js/main.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line">&lt;script src=”src/js/main.js”&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=”./src/js/main.js”&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="comment">// 아래 코드도 정상 작동</span></div><div class="line">&lt;script src=”/src/js/main.js”&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></li><li><p>변수란 무엇인가?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">변수란 사람이 알아볼 수 있는 형식을 이용해 데이터 값을 메모리에 할당, 참조하여 호출, 사용할 수 있도록 하는 것이다.</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line">변수는 위치(주소)를 기억하는 저장소이다. 위치란 메모리 상의 주소(address)를 의미한다. 즉 변수란 메모리 주소(Memory address)에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자(identifier)이다.</div></pre></td></tr></table></figure></li><li><p>JavaScript의 자료형을 모두 나열하라.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">문자열(<span class="built_in">String</span>), 숫자형(<span class="built_in">Number</span>), <span class="literal">null</span>, <span class="literal">undefined</span>, boolean, <span class="built_in">Symbol</span>의 기본자료형과 <span class="built_in">Object</span>(객체)가 있다.</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line">기본자료형(primitive data type): <span class="built_in">Boolean</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="built_in">Number</span>, <span class="built_in">String</span>, <span class="built_in">Symbol</span>(ES6에 추가)</div><div class="line">객체형(<span class="built_in">Object</span> type): <span class="built_in">Object</span></div></pre></td></tr></table></figure></li><li><p><code>var foo = 42 / -0; console.log(foo);</code>의 결과를 기술하라.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="literal">Infinity</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line">-<span class="literal">Infinity</span></div></pre></td></tr></table></figure></li><li><p>변수 선언 시 <code>var</code> 키워드를 생략할 수 있다. 이때 변수는 전역 변수가 되는데 그 이유는 무엇인가?</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="comment">// 순환논리의 오류</span></div><div class="line">&gt;<span class="keyword">var</span> 키워드를 생략할 경우 자바스크립트는 암묵적으로 <span class="keyword">var</span>를 붙여서 처리하게 된다. 자바스크립트는 <span class="function"><span class="keyword">function</span>-<span class="title">block</span>-<span class="title">scope</span>를 갖기 떄문에 <span class="title">function</span> 내 변수가 아닌 한 모두 전역변수이다. 따라서 해당 변수는 전역 변수가 된다.</span></div><div class="line"><span class="function">&gt;</span></div></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line">자바스크립트 엔진은 변수 할당문을 만나면 해당 스코프 내에서 해당 변수의 선언을 검색한다. 이때 검색에 실패하면 상위 스코프에서 해당 변수의 선언을 검색한다. 최상위 스코프인 전역에서도 해당 변수 선언의 검색에 실패한 경우, 자바스크립트 엔진은 해당 변수를 전역 변수로 간주하고 선언하기 때문이다.</div></pre></td></tr></table></figure></li><li><p>변수 호이스팅이 발생하는 이유를 설명하라</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">변수는 변수 선언, 초기화, 값 할당의 절차를 거치는데, 자바스크립트 엔진은 스크립트를 읽기 전 모든 변수를 취합해 VO(Variable <span class="built_in">Object</span>)에 넣어 선언하고 동시에 <span class="literal">undefined</span>로 초기화한다. 이후 변수 선언 코드를 읽을 때 값을 할당하게 된다. 이 절차상의 순서 차이로 인해 변수 호이스팅이 발생한다.</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="keyword">var</span> 키워드로 선언된 변수는 선언 단계와 초기화 단계가 한번에 이루어진다. 즉, 스코프에 변수가 등록되고 변수는 메모리에 공간을 확보한 후 <span class="literal">undefined</span>로 초기화된다. 따라서 변수 선언문 이전에 변수에 접근하여도 Variable <span class="built_in">Object</span>에 변수가 존재하기 때문에 에러가 발생하지 않는다. 다만 <span class="literal">undefined</span>를 반환한다.</div></pre></td></tr></table></figure></li><li><p><code>var x = 5;</code>일 때, <code>console.log(x != &#39;5&#39;);</code>의 결과는 무엇인가?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></li><li><p><code>var foo = false &amp;&amp; &#39;Cat&#39;;</code> 일 때, <code>foo</code>의 값은 무엇인가?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></li><li><p>console.log(!!null);의 결과는 무엇인가?</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="literal">undefined</span></div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></li><li><p>0에서 10미만까지 홀수만을 큰 수부터 출력하는 코드를 <code>for문</code>을 사용하여 작성하라.</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="keyword">for</span> (i = <span class="number">5</span>; i &gt; <span class="number">0</span>; i--)&#123;</div><div class="line">&gt;  <span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line">&gt;  n = <span class="number">2</span>i - <span class="number">1</span>;</div><div class="line">&gt;  <span class="built_in">console</span>.log(n);</div><div class="line">&gt;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>0에서 10미만까지 3의 배수를 큰 수부터 출력하는 <code>while문</code>을 사용하여 작성하라. 단 0은 출력하지 않는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i = <span class="number">10</span>;</div><div class="line"><span class="keyword">while</span> (i &gt; <span class="number">1</span>) &#123;</div><div class="line">  i--;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">9</span>;</div><div class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">if</span>(i % <span class="number">3</span> === <span class="number">0</span>) <span class="built_in">console</span>.log(i);</div><div class="line">  i--;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단, 객체 리터럴 방식을 사용한다.</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="keyword">var</span> obj = &#123;</div><div class="line">&gt;   name: <span class="string">'string'</span>,</div><div class="line">&gt;   sayName: <span class="keyword">this</span>.name</div><div class="line">&gt;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">'Lee'</span>,</div><div class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">obj.sayName();</div></pre></td></tr></table></figure></li><li><p>문자열을 값으로 갖는 name 프로퍼티와 name 프로퍼티를 출력하는 sayName 메소드를 갖는 객체 obj를 생성하라. 단 생성자 함수 방식(함수 Person)을 사용한다.</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">&gt;  <span class="keyword">this</span>.name = name;</div><div class="line">&gt;  <span class="keyword">this</span>.sayName = <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&gt;&#125;</div><div class="line">&gt;<span class="keyword">var</span> obj = Person(<span class="string">'string'</span>)</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'Lee'</span>;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person();</div><div class="line">obj.sayName();</div></pre></td></tr></table></figure></li><li><p><code>var person = { &#39;my-name&#39;: &#39;Lee&#39;};</code> 일 떄, my-name 프로퍼티 값을 ‘Kim’으로 변경하고 <code>console.log()</code>를 사용하여 출력하는 코드를 작성하라.</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;person[&apos;my-name&apos;] = &apos;Kim&apos;;</div><div class="line">&gt;console.log(person);</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line"><span class="keyword">var</span> person = &#123; <span class="string">'my-name'</span>: <span class="string">'Lee'</span> &#125;;</div><div class="line">person[<span class="string">'my-name'</span>] = <span class="string">'Kim'</span>;</div><div class="line"><span class="built_in">console</span>.log(person[<span class="string">'my-name'</span>]);</div></pre></td></tr></table></figure></li><li><p>pass-by-refence와 pass-by-valuse의 차이점에 대해 설명하라.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pass-by-value는 기본자료형에 해당하는 것으로 변수를 할당할 떄 <span class="string">'값'</span>으로 하게 된다는 것이다. 이때 새로운 변수에 이전 변수를 할당하더라도 이 두 변수는 같은 메모리 위치를 가르키지 않고 값만을 복사하여 이전 변수의 메모리 위치가 아닌 곳에 할당한다.</div><div class="line">pass-by-reference는 객체에 해당하는 것으로 변수를 할당할 떄 참조값을 할당한다. 새로운 변수를 이전 변수와 같이 할당하면 두 변수는 정확히 같은 곳을 가르키게 된다. 또한 둘 중 하나의 값이 변경되면 이전의 변수의 값도 같이 변경된다.</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 정답</span></div><div class="line">pass-by-value</div><div class="line">기본자료형의 값은 값(value)으로 전달된다. 즉, 복사되어 전달된다. 기본자료형은 값이 한번 정해지면 변경할 수 없다.(immutable)</div><div class="line">pass-by-reference</div><div class="line">참조형(object type)의 값은 실제 객체가 아닌 객체에 대한 참조값이다. 즉, 참조형을 할당하면 객체가 복사되어 전달되는 것이 아니라 참조값(reference)가 전달된다. 객체는 변경 가능한 프로퍼티들의 집ㅍ합이다.</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-Exam-171010&quot;&gt;&lt;a href=&quot;#JavaScript-Exam-171010&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Exam 171010&quot;&gt;&lt;/a&gt;JavaScript Exam 1710
      
    
    </summary>
    
      <category term="JavaScript Exam" scheme="http://girin-dev.github.io/categories/JavaScript-Exam/"/>
    
    
      <category term="JavaScript Exam" scheme="http://girin-dev.github.io/tags/JavaScript-Exam/"/>
    
  </entry>
  
  <entry>
    <title>171013-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/13/171013-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/13/171013-TIL/</id>
    <published>2017-10-13T00:45:56.000Z</published>
    <updated>2017-10-29T09:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Scrum<ul><li>1주 내용 정리</li></ul></li><li>JavaScript<ul><li>퀴즈 1~3번, 26번, 6번 해설</li><li><code>substring(startIndex[, endIndex])</code> 정리</li><li>시험 복습 &amp; 정리<ul><li>자기만의 말로 표현할 수 있어야 한다.</li></ul></li><li>수업 내용 복습<ul><li>Closure</li><li>Object-Oriented Programming</li></ul></li><li>Pair Programming<ul><li>Driver와 Navigator의 협업</li></ul></li><li>정규표현식</li><li>9번 퀴즈 (Number, Math)</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>함수선언식보다 함수표현식을 쓰는 습관을 들이자. 함수선언식은 함수 호이스팅이 발생하고 함수 표현식은 변수 호이스팅이 발생하는데, 이때 변수 호이스팅이 우리의 직관과 논리에 더 부합하기 떄문이다. 이것은 의도하지 않은 오류를 줄여주고 코드의 일관성을 유지하는데 도움을 준다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Scrum&lt;ul&gt;
&lt;li&gt;1주 내용 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171012-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/12/171012-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/12/171012-TIL/</id>
    <published>2017-10-12T00:20:40.000Z</published>
    <updated>2017-10-29T09:30:06.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Activity<ul><li>과제 풀이 해설<ul><li>String</li><li>RegExp</li></ul></li></ul></li><li>JavaScript<ul><li>Execution Context</li><li>Closure</li><li>Object-Oriented Programming</li></ul></li><li>과제<ul><li>예습</li><li>복습</li><li>퀴즈 (7개)</li><li>1주간 공부내용 정리</li></ul></li><li>추천도서<ul><li>1순위(필수): <a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=34486660" target="_blank" rel="external">인사이드 자바스크립트</a></li><li>2순위(심화)<ul><li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=2608820" target="_blank" rel="external">더글라스 크락포드의 자사스크립트 핵심</a></li><li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=96088895" target="_blank" rel="external">속깊은 JavaScript</a></li></ul></li><li>3순위(좋은 책)<ul><li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=78862734" target="_blank" rel="external">자바스크립트 완벽 가이드</a></li><li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=112137604" target="_blank" rel="external">러닝 자바스크립트(ES6초기)</a></li><li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=38913750" target="_blank" rel="external">자바스크립트 닌자 비급</a></li><li><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=55027282" target="_blank" rel="external">자바스크립트&amp;제이쿼리</a></li></ul></li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>주말에 복습, 정리해야 할 내용의 양이 어마어마하다.</li><li>this와 프로토타입은 꼭 다시 봐야겠다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Activity&lt;ul&gt;
&lt;li&gt;과제 풀이 해설&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171011-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/11/171011-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/11/171011-TIL/</id>
    <published>2017-10-11T01:13:21.000Z</published>
    <updated>2017-10-29T09:29:59.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Activity<ul><li>시험 풀이</li></ul></li><li>JavaScript<ul><li>Number</li><li>Math</li><li>Array</li><li>RegExp(정규표현식)</li></ul></li><li>과제<ul><li>예습(Execution Context/Closure/OOP)</li><li>복습</li><li>퀴즈<ul><li>String</li><li>RegExp</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Activity&lt;ul&gt;
&lt;li&gt;시험 풀이&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 17. 표준 빌트인 객체 (Standard Built-in Objects)</title>
    <link href="http://girin-dev.github.io/2017/10/10/JavaScript-17-Standard-Built-in-Objects/"/>
    <id>http://girin-dev.github.io/2017/10/10/JavaScript-17-Standard-Built-in-Objects/</id>
    <published>2017-10-10T09:07:09.000Z</published>
    <updated>2017-10-29T06:31:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-17-표준-빌트인-객체-Standard-Built-in-Objects"><a href="#JavaScript-17-표준-빌트인-객체-Standard-Built-in-Objects" class="headerlink" title="JavaScript 17. 표준 빌트인 객체 (Standard Built-in Objects)"></a>JavaScript 17. 표준 빌트인 객체 (Standard Built-in Objects)</h1><ul><li>Global Objects 라고 표기하기도 하는데 전역객체(Global Object)와 다른 의미</li></ul><h2 id="전역-객체-Global-Object"><a href="#전역-객체-Global-Object" class="headerlink" title="전역 객체 (Global Object)"></a>전역 객체 (Global Object)</h2><ul><li>전역객체도 표준 빌트인 객체 중 하나. 브라우저와 서버에서 전역객체는 다르다.(각각 <code>window</code>와 <code>global</code>)</li><li>전역객체는 어플리케이션 안에서 오직 하나만 존재. <code>undefined</code>를 제외하고 모든 것을 가질 수 있음(Object 참고)</li><li>전역함수는 전역 객체의 메소드였다.(전역 객체는 전역 변수를 프로퍼티로 갖는다.) 따라서 전역함수와 전역변수를 남발하면 전역객체의 덩치가 점점 커진다. 성능이슈 발생</li><li><p>글로벌 영역에 선언한 함수도 전역 객체의 프로퍼티로 접근 가능.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveTo</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> location = &#123;<span class="string">'href'</span>:<span class="string">'move to '</span>&#125;; <span class="comment">// 전역 객체 window의 프로퍼티 location과 충돌</span></div><div class="line">  alert(location.href + url);</div><div class="line">  <span class="comment">// 이 코드로 실행시 alert까지 뜨고 그냥 지역변수 location의 값을 바꿔주고 끝.</span></div><div class="line">  <span class="comment">// location.href = url;</span></div><div class="line">  <span class="comment">// 이 코드로 실행시 alert 뜬 이후 전역객체의 프로퍼티 location 기능 수행.(페이지 이동)</span></div><div class="line">  <span class="built_in">window</span>.location.href = url;</div><div class="line">&#125;</div><div class="line">moveTo(<span class="string">'http://www.google.com'</span>);</div></pre></td></tr></table></figure></li><li><p>전역객체의 기술은 대개 생략하지만 위 코드와 같이 사용자가 정의한 변수와 전역 객체의 자식 객체 이름이 충돌할 경우, 전역객체를 명확히 기술해 혼동을 방지할 수 있다. <strong>하지만 애초에 이런 식의 코드는 짜지 않는 것이 좋다.</strong></p></li><li>표준 빌트인 객체도 전역 객체의 자식 객체. 따라서 전역 객체 기술을 생략할 수 있다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// window.alert('Hello world!');;</span></div><div class="line">alert(<span class="string">'Hello world!'</span>);</div></pre></td></tr></table></figure></li></ul><h2 id="전역-프로퍼티-Global-property"><a href="#전역-프로퍼티-Global-property" class="headerlink" title="전역 프로퍼티 (Global property)"></a>전역 프로퍼티 (Global property)</h2><ul><li>Infinity</li><li>NaN</li><li>undefined</li></ul><h2 id="전역-함수-Global-function"><a href="#전역-함수-Global-function" class="headerlink" title="전역 함수 (Global function)"></a>전역 함수 (Global function)</h2><ul><li>eval()<ul><li>매개변수에 전달된 문자열 구문 또는 표현식을 평가 실행</li><li>보안상의 문제로 절대 사용 금지</li></ul></li><li><p>isFinite()</p><ul><li>매개변수에 전달된 값이 유한수인지 아닌지를 검사</li><li>유한수이면 <code>true</code>, 무한수이면 <code>false</code>를 반환</li><li>전달값이 문자열의 숫자인 경우, 숫자로 변환하여 검사를 수행한다. 숫자도 아니고 문자열 속의 숫자도 아닌 경우 <code>false</code>로 반환한다.(<code>null</code> 예외)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isFinite</span>([검사하고자 하는 값])</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">Infinity</span>));  <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">NaN</span>));       <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="string">'Hello'</span>));   <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="string">'2005/12/12'</span>));   <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">1</span>/<span class="number">3</span>));    <span class="comment">// true, 컴퓨터는 무한소수를 끝까지 표현하지 않고 버려서 유한소수로 표현.</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">0</span>));         <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">2e64</span>));      <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">null</span>));      <span class="comment">// true: null-&gt;0</span></div></pre></td></tr></table></figure></li></ul></li><li><p>isNaN()</p><ul><li>매개변수에 전달된 값이 NaN인지 검사, 숫자가 맞다면 <code>false</code> 숫자가 아니면 <code>true</code> 반환.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isNaN</span>([검사하고자 하는 값])</div><div class="line"></div><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>)       <span class="comment">// true</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>) <span class="comment">// true: undefined -&gt; NaN</span></div><div class="line"><span class="built_in">isNaN</span>(&#123;&#125;)        <span class="comment">// true: &#123;&#125; -&gt; NaN</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="string">'blabla'</span>)  <span class="comment">// true: 'blabla' -&gt; NaN</span></div><div class="line"></div><div class="line"><span class="built_in">isNaN</span>(<span class="literal">true</span>)      <span class="comment">// false: true -&gt; 1</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>)      <span class="comment">// false: null -&gt; 0</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="number">37</span>)        <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// strings</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="string">'37'</span>)      <span class="comment">// false: '37' -&gt; 37</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="string">'37.37'</span>)   <span class="comment">// false: '37.37' -&gt; 37.37</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="string">''</span>)        <span class="comment">// false: '' -&gt; 0</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="string">' '</span>)       <span class="comment">// false: ' ' -&gt; 0</span></div><div class="line"></div><div class="line"><span class="comment">// dates</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="built_in">Date</span>())             <span class="comment">// false: new Date() -&gt; Number</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().toString())  <span class="comment">// true:  String -&gt; NaN</span></div></pre></td></tr></table></figure></li></ul></li><li><p>parseFloat()</p><ul><li>이어서…</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-17-표준-빌트인-객체-Standard-Built-in-Objects&quot;&gt;&lt;a href=&quot;#JavaScript-17-표준-빌트인-객체-Standard-Built-in-Objects&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 16. 자바스크립트가 제공하는 내장 객체 (Built-in Object)</title>
    <link href="http://girin-dev.github.io/2017/10/10/JavaScript-16-Built-in-Object/"/>
    <id>http://girin-dev.github.io/2017/10/10/JavaScript-16-Built-in-Object/</id>
    <published>2017-10-10T09:05:59.000Z</published>
    <updated>2017-10-10T14:38:29.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-16-자바스크립트가-제공하는-내장-객체-Built-in-Object"><a href="#JavaScript-16-자바스크립트가-제공하는-내장-객체-Built-in-Object" class="headerlink" title="JavaScript 16. 자바스크립트가 제공하는 내장 객체 (Built-in Object)"></a>JavaScript 16. 자바스크립트가 제공하는 내장 객체 (Built-in Object)</h1><ul><li><p>Built-in(API) 이란?</p><ul><li>이미 자바스크립트에 내장된, 또한 검증된 것들(객체, 함수 등)</li><li>쓰려면 뭐가 있는지는 알아야 한다. 모르면 자기가 직접 만들려고 할 것이고 그럼 그 검증되지 않은 코드는 퍼포먼스 등에서 문제가 생긴다.</li><li>String과 <strong>Array(순회가능, index라는 순서가 있어서 다루기가 편함, array의 built-in은 성능이 우수)</strong> 등</li></ul></li><li><p>빌트인 객체 (내장객체, Built-in Object)</p><ul><li>Standard Built-in Objects (Global Objects, not Global Object전역객체)</li><li>BOM (Browser Object Model)</li><li>DOM (Document Object Model)</li></ul></li></ul><h2 id="Standard-Built-in-Objects-표준-빌트인-객체"><a href="#Standard-Built-in-Objects-표준-빌트인-객체" class="headerlink" title="Standard Built-in Objects(표준 빌트인 객체)"></a>Standard Built-in Objects(표준 빌트인 객체)</h2><ul><li>Global Objects라고도 하지만 전역 객체(Global Object)와 다른 뜻 혼동하지 말 것</li><li>자세한 내용은 <a href="">표준 빌트인 객체 (Standard Built-in Objects)</a> 참고</li></ul><h2 id="Native-Object-BOM-DOM"><a href="#Native-Object-BOM-DOM" class="headerlink" title="Native Object (BOM/DOM)"></a>Native Object (BOM/DOM)</h2><ul><li>BOM 브라우저를 프로그래밍적으로 통제할 수 있음<ul><li>window<ul><li>document, history, location, navigator, screen</li></ul></li></ul></li><li>DOM CSS와 HTML 등의 구조를 프로그래밍적으로 통제할 수 있음</li><li>필요시 따로 공부해야 함</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-16-자바스크립트가-제공하는-내장-객체-Built-in-Object&quot;&gt;&lt;a href=&quot;#JavaScript-16-자바스크립트가-제공하는-내장-객체-Built-in-Object&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>171010-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/10/171010-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/10/171010-TIL/</id>
    <published>2017-10-10T00:21:15.000Z</published>
    <updated>2017-10-29T09:30:02.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Activity<ul><li>예습/복습</li></ul></li><li>JavaScript<ul><li>Built-in(API) Object</li><li>Standard Built-in Object</li><li>String</li><li>Date</li></ul></li><li>과제<ul><li>예습(Number/Math/RegExp/Array)</li><li>복습(시험, 퀴즈)</li><li>퀴즈<ul><li>String<ol><li>1~10,000 중 8이 등장하는 횟수 구하기(Google)</li><li>짝수와 홀수 구하기</li><li>문자열 검증하기</li></ol></li><li>Date<ol><li>요일 구하기</li></ol></li></ul></li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>정리는 주말에 하고 복습에 집중하자</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Activity&lt;ul&gt;
&lt;li&gt;예습/복습&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
</feed>
