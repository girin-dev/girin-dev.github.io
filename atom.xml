<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>기린개발의 일지</title>
  
  <subtitle>Girin-dev&#39;s development Blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://girin-dev.github.io/"/>
  <updated>2017-10-09T16:49:53.059Z</updated>
  <id>http://girin-dev.github.io/</id>
  
  <author>
    <name>Girin-dev</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 12. 함수 호출 패턴에 따라 결정되는 this</title>
    <link href="http://girin-dev.github.io/2017/10/09/JavaScript-12-this/"/>
    <id>http://girin-dev.github.io/2017/10/09/JavaScript-12-this/</id>
    <published>2017-10-09T04:34:31.000Z</published>
    <updated>2017-10-09T16:49:53.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-12-함수-호출-패턴에-따라-결정되는-this"><a href="#JavaScript-12-함수-호출-패턴에-따라-결정되는-this" class="headerlink" title="JavaScript 12. 함수 호출 패턴에 따라 결정되는 this"></a>JavaScript 12. 함수 호출 패턴에 따라 결정되는 this</h1><ul><li>일반적인 객체에는 this가 없고 함수객체에만 존재.</li><li>기본은 this가 전역객체(window/global)를 의미</li><li>이 두가지 빼고는 메소드와 생성자 함수일 때만 다름.</li></ul><h2 id="함수-호출-패턴과-this-바인딩"><a href="#함수-호출-패턴과-this-바인딩" class="headerlink" title="함수 호출 패턴과 this 바인딩"></a>함수 호출 패턴과 this 바인딩</h2><ul><li>아래 4가지 패턴에 따라 어떤 객체 this에 바인딩할지 결정.</li></ul><ol><li>함수 호출 패턴</li><li>매소드 호출 패턴</li><li>생성자 호출 패턴</li><li>apply 호출 패턴</li></ol><h2 id="함수-호출-패턴-Function-Invocation-Pattern"><a href="#함수-호출-패턴-Function-Invocation-Pattern" class="headerlink" title="함수 호출 패턴(Function Invocation Pattern)"></a>함수 호출 패턴(Function Invocation Pattern)</h2><ul><li>브라우저에서는 <code>window</code>, 서버(node.js)에서는 <code>global</code></li></ul><h2 id="메소드-호출-패턴-Method-Invocation-Pattern"><a href="#메소드-호출-패턴-Method-Invocation-Pattern" class="headerlink" title="메소드 호출 패턴(Method Invocation Pattern)"></a>메소드 호출 패턴(Method Invocation Pattern)</h2><ul><li>해당 메소드를 소유한 객체가 this</li></ul><h2 id="생성자-호출-패턴-Constructor-Invocation-Pattern"><a href="#생성자-호출-패턴-Constructor-Invocation-Pattern" class="headerlink" title="생성자 호출 패턴(Constructor Invocation Pattern)"></a>생성자 호출 패턴(Constructor Invocation Pattern)</h2><ul><li>생성자로 만든 함수라면 new를 넣어주자…</li><li>new 연산자와 함께 생성자 함수를 호출하면 자바스크립트가 알아서 빈 객체를 생성하고 함수 내부의 this 의 참조(원래 window)를 지우고 생성한 빈 객체를 참조하게 한다.  따라서 이때 this는 생성된 빈 객체~(this를 생성된 빈 객체에 바인딩한다.)</li><li><code>[앞] instanceof [뒤]</code>=&gt; ‘뒤’가 ‘앞’을 만든 주체니? 라는 뜻<br>callee 는 불림 당한 것<br>caller 는 부른 것</li></ul><h2 id="apply-호출-패턴-Apply-Invocation-Pattern"><a href="#apply-호출-패턴-Apply-Invocation-Pattern" class="headerlink" title="apply 호출 패턴(Apply Invocation Pattern)"></a>apply 호출 패턴(Apply Invocation Pattern)</h2><p>arguments는 아무거나 다 되는게 아니라 유사배열객체만 가능.<br>이번엔 this가 아니라 apply(arguments)를 this로 쓸게~ 라는 의미.<br>call()은 하는 일은 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-12-함수-호출-패턴에-따라-결정되는-this&quot;&gt;&lt;a href=&quot;#JavaScript-12-함수-호출-패턴에-따라-결정되는-this&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 12. 함수 호출
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-11-Scope</title>
    <link href="http://girin-dev.github.io/2017/10/09/JavaScript-11-Scope/"/>
    <id>http://girin-dev.github.io/2017/10/09/JavaScript-11-Scope/</id>
    <published>2017-10-09T04:34:25.000Z</published>
    <updated>2017-10-09T16:46:13.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="변수에의-접근성과-생존기간-life-cycle"><a href="#변수에의-접근성과-생존기간-life-cycle" class="headerlink" title="변수에의 접근성과 생존기간 (life-cycle)"></a>변수에의 접근성과 생존기간 (life-cycle)</h1><ul><li>자바스크립트는 블록레벨스코프가 아니라 펑션레벨스코프!</li><li>블록레벨스코프처럼 쓰고 싶으면 var가 아니라 ES6에 새롭게 추가된 let을 쓰자.</li><li>스코프는 동일한 변수를 또 쓰기 위해서 고안된 개념(폴더와 디렉토리 개념과 비슷)</li></ul><h2 id="Global-scope"><a href="#Global-scope" class="headerlink" title="Global scope"></a>Global scope</h2><ul><li>전역의 실체<ul><li>server-side(Node.js)에서는 <code>glabal</code>(전역객체)</li><li>브라우저-side에서 <code>window</code>라는 전역객체</li></ul></li><li>전역변수라는 것은 결국 전역객체 window의 프로퍼티.</li></ul><h2 id="Non-block-level-scope"><a href="#Non-block-level-scope" class="headerlink" title="Non block-level scope"></a>Non block-level scope</h2><ul><li>function 밖에서 선언된 변수는 블럭 내에서 선언되었다고 할지라도 모두 전역변수, 즉 global scope를 가짐.</li></ul><h2 id="Function-scope"><a href="#Function-scope" class="headerlink" title="Function scope"></a>Function scope</h2><ul><li>함수 내에서 선언된 매개변수와 변수는 내부에서만 유효(지역변수)</li><li>전역변수와 지역변수가 같은 이름으로 중복 선언 되었다고 해도 지역변수를 우선한다.</li><li>즉, 실행 컨텍스트에서 스코프 체인에 의한 참조 순위가 존재한다는 뜻.</li></ul><h2 id="암묵적-전역-inplied-globals"><a href="#암묵적-전역-inplied-globals" class="headerlink" title="암묵적 전역 (inplied globals)"></a>암묵적 전역 (inplied globals)</h2><ul><li>함수 내에서 <code>var</code>를 사용하지 않고 변수를 설정하더라도 자바스크립트는 이를 암묵적으로 전역변수로 선언</li><li>하지만 의도치 않은 전역변수는 혼란을 초래하므로 <code>var</code>를 반드시 사용할 것.</li><li>각각의 코드를 실행해보면서 확인해 볼 것.</li></ul><h2 id="Lexical-scoping-Static-scoping"><a href="#Lexical-scoping-Static-scoping" class="headerlink" title="Lexical scoping (Static scoping)"></a>Lexical scoping (Static scoping)</h2><ul><li>자바스크립트는 함수가 선언된 시점에서의 유효범위를 갖는다. 호출 시점이 아니다.</li><li>따라서 지역함수 내에 호출이 벌어져도 선언 시점에서의 스코프가 결정.</li></ul><h2 id="변수명의-중복"><a href="#변수명의-중복" class="headerlink" title="변수명의 중복"></a>변수명의 중복</h2><ul><li>여러 javascript파일을 불러오는 경우 전역변수들끼리 중복이 될 수 있다.</li><li>이 경우 중복된 변수가 영향을 미쳐 코드가 정상작동하지 않을 수 있다.</li><li>따라서 전역변수는 되도록 쓰지 말아야 하며 스코프는 좁힐수록 좋다.</li></ul><h2 id="최소한의-전역변수-사용"><a href="#최소한의-전역변수-사용" class="headerlink" title="최소한의 전역변수 사용"></a>최소한의 전역변수 사용</h2><ul><li>즉시실행함수사용</li><li>더글라스 크락포드의 제안: 굳이 쓰려면 전연변수를 모아놓은 객체를 만들어서 쓸 것.</li></ul><h2 id="즉시실행함수를-이용한-전역변수-사용-억제"><a href="#즉시실행함수를-이용한-전역변수-사용-억제" class="headerlink" title="즉시실행함수를 이용한 전역변수 사용 억제"></a>즉시실행함수를 이용한 전역변수 사용 억제</h2><ul><li>즉시실행함수를 사용하면 전역변수를 만들지 않게 되어 라이브러리에 자주 이용된다. 실행함수가 실행된 후 해당 함수는 바로 전역에서 사라진다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;변수에의-접근성과-생존기간-life-cycle&quot;&gt;&lt;a href=&quot;#변수에의-접근성과-생존기간-life-cycle&quot; class=&quot;headerlink&quot; title=&quot;변수에의 접근성과 생존기간 (life-cycle)&quot;&gt;&lt;/a&gt;변수에의 접근성과
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 10. 프로토타입과 객체지향 (Prototype)</title>
    <link href="http://girin-dev.github.io/2017/10/08/JavaScript-10-Prototype/"/>
    <id>http://girin-dev.github.io/2017/10/08/JavaScript-10-Prototype/</id>
    <published>2017-10-08T13:19:07.000Z</published>
    <updated>2017-10-09T16:49:19.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-10-프로토타입과-객체지향-Prototype"><a href="#JavaScript-10-프로토타입과-객체지향-Prototype" class="headerlink" title="JavaScript 10. 프로토타입과 객체지향 (Prototype)"></a>JavaScript 10. 프로토타입과 객체지향 (Prototype)</h1><ul><li>보통 객체지향언어는 클래스를 사용해서 상속으르 구현. 그러나 자바스크립트는 프로토타입으로 함.<h2 id="프로토타입-객체"><a href="#프로토타입-객체" class="headerlink" title="프로토타입 객체"></a>프로토타입 객체</h2></li><li>모든 객체의 prototype 종점은 Object.prototype<h2 id="Prototype-프로퍼티-vs-prototype-프로퍼티"><a href="#Prototype-프로퍼티-vs-prototype-프로퍼티" class="headerlink" title="[[Prototype]] 프로퍼티 vs prototype 프로퍼티"></a>[[Prototype]] 프로퍼티 vs prototype 프로퍼티</h2></li></ul><h2 id="constructor-프로퍼티"><a href="#constructor-프로퍼티" class="headerlink" title="constructor 프로퍼티"></a>constructor 프로퍼티</h2><ul><li>constructor는 생모를 찾아가는 과정<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">me.constructor</div><div class="line">=&gt; __proto__</div><div class="line">=&gt; Person.prototype.constructor === Person 생성자 함수</div></pre></td></tr></table></figure></li></ul><h2 id="Prototype-chain"><a href="#Prototype-chain" class="headerlink" title="Prototype chain"></a>Prototype chain</h2><ul><li>객체 리터럴로 생성한 인스턴스와 생성자 함수로 생성한 인스턴스는 prototype chain이 다르다. 따라서 prototype을 활용하고 싶다면 ‘생성자 함수를 통한 인스터스 생성’을 해야 한다.</li><li>왜 생성자 함수를 통한 인스턴스 생성을 해야하나? 라는 질문에 대한 답이 된다.<h2 id="프로토타입-객체의-확장"><a href="#프로토타입-객체의-확장" class="headerlink" title="프로토타입 객체의 확장"></a>프로토타입 객체의 확장</h2></li></ul><h2 id="기본자료형-Primitive-data-type-의-확장"><a href="#기본자료형-Primitive-data-type-의-확장" class="headerlink" title="기본자료형(Primitive data type)의 확장"></a>기본자료형(Primitive data type)의 확장</h2><ul><li>new String() -&gt; 문자열을 객체로 갖는 객체 생성자 함수.</li><li>문자열.constructor === String이 가능한 건 자바스크립트가 연관 객체(String())로 일시적으로 변환되어 프로토타입 객체를 공유하기 때문</li><li>기본자료형 뒤에 점을 찍고 메소드를 적으면 자바스크립트가 내부적으로 관련한 객체로 변환하여 작동시키고, 작동이 끝나면 다시 기본자료형으로 돌려놓음.</li><li>빌트인을 건드려서 관련 모든 인스턴스에 영향을 미칠 수 있는 나만의 메소드를 만들 수 있는데… 이것은 비추! 관대한 자바스크립트의 특성을 볼 수 있는 부분.(다른 언어들은 빌트인을 아예 못 건드리게 하는게 보통)</li></ul><h2 id="프로토타입-객체의-변경"><a href="#프로토타입-객체의-변경" class="headerlink" title="프로토타입 객체의 변경"></a>프로토타입 객체의 변경</h2><ul><li>자바스크립트는 클래스를 활용하는 자바와 같지 않은데… 자바처럼 쓸 수 없을까? 라는 생각으로 나온 꼼수. 이후에 ES6에서 클래스를 아예 추가해줬다. 물론 이것도 내부적으로는 프로토타입개념으로 작동</li><li>권장하는 방식은 아님</li><li>constructor 연결이 깨짐.<h2 id="프로토타입-체인-동작-조건"><a href="#프로토타입-체인-동작-조건" class="headerlink" title="프로토타입 체인 동작 조건"></a>프로토타입 체인 동작 조건</h2></li><li>객체의 프로퍼티를 참조하는 경우, 해당 객체에 프로퍼티가 없는 경우, 프로토타입 체인이 동작한다.</li><li>객체의 프로퍼티에 값을 할당하는 경우, 프로토타입 체인이 동작하지 않는다.  이미 찾았는데 뭐하러 프로토타입에 올라가겠음</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-10-프로토타입과-객체지향-Prototype&quot;&gt;&lt;a href=&quot;#JavaScript-10-프로토타입과-객체지향-Prototype&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 10. 프로토타입과 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-09-Function</title>
    <link href="http://girin-dev.github.io/2017/10/08/JavaScript-09-Function/"/>
    <id>http://girin-dev.github.io/2017/10/08/JavaScript-09-Function/</id>
    <published>2017-10-08T13:18:13.000Z</published>
    <updated>2017-10-09T14:08:48.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="함수-Function"><a href="#함수-Function" class="headerlink" title="함수 (Function)"></a>함수 (Function)</h1><ul><li>특정 작업 수행을 위해 구문들을 그룹화해 놓은 개념.</li><li>코드의 재사용</li><li>객체 생성, 객체의 행위 지정(메소드), 정보의 구성/은닉, 클로저, 모듈화 등 여러 기능 수행</li><li>함수도 객체의 일부이며 변수나 객체, 배열 등에 저장할 수 있고, 인수 및 반환값으로도 기능할 수 있다.(일급객체의 특징)</li></ul><h2 id="함수-정의-방법-3가지-암기"><a href="#함수-정의-방법-3가지-암기" class="headerlink" title="함수 정의 방법 3가지(암기)"></a>함수 정의 방법 3가지(암기)</h2><ul><li>함수를 정의하는 방식<ol><li>함수선언식 (Function declaration)</li><li>함수표현식 (Function expression)hd</li><li>Function() 생성자 함수</li></ol></li></ul><ol><li>함수선언식 (Function declaration)</li></ol><ul><li>내부적으로 변수명과 함수명을 똑같이 만든 함수표현식으로 인식한다.</li><li>호이스팅에서 함수표현식과 차이가 나는데, 정의되는 위치와 무관하게 어디서든 호출할 수 있다. 반면 함수표현식은 변수 호이스팅 발생.</li><li>함수명을 생략할 수 없고 0개 이상의 매개변수(자료형 미정으로 함수 몸체에서 자료형 체크 필요) 실행 구문을 갖는다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num + num;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ol><li>함수표현식 (Function expression)</li></ol><ul><li>함수는 일급객체로서의 특징을 갖는다</li><li>함수를 정의하고 변수에 할당하는 방식</li><li><p>아래 식에서 함수명 plus는 함수 안에서면 유요한 이름.(재귀적이거나 디버깅에만 쓰임)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 기명 함수표현식(이름붙은 함수 표현식)</span></div><div class="line"><span class="comment">// 호출시 함수명이 아니라 변수명으로 해야한다.</span></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 익명 함수표현식(이름없는 함수 포현식)</span></div><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(bar(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(plus(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// Uncaught ReferenceError: plus is not defined</span></div></pre></td></tr></table></figure><p>&lt;!– * 함수표현식을 다른 변수로 새로 할당하면 객체인 함수의 특성상 동일한 참조값을 갖는다.</p></li><li>일반 객체와 달리 다른 변수를 재할당하면 다른 값을 갖도록 할당된다(?) 재공부 필요.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a * b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = foo;</div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">2</span>, <span class="number">5</span>), bar(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// 10 10</span></div><div class="line"><span class="built_in">console</span>.log(foo === bar); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">2</span>, <span class="number">5</span>), bar(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// 7 10</span></div><div class="line"><span class="built_in">console</span>.log(foo === bar); <span class="comment">// false</span></div><div class="line"><span class="string">``</span><span class="string">` --&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3. Function() 생성자 함수</span></div><div class="line"><span class="string">* 내부적으로 함수선언식은 함수표현식으로 처리되고, 함수표현식은 Function() 생성자 함수로 처리된다. 결국 앞의 두 방법은 3번의 방법을 쓰기 편하게 만들어 놓은 것.</span></div><div class="line"><span class="string">* 성능 이슈와 함수의 호이스팅을 고려했을때 함수 표현식을 쓰는게 좋다.</span></div><div class="line"><span class="string">`</span><span class="string">``</span>javascript</div><div class="line"><span class="keyword">new</span> <span class="built_in">Function</span>([매개변수<span class="number">1</span>], [매개변수<span class="number">2</span>], ... [매개변수N], [함수 몸체] )</div><div class="line"><span class="keyword">var</span> cup = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'number'</span>, <span class="string">'return number + number'</span>);</div><div class="line"><span class="built_in">console</span>.log(cup(<span class="number">10</span>)); <span class="comment">// 20</span></div></pre></td></tr></table></figure></li></ul><h2 id="함수-호이스팅-Function-Hoisting"><a href="#함수-호이스팅-Function-Hoisting" class="headerlink" title="함수 호이스팅 (Function Hoisting)"></a>함수 호이스팅 (Function Hoisting)</h2><ul><li>호이스팅이란 var나 function 등의 선언문을 해당 Scope의 맨 위로 옮기는 것.</li><li>자바스크립트 엔진이 스크립트 로딩되는 그 시점에 바로 함수선언식으로 정의된 함수를 한번에 선언, 초기화, 할당해버린다. (VO, variable object에 저장)</li><li><p>이 때문에 <strong>함수선언식</strong> 의 경우 어디에서 선언하든 호출이 가능하다. 그러나 이런 식의 코드는 비추.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 함수선언식</span></div><div class="line"><span class="keyword">var</span> foo = plus(<span class="number">5</span>,<span class="number">6</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line"> <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>ES6는 <code>let</code>, <code>const</code>를 포함한 모든 선언(var, let, const, function, class)를 호이스팅</p></li><li><strong>함수표현식</strong> 은 변수 호이스팅이 발생하기 때문에 변수 생성, undefined으로 초기화만 진행되고, 선언할 때 할당된다. 스크립트 로딩 시점에 VO에 함수를 할당하는 함수선언식과 구분.</li><li>우리의 논리적 직관에 맞지 않고 VO에 부담을 주는 함수선언식보다 함수표현식을 쓸 것을 추천(Douglas Crockford)</li></ul><h2 id="First-class-object-일급객체"><a href="#First-class-object-일급객체" class="headerlink" title="First-class object (일급객체)"></a>First-class object (일급객체)</h2><ul><li>일급객체의 조건<blockquote><ol><li>무명의 리터럴로 표현 가능</li><li>변수나 자료구조(객체, 배열..)에 저장 가능</li><li>함수의 파라미터로 전달 가능<br>함수의 인자로 다른 함수를 넣을 수 있다.(콜백함수)</li><li>반환값(return value)으로 사용 가능<br>이렇게 짜여진 남의 코드를 독해할 줄 알아야 한다.</li></ol></blockquote></li><li>javascript 함수는 일급객체</li><li>다른 객체와 구별되는 특징: 호출 가능</li></ul><h2 id="매개변수-Parameter-인자"><a href="#매개변수-Parameter-인자" class="headerlink" title="매개변수 (Parameter, 인자)"></a>매개변수 (Parameter, 인자)</h2><p>  함수내 변수와 동일하게 작동</p><ul><li><p>매개변수 (Parameter, 인자)와 인수(argument)</p><ul><li>매개변수는 인수가 할당된 파라미터에 할당된 것.</li><li>인수를 전달받지 못한 매개변수는 undefined로 초기화된다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">p1, p2</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(p1, p2);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">1</span>); <span class="comment">// 1 undefined</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Call-by-value</p><ul><li>기본자료형의 동작방식</li><li>함수 호출시 기본자료형 인수를 매개변수로 전달할 때, 매개변수에 값을 복사하여 함수로 전달하는 방식</li><li>따라서 함수 내에서 전달된 인수의 값이 변경되었다고 해도 전달이 완료된 기본자료형 값은 변경되지 않는다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">primitive</span>)</span>&#123;</div><div class="line">  primitive += <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> primitive;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo(x)); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 0</span></div><div class="line"><span class="comment">// 함수 foo를 통해 함수 내 인수(x)의 값이 변경되었으나 기존의 기본자료형 전역변수인 x는 그대로 0이다.</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Call-by-reference</p><ul><li>함수의 인자(매개변수)에 외부의 객체를 전달했을때, 해당 함수에서 객체의 값이 변경되면, 외부의 원래 객체의 값도 같이 변경된다. (객체는 변경가능하니까)</li><li><p>Pass-by 와 동일한 작동. pass와 call는 용어가 다르지만 사용처의 차이일 뿐.(pass는 변수, call은 함수)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeVal</span>(<span class="params">primitive, obj</span>)</span>&#123;</div><div class="line">  primitive += <span class="number">10</span>;</div><div class="line">  obj.name = <span class="string">'Yi'</span>;</div><div class="line">  obj.gender = <span class="string">'male'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> objt = &#123;</div><div class="line">  name: <span class="string">'Park'</span>,</div><div class="line">  gender: <span class="string">'female'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 100;</span></div><div class="line"><span class="built_in">console</span>.log(objt); <span class="comment">// Object &#123;name: 'Park', gender: 'female'&#125;</span></div><div class="line"></div><div class="line">changeVal(num, objt);</div><div class="line"></div><div class="line"><span class="comment">// 함수를 통해 매개변수로 받은 인수를 변경하면</span></div><div class="line"><span class="comment">// num은 기본자료형으로 그 값이 변하지 않지만</span></div><div class="line"><span class="comment">// objt는 객체로 그 값이 변한다.</span></div><div class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 100;</span></div><div class="line"><span class="built_in">console</span>.log(objt); <span class="comment">// Object &#123;name: 'Yi', gender: 'male'&#125;</span></div></pre></td></tr></table></figure></li><li><p>순수함수와 비순수함수</p><ul><li>순수함수<br>외부에 영향을 주지 않는 함수</li><li>비순수 함수<br>위 <code>changeVal</code>과 같이 외부에 영향을 주는 함수<br>외부 객체를 인자로 갖고 있는 함수일 확률이 높고 의도치 않은 값의 변경이 나타날 수 있음.<br>즉, 코드의 예측성을 떨어뜨림.</li></ul></li></ul></li></ul><h2 id="반환값-return-value"><a href="#반환값-return-value" class="headerlink" title="반환값 (return value)"></a>반환값 (return value)</h2><ul><li><code>return</code>을 만나면 함수 진행을 중단하고 함수를 호출한 코드로 되돌아간다.</li><li><code>return</code>이 없으면 <code>undefined</code>을 반환.</li><li>비순수함수의 경우 의도적으로 return을 생략하기도 한다. (외부 값 변경을 막기 위해서)</li></ul><h2 id="함수의-객체-프로퍼티"><a href="#함수의-객체-프로퍼티" class="headerlink" title="함수의 객체 프로퍼티"></a>함수의 객체 프로퍼티</h2><ul><li>함수도 객체이기 때문에 프로퍼티를 갖는다.</li><li>일반 객체와 달리 함수만의 표준 프로퍼티를 갖는다.</li><li>arguments, caller, length, name, prototype, __proto__</li></ul><ol><li>arguments</li></ol><ul><li><p>유사 배열 객체(순회가능)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(multiply());     <span class="comment">// &#123;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(multiply(<span class="number">1</span>));    <span class="comment">// &#123; '0': 1 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(multiply(<span class="number">1</span>,<span class="number">2</span>));  <span class="comment">// &#123; '0': 1, '1': 2 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(multiply(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));<span class="comment">// &#123; '0': 1, '1': 2, '2': 3 &#125;</span></div></pre></td></tr></table></figure></li><li><p>여기서 ‘0’은 프로퍼티명, 1은 프로퍼티값. 프로퍼티명을 0,1,2,3,…. 이런 순서로 갖고 있기 때문에 배열처럼 쓰이는 객체다~라고하면서 유사배열객체라고 한다.</p></li><li><p>매개변수를 몇개 받아야 할지 판단할 수 없거나 이용자의 판단에 맡겨야 하는 상황이라면, 이때 아예 매개변수를 의도적으로 쓰지 않고 유사배열객체인 arguments를 사용한다. 이를 가변 인자 함수 구현이라고 한다.</p></li></ul><ol><li>caller</li></ol><ul><li>자신을 호출한 함수 의미</li></ul><ol><li>length</li></ol><ul><li>매개변수의 갯수</li></ul><ol><li>name</li></ol><ul><li>함수명</li><li>익명함수의 경우 빈 문자열을 값으로 가짐</li></ul><ol><li>__proto__</li></ol><ul><li>프로토타입 체인, [[Prototype]] 프로퍼티</li><li>자식에게 없으면 생성자함수로 가는게 아니라 부모를 찾아간다. 엄밀히 말하면 부모-자식관계가 아니라 부모 역할을 하는 프로토타입 객체를 찾는데 거기도 없으면 쭉 찾아서 Object prototype까지 가서 있으면 출력, 없으면 Reference Error 출력.</li></ul><ol><li>prototype</li></ol><ul><li>함수 객체만이 갖고 있는 프로퍼티(객체지향의 근간)</li><li><p>함수 객체가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 객체를 가리킨다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[객체생성자함수명].prototype.[프로퍼티명]= “[어떤값]”</div></pre></td></tr></table></figure></li><li><p>위 코드의 경우 실행결과가 [객체생성자함수명]이 만든 모든 인스턴스에 동시에 적용이 된다. 공통적인 내용을 다수의 인스턴스가 적용할 때 하나하나 일일히 인스턴스마다 추가해 주는 것은 비효율적이기 때문에 사용된다. 예를 들면 Person.prototype이라는 부모에 sayHello= “[어떤값]” 을 추가해놓으면 알아서 자동으로 모든 인스턴스가 해당 값을 갖게 된다.</p></li></ul><h2 id="함수의-다양한-형태"><a href="#함수의-다양한-형태" class="headerlink" title="함수의 다양한 형태"></a>함수의 다양한 형태</h2><ul><li><p>즉시호출함수표현식(IIFE, Immediately Invoke Function Expression)</p><ul><li>최초 한번만 호출되어 재호출 불가.</li><li>초기화 처리 등에 사용.</li><li>변수명 충돌을 방지하는 목적으로도 사용.(jQuery 등 여러 라이브러리의 변수들의 변수명 충돌 방지)</li><li>서버같은거 설정 바뀌면 껏다 켜야 하는데 이 경우가 설정파일을 실행 후 딱 한번만 읽게 하는 것으로 이 경우에 사용가능.</li><li>전역변수로 골머리를 앓는데 이때도 유용. 전역변수를 하나도 안 쓸 수 있음.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 기명 즉시실행함수(named immediately-invoked function expression)</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">namedFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">4</span>;</div><div class="line">  <span class="keyword">return</span> a * b;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// 익명 즉시실행함수(immediately-invoked function expression)</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">4</span>;</div><div class="line">  <span class="keyword">return</span> a * b;</div><div class="line">&#125;());</div></pre></td></tr></table></figure></li></ul></li><li><p>내부함수 (Inner function)</p><ul><li>전역/지역 구분 필요</li><li>함수 내부에 정의된 함수</li><li>내부함수(자식)는 부모함수의 변수에 접근할 수 있다.</li><li>부모함수는 자식함수의 변수에 접근할 수 없다.</li><li>내부함수는 부모함수 외부에서 접근할 수 없다.</li></ul></li><li><p>콜백함수 (Callback function)</p><ul><li>명시적 호출이 아닌 특정 이벤트 발생시 시스템에 의해 호출되는 함수</li><li>이벤트 핸들러가 대표적인 예</li><li>비동기식 처리 모델에 사용(처리가 종료되었을때 호출될 함수(콜백함수)를 미리 매개변수에 전달해 놓았다가, 실제 처리가 종료되면 콜백함수 호출)<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"myButton"</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 특정 이벤트(클릭)이 발생했을때 시스템에 의해 호출.</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);</span></div><div class="line"><span class="javascript">    button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'button clicked!'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;함수-Function&quot;&gt;&lt;a href=&quot;#함수-Function&quot; class=&quot;headerlink&quot; title=&quot;함수 (Function)&quot;&gt;&lt;/a&gt;함수 (Function)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;특정 작업 수행을 위해 구문들을 그룹화해 놓
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-07-Object</title>
    <link href="http://girin-dev.github.io/2017/10/07/JavaScript-07-Object/"/>
    <id>http://girin-dev.github.io/2017/10/07/JavaScript-07-Object/</id>
    <published>2017-10-07T05:00:58.000Z</published>
    <updated>2017-10-09T03:15:08.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-07-객체-Object"><a href="#JavaScript-07-객체-Object" class="headerlink" title="JavaScript 07. 객체(Object)"></a>JavaScript 07. 객체(Object)</h1><ul><li>자바스크립트에서 기본자료형(문자열, 숫자, Boolean, null, undefined, symbol)을 제외한 모든 값들은 객체</li></ul><h2 id="객체-Object-란"><a href="#객체-Object-란" class="headerlink" title="객체(Object)란?"></a>객체(Object)란?</h2><ul><li>property(데이터-이름(키)과 값)와 method(행위)로 구성되어 있고, 갖고 있는 데이터를 활용하게 하는 것을 포함한 것.</li><li><p>객체 간의 상속관계를 통해 각 개체들에 프로퍼티와 메소드를 쓰는 불필요한 중복을 방지할 수 있다.</p></li><li><p>프로퍼티 (Property)</p><ul><li>프로퍼티 명명법: 변수명과 다르게 빈 문자열이나 숫자로 시작해도 무관.</li><li>프로퍼티 값: <code>undefined</code>는 오지 못함(<code>undefined</code>는 값을 할당하지 않은 경우 강제적으로 할당하는 것으로 객체의 정보를 담고 있지 않은 객체로서의 프로퍼티는 존재의 의미가 없다. 따라서 <code>undefined</code>을 쓰면 syntax error 발생. 관련 링크 <a href="http://insanehong.kr/post/javascript-object/" target="_blank" rel="external">http://insanehong.kr/post/javascript-object/</a>)</li></ul></li><li><p>메소드 (Method)</p><ul><li>프로퍼티 값에 일반 값이 아닌 함수가 오면 메소드가 됨.</li></ul></li></ul><h2 id="객체-생성-방법-암기"><a href="#객체-생성-방법-암기" class="headerlink" title="객체 생성 방법(암기)"></a>객체 생성 방법(암기)</h2><p>  객체를 마음대로 언제든지 바꿀 수 있다는 것이 자바스크립트의 장점.</p><ul><li>객체 생성 방법 3가지<ol><li>객체 리터럴</li><li>Object() 생성자 함수</li><li>생성자 함수</li></ol></li></ul><ol><li><strong>객체리터럴</strong></li></ol><ul><li>내부적으로 2번 방식으로 처리하며, 쓰기 편하라고 만들어 놓은 편의기능.</li><li><p>선언과 동시에 인스턴스 생성.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> [객체명] = &#123;</div><div class="line">  [프로퍼티명]: [프로퍼티값];</div><div class="line">  [프로퍼티명]: [함수(메소드)];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> girin = &#123;</div><div class="line">  location: <span class="string">'Seoul'</span>,</div><div class="line">  computer: <span class="string">'MacBook Pro'</span>,</div><div class="line">  saySth: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'I live in '</span>+ <span class="keyword">this</span>.location)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ol><li>Object() 생성자 함수</li></ol><ul><li>new 연산자와 Object() 생성자 함수를 이용해 빈 객체를 생성하고 여기에 프로퍼티와 메소드를 추가하는 방법.</li><li>특별한 이유가 없다면 1. 객체리터럴 방식이 더 유용.(어차피 내부 작동방식은 동일)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> [객체명] = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">[객체명].[프로퍼티명] = [프로퍼티값];</div><div class="line">[객체명].[프로퍼티명] = [함수(메소드)];</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> girin = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">girin.cafe = <span class="string">'americano'</span>;</div><div class="line">girin.coffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'I like '</span> + <span class="keyword">this</span>.cafe)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ol><li>생성자 함수</li></ol><ul><li>중복된 객체를 다수 만들어야 할 경우(중복된 인스턴스가 많을 경우) 사용.</li><li><p>생성자 함수명은 일반적으로 대문자로 시작(암묵적 약속, 일반 함수와의 혼란을 방지)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 내용을 채운 객체(생성자 함수) 생성</span></div><div class="line">function [생성자함수명]([인자값1],[인자값2])&#123;</div><div class="line">  <span class="keyword">this</span>.[프로퍼티명] = [인자값<span class="number">1</span>];</div><div class="line">  <span class="keyword">this</span>.[프로퍼티명] = [인자값<span class="number">2</span>];</div><div class="line">  <span class="keyword">this</span>.[프로퍼티명] = [함수(메소드)]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 정의한 생성자 함수를 이용해 인스턴스 생성</span></div><div class="line"><span class="keyword">var</span> [객체명] = <span class="keyword">new</span> [생성자함수명]([인자값<span class="number">1</span>], [인자값<span class="number">2</span>]);</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Seoulian</span>(<span class="params">name, gender</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> married = <span class="literal">true</span>; <span class="comment">// private</span></div><div class="line">  <span class="keyword">this</span>.name = name; <span class="comment">// public</span></div><div class="line">  <span class="keyword">this</span>.gender = gender;</div><div class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi! I\'m Seoulian, '</span> + <span class="keyword">this</span>.name)</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> seoulian1 = <span class="keyword">new</span> Seoulian(<span class="string">'girin'</span>, <span class="string">'female'</span>);</div><div class="line"><span class="keyword">var</span> seoulian2 = <span class="keyword">new</span> Seoulian(<span class="string">'owl'</span>, <span class="string">'male'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(seoulian1.name); <span class="comment">// 'girin'</span></div><div class="line"><span class="built_in">console</span>.log(seoulian1.married); <span class="comment">// undefined</span></div></pre></td></tr></table></figure></li><li><p>이때 <code>this</code>는 생성자 함수로 생성될 인스턴스를 가르키며 외부에서 참조 가능하다.(public)</p></li><li>반면 <code>var</code>는 생성자 함수 안에서 선언된 지역 변수로서 외부에서 접근 불가능하다.(private)</li></ul><h2 id="객체-프로퍼티-접근"><a href="#객체-프로퍼티-접근" class="headerlink" title="객체 프로퍼티 접근"></a>객체 프로퍼티 접근</h2><p>  이미 생성한 프로퍼티를 어떻게 쓸 것인가에 대한 문제</p><ul><li><p>프로퍼티 이름</p><ul><li>프로퍼티명은 사실 문자열이기 때문에 ‘’를 붙여줘야 하지만 자바스크립트에서 생략 가능.</li><li>그러나 <code>-</code>와 같이 연산자로 착각할 수 있는 문자열이 프로퍼티명에 있을 경우 ‘’를 반드시 써줘야 함. (케밥케이스) 그래서 그냥 캐멀케이스나 스네이크케이스를 쓰든지 해라.</li><li>‘’로 처리된 프로퍼티명은 외부에서 접근시 [‘’]로만 접근 할 수 있음. 안 붙이면 프로퍼티가 아닌 변수로 인식.</li><li>자바스크립트에서 이미 약속되어 있는 <code>예약어</code>도 가급적 피할 것.</li></ul></li><li><p>프로퍼티 읽기</p><ul><li>마침표 표기법</li><li>대괄호 표기법<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> seoulian = &#123;</div><div class="line">  <span class="string">'location'</span>: <span class="string">'gangnamgu'</span>,</div><div class="line">  <span class="string">'former-job'</span> : <span class="string">'teacher'</span>,</div><div class="line">  gender: <span class="string">'etc'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// console.log()를 빼고 입력하면 출력시 ''를 포함</span></div><div class="line"><span class="comment">// 마침표 표기법</span></div><div class="line"><span class="built_in">console</span>.log(seoulian.former-job); <span class="comment">// ReferenceError: job is not defined</span></div><div class="line"><span class="built_in">console</span>.log(seoulian[former-job]); <span class="comment">// ReferenceError: former is not defined</span></div><div class="line"><span class="built_in">console</span>.log(seoulian[<span class="string">'former-job'</span>]); <span class="comment">// teacher</span></div><div class="line"><span class="comment">// 대괄호 표기법</span></div><div class="line"><span class="built_in">console</span>.log(seoulian.location); <span class="comment">// gangnamgu</span></div><div class="line"><span class="built_in">console</span>.log(seoulian[location]); <span class="comment">// undefined(브라우저), ReferenceError: location is not defined(node.js)</span></div><div class="line"><span class="built_in">console</span>.log(seoulian[<span class="string">'location'</span>]); <span class="comment">// gangnamgu</span></div></pre></td></tr></table></figure></li></ul></li><li><p>프로퍼티 값 갱신</p><ul><li>변수의 재할당과 동일한 원리로 갱신(복사 후 참조 변경)</li><li>동일한 원리인 이유는 객체는 변경가능하나 객체 내의 프로퍼티들은 변경불가한 기본형이기 때문.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> seoulian = &#123;</div><div class="line">  <span class="string">'location'</span>: <span class="string">'gurogu'</span>,</div><div class="line">  <span class="string">'former-job'</span>: <span class="string">'teacher'</span>,</div><div class="line">  gender: <span class="string">'etc'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">seoulian[<span class="string">'former-job'</span>] = <span class="string">'soldier'</span>;</div><div class="line"><span class="built_in">console</span>.log(seoulian[<span class="string">'former-job'</span>]); <span class="comment">// soldier</span></div></pre></td></tr></table></figure></li></ul></li><li><p>프로퍼티 동적 생성</p><ul><li>객채가 이미 갖고 있지 않은 프로퍼티라도 값을 할당하면 객체에 해당 프로퍼티를 추가하고 값을 할당함.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> seoulian = &#123;</div><div class="line">  <span class="string">'location'</span>: <span class="string">'jongrogu'</span>,</div><div class="line">  <span class="string">'former-job'</span>: <span class="string">'ironman'</span>,</div><div class="line">  gender: <span class="string">'female'</span>,</div><div class="line">&#125;</div><div class="line">seoulian.age = <span class="number">62</span>;</div><div class="line"><span class="built_in">console</span>.log(seoulian.age); <span class="comment">// 62</span></div></pre></td></tr></table></figure></li></ul></li><li><p>프로퍼티 삭제</p><ul><li><code>delete</code> 연산자 활용<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> [객체명].[프로퍼티명] <span class="comment">// 프로퍼티 삭제</span></div><div class="line"><span class="keyword">delete</span> [객체명] <span class="comment">// 그냥 무시됨.</span></div><div class="line"><span class="comment">// 객체를 삭제한다는 것은 참조값을 삭제한다는 것으로 [객체명]이 null을 참조하게 해야한다는 것이다. 일반적인 의미로 ''객체를 삭제한다'라는 것 자체가 모순.</span></div></pre></td></tr></table></figure></li></ul></li><li><p>for-in문 / for-of문</p><ul><li><code>for-in문</code> 객체 내 모든 프로퍼티에 대한 루프(loop)를 수행하게 함.<br>프로퍼티 갯수만큼 알아서 순회한다.<br>그러나 프로퍼티의 순서를 보장하지 않는다.(객체는 동적할당이라는 개념이 있기 때문).<br>여간하면 쓴 순서대로 나오지만 그렇게 나오지 않는 경우가 존재한다는 뜻.\<br>따라서 배열에서는 쓰지 않는 것을 추천.</li><li><code>for-of문</code> 배열 내 모든 요소에 대한 루프(loop)를 수행하게 함.<br>배열은 순서가 중요하기 때문에 ES6에서 새롭게 추가되었다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> seoulian = &#123;</div><div class="line">  <span class="string">'first-name'</span>: <span class="string">'girin'</span>,</div><div class="line">  <span class="string">'last-name'</span>: <span class="string">'dev'</span>,</div><div class="line">  gender: <span class="string">'male'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// for-in문</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> seoulian) &#123;</div><div class="line">  <span class="built_in">console</span>.log(prop + <span class="string">': '</span> + seoulian[prop]);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">first-name: girin</span></div><div class="line"><span class="comment">last-name: dev</span></div><div class="line"><span class="comment">gender: male</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">// for-of문</span></div><div class="line"><span class="keyword">var</span> array = [<span class="string">'남'</span>,<span class="string">'한'</span>,<span class="string">'산'</span>,<span class="string">'성'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">남</span></div><div class="line"><span class="comment">한</span></div><div class="line"><span class="comment">산</span></div><div class="line"><span class="comment">성</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Pass-by-reference"><a href="#Pass-by-reference" class="headerlink" title="Pass-by-reference"></a>Pass-by-reference</h2><ul><li>객체는 메모리 저장시 heap이라는 방법으로 할당. heap은 차곡차곡 쌓아 순차적 저장을 하는 stack과 다르게 공간을 찾아서 분리저장하는 것.</li><li><p>object는 객체형 또는 참조형. 즉, 객체는 값을 갖고 있는게(실제값) 아니라 값을 갖고 있는 메모리의 주소를 갖고 있는 것(참조값).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = [객체];</div></pre></td></tr></table></figure></li><li><p>위와 같은 코드가 있다고 하면 <strong>전역변수 bar와 객체가 모두 정확히 같은 메모리를 가르키게 되고</strong>, 이것은 복사해서 사실상 다른 위치에 저장하게 되는 pass-by-value와 다르다.</p></li><li><strong>이 방식은 원본 객체가 다른 요소에 의해 변경될 위험을 내재하고 있다.</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 객체 리터럴 방식 생성</span></div><div class="line"><span class="keyword">var</span> jeju = &#123;</div><div class="line">  tangerine: <span class="number">10</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> seoguipo = jeju;</div><div class="line"><span class="built_in">console</span>.log(jeju.tangerine, seoguipo.tangerine); <span class="comment">// 10 10</span></div><div class="line"><span class="built_in">console</span>.log(jeju === seoguipo); <span class="comment">// true</span></div><div class="line"></div><div class="line">seoguipo.tangerine = <span class="number">20</span>;</div><div class="line"><span class="built_in">console</span>.log(jeju.tangerine, seoguipo.tangerine); <span class="comment">// 20 20</span></div><div class="line"><span class="built_in">console</span>.log(jeju === seoguipo); <span class="comment">// true</span></div><div class="line"><span class="comment">// 전역변수 seoguipo의 프로퍼티를 변경하였지만 객체 jeju의 프로퍼티도 같이 변경됨을 확일할 수 있다.</span></div></pre></td></tr></table></figure></li></ul><h2 id="Pass-by-value"><a href="#Pass-by-value" class="headerlink" title="Pass-by-value"></a>Pass-by-value</h2><ul><li>기본자료형은 값이 한번 정해지면 바뀔 수 없다.(변경불가성)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 1 1</span></div><div class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// true</span></div><div class="line"></div><div class="line">a = <span class="number">10</span>;</div><div class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 10 1</span></div><div class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// false</span></div><div class="line"><span class="comment">// 전역변수 a는 1이라는 숫자형 값을 갖고 있고, b는 마찬가지로 a와 같은 값의 숫자형 값 1을 갖고 있다. 이후 a를 10에 할당(재할당)하자 a는 10이 되지만, b는 그대로 1이다. 기본자료형의 값은 변경이 불가하며 값을 복사하여 저장한다. 즉, a와 b는 같은 1을 갖고 있지만 다른 메모리 위치를 참조하고 있다.</span></div></pre></td></tr></table></figure></li></ul><h2 id="객체의-분류"><a href="#객체의-분류" class="headerlink" title="객체의 분류"></a>객체의 분류</h2><ul><li>Object는 웹페이지 등을 표현하기 위해 이미 내장되어 있는 Built-in Object(내장객체)와 사용자가 임의로 생성할 수 있는 Host Object(사용자 정의 객체)를 갖고 있다.</li><li>Built-in Object에는 Standard Built-in Objects (or Global Objects), BOM (Browser Object Model), DOM (Document Object Model)이 있다.</li><li>이 중 BOM와 DOM을 묶어 Native Object라고 하는데 이것은 브라우저(클라이언트)에 존재.(node에는 없다.)</li><li>자바스크립트는 DOM을 컨트롤하는 것.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-07-객체-Object&quot;&gt;&lt;a href=&quot;#JavaScript-07-객체-Object&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 07. 객체(Object)&quot;&gt;&lt;/a&gt;JavaScript 07. 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-06.Control_Flow</title>
    <link href="http://girin-dev.github.io/2017/10/04/JavaScript-06-Control-Flow/"/>
    <id>http://girin-dev.github.io/2017/10/04/JavaScript-06-Control-Flow/</id>
    <published>2017-10-04T07:20:23.000Z</published>
    <updated>2017-10-07T05:00:13.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-06-제어문-Control-Flow"><a href="#JavaScript-06-제어문-Control-Flow" class="headerlink" title="JavaScript 06. 제어문(Control Flow)"></a>JavaScript 06. 제어문(Control Flow)</h1><ul><li><strong>제어문(조건문과 반복문)</strong> 에 의한 흐름제어로 데이터 흐름을 제어</li><li>조건에 따른 명령 실행(조건문)과 반복 실행(반복문)이며 일반적으로 순차적으로 진행되는 코드의 진행을 변경하고 조건과 실행여부 등을 변경, 반복할 수 있다.</li></ul><h2 id="블록-구문-Block-statement"><a href="#블록-구문-Block-statement" class="headerlink" title="블록 구문 (Block statement)"></a>블록 구문 (Block statement)</h2><ul><li><code>{ }</code> 구문의 기본</li><li>함수는 함수 선언 단계에서 실행되지 않고 호출을 할 때에만 실행된다.</li><li>자바스크립트에서 지역변수는 함수에만 적용된다. (Scope)</li></ul><h2 id="조건문-Conditional-statement"><a href="#조건문-Conditional-statement" class="headerlink" title="조건문 (Conditional statement)"></a>조건문 (Conditional statement)</h2><ul><li><p><code>if문</code></p><ul><li>[조건식]이 <code>true</code>일 경우 특정 코드블록을 실행한다.</li><li><code>else if</code>와 <code>else</code>는 생략해도 코드는 실행된다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([조건식<span class="number">1</span>])&#123;</div><div class="line">  <span class="comment">// 조건식1이 true일 경우 이 코드불록을 실행.</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ([조건식<span class="number">2</span>]) &#123;</div><div class="line">  <span class="comment">// 조건식1이 false이고 조건식2가 true일 경우 이 코드블록을 실행.</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 조건식1, 조건식2가 모두 false일 경우 이 코드블록을 실행</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p><code>switch문</code></p><ul><li><code>switch</code> 변수의 값과 일치하는 <code>case</code>문 실행.</li><li><code>break</code>를 넣지 않으면 변수값과 일치하는 <code>case</code>문을 실행한 이후에도 진행하여 <code>break;</code>에 대항하는 값 반환<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> coffee = <span class="string">'americano'</span>;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (coffee) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'americano'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'coffee americano'</span>);        </div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">'cafe-latte'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'coffee cafe-latte'</span>);        </div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">'espresso'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'coffee espresso'</span>);        </div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'unknown coffee'</span>);        </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="반복문-Loop-Iteration"><a href="#반복문-Loop-Iteration" class="headerlink" title="반복문 (Loop, Iteration)"></a>반복문 (Loop, Iteration)</h2><ul><li><code>for문</code>, <code>while문</code>, <code>do while문</code></li><li><p><code>for문</code></p><ul><li>가장 일반적인 반복문</li><li>특정 조건이 거짓일 때까지 반복</li><li>내부의 식들은 선택사항. (아무 것도 선언하지 않으면 무한루프)</li><li>초기문 선언시 변수는 전역변수로 처리되어 메모리 할당(ES5의 문제점)</li><li><a href="http://poiemaweb.com/js-control-flow#31-for-문" target="_blank" rel="external">반복문 시행순서</a> 유의<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ([초기문]; [조건문]; [증감문]) &#123;</div><div class="line">  구문;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// i가 0부터 1씩 증가시킨 값을 출력하는데 5 미만까지 출력하라.</span></div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="comment">// 역으로 반복하는 것도 가능</span></div><div class="line"><span class="comment">// i가 4부터 1씩 감소시킨 값을 출력하는데 0 이상까지 출력하라.</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">4</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 출력 값은 위와 같으나 순서가 역순</span></div></pre></td></tr></table></figure></li></ul></li><li><p><code>while문</code>  </p><ul><li>조건문이 참이면 코드블록 반복(언제나 참이면 무한루프)</li><li>조건문이 언제나 참이어도 특정 조건에서 break문을 이용해 무한루프에서 탈출할 수 있다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (n &lt; <span class="number">5</span>) &#123;</div><div class="line">  n++;</div><div class="line">  x += <span class="number">1</span>;</div><div class="line">  <span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>do while문</code></p><ul><li>while문과 유사하나 조건문 확인 전 무조건 1회 실행.</li><li>현업에서 거의 쓰이지 않는다고 함.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">  i++;</div><div class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">3</span>);</div><div class="line"><span class="comment">// 0, 무조건 1회 실행된 값</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div></pre></td></tr></table></figure></li></ul></li><li><p>continue</p><ul><li>구문 실행을 스킵하고 반복문 조건문으로 이동<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">  <span class="keyword">if</span> (i &lt; <span class="number">3</span>) <span class="keyword">continue</span>;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 0,1,2는 3보다 작기 때문에 continue;에 의해 스킵.</span></div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="평가-Evaluating"><a href="#평가-Evaluating" class="headerlink" title="평가 (Evaluating)"></a>평가 (Evaluating)</h2><ul><li>조건식에 일반적 표현식(피연산자와 이항연산자) 뿐만 아니라 문자열, 숫자, 변수, 내장값(true, falsse, null, undefined, NaN, Infinity 등) 또한 들어갈 수 있음.</li><li>이때 최대한 이 조건식을 참/거짓의 boolean으로 해석하려고 노력함. 문맥에 따른 암묵적인 강제 형 변환이 이루어진다는 뜻.</li><li><p><a href="http://poiemaweb.com/js-control-flow#42-type-conversion-table" target="_blank" rel="external">Type Conversion Table</a></p></li><li><p>자료형 변환</p><ul><li>문자열(string) -&gt; 숫자(number)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">'123'</span>; <span class="comment">// '123'</span></div><div class="line">string = +string; <span class="comment">// 123</span></div><div class="line">string = string * <span class="number">1</span>; <span class="comment">// 123</span></div><div class="line">string = <span class="built_in">parseInt</span>(string); <span class="comment">// 123</span></div><div class="line">string = <span class="built_in">Number</span>(string); <span class="comment">// 123, 그러나 Number()는 형변환을 위해 만들어진 함수가 아니기 때문에 비추. 원래 Number()란 숫자를 만들어내기 위해 자바스크립트가 갖고 있는 객체.</span></div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"><span class="string">* 숫자(Number) -&gt; 문자열(string)</span></div><div class="line"><span class="string">`</span><span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> = number = <span class="number">123</span>; <span class="comment">// 123</span></div><div class="line">number = number + <span class="string">''</span>; <span class="comment">// '123'</span></div><div class="line">number = number.toString(); <span class="comment">// '123'</span></div><div class="line">number = <span class="built_in">String</span>(number) <span class="comment">// '123', 그러나 String()은 형변환을 위해 만들어진 함수가 아니기 때문에 비추. 원래 String()도 Number()와 마찬가지로 문자열를 만들어내기 위해 자바스크립트가 갖고 있는 객체.</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Truthy &amp; Falsy values</p><ul><li>왠지 <code>false</code>일 것 같은 느낌이 드는 것들은 <code>false</code> 처리된다.(Falsy values)</li><li><code>false</code></li><li><code>undefined</code></li><li><code>null</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code></li><li>이외의 값과 객체들은 모두 <code>true</code>로 처리. (Truthy values)</li></ul></li><li><p>Checking equality</p><ul><li>두 값을 비교할 때에는 동등연산자(==, !=)보다 일치연산자(===, !==)을 사용</li><li>의도치 않은 결과와 복잡성, 예측성을 때문.</li></ul></li><li>Checking existence<ul><li>객체나 배열이 값을 갖고 있으면 truthy value로 취급되는데 이를 통해 존재여부를 확인할 수 있다.(빈 객체나 배열도 <code>true</code> 취급, 그러나 빈 문자열은 <code>false</code>)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-06-제어문-Control-Flow&quot;&gt;&lt;a href=&quot;#JavaScript-06-제어문-Control-Flow&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 06. 제어문(Control Flow)
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>171004-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/04/171004-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/04/171004-TIL/</id>
    <published>2017-10-04T06:39:30.000Z</published>
    <updated>2017-10-04T07:19:44.102Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171003-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/04/171003-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/04/171003-TIL/</id>
    <published>2017-10-04T06:39:23.000Z</published>
    <updated>2017-10-04T07:19:44.995Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>171002-TIL</title>
    <link href="http://girin-dev.github.io/2017/10/02/171002-TIL/"/>
    <id>http://girin-dev.github.io/2017/10/02/171002-TIL/</id>
    <published>2017-10-02T13:01:23.000Z</published>
    <updated>2017-10-04T07:19:45.548Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-05.Operator</title>
    <link href="http://girin-dev.github.io/2017/10/02/JavaScript-05-Operator/"/>
    <id>http://girin-dev.github.io/2017/10/02/JavaScript-05-Operator/</id>
    <published>2017-10-02T03:23:50.000Z</published>
    <updated>2017-10-04T08:22:19.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-05-연산자-Operator"><a href="#JavaScript-05-연산자-Operator" class="headerlink" title="JavaScript 05. 연산자(Operator)"></a>JavaScript 05. 연산자(Operator)</h1><ul><li>하나 혹은 그 이상의 값을 하나의 값으로 만들 때 사용한다.</li><li>값을 연산, 평가할 때 사용한다.</li></ul><h2 id="산술연산자-Arithmetic-Operator"><a href="#산술연산자-Arithmetic-Operator" class="headerlink" title="산술연산자 (Arithmetic Operator)"></a>산술연산자 (Arithmetic Operator)</h2><ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 덧셈, 뺼셈, 곱셈, 나눗셈</li><li><code>%</code> 나머지</li><li><code>++</code>, <code>--</code> 1씩 증가, 감소</li><li><code>+</code>의 특징<ul><li>연산 대상이 모두 숫자일 경우: 덧셈 수행</li><li>문자열이 포함된 경우: 문자열 연결 연산<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(a+b);</div><div class="line"><span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="string">'hello'</span>;</div><div class="line"><span class="keyword">var</span> c = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> d = <span class="literal">null</span>;</div><div class="line"><span class="keyword">var</span> e; <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> f = <span class="built_in">Symbol</span>(<span class="string">'key'</span>);</div><div class="line"></div><div class="line">a + b; <span class="comment">// '5hello'</span></div><div class="line">a + c; <span class="comment">// 6</span></div><div class="line">       <span class="comment">// (boolean true를 1로 치환해 계산, false는 0으로 치환)</span></div><div class="line">a + d; <span class="comment">// 5</span></div><div class="line">a + e; <span class="comment">// NaN</span></div><div class="line">a + f; <span class="comment">// TypeError: Cannot convert a Symbol value to a number</span></div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="대입연산자-Assignment-Operators"><a href="#대입연산자-Assignment-Operators" class="headerlink" title="대입연산자 (Assignment Operators)"></a>대입연산자 (Assignment Operators)</h2><ul><li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></li><li>원리<br>대입연산자를 보면 해석된 식을 떠올릴 수 있어야 함.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line"></div><div class="line">a += b; <span class="comment">// a = a + b;</span></div><div class="line">        <span class="comment">// 6;</span></div><div class="line">a *= b; <span class="comment">// a = a * b;</span></div><div class="line">        <span class="comment">// 8;</span></div><div class="line">a /= b; <span class="comment">// a = a / b;</span></div><div class="line">        <span class="comment">// 2;</span></div><div class="line">a %= b; <span class="comment">// a = a % b;</span></div><div class="line">        <span class="comment">// 0;</span></div></pre></td></tr></table></figure></li></ul><h2 id="비교연산자-Comparison-Operator"><a href="#비교연산자-Comparison-Operator" class="headerlink" title="비교연산자 (Comparison Operator)"></a>비교연산자 (Comparison Operator)</h2><ul><li><code>==</code>, <code>===</code>의 차이(엄격성)</li><li>관계비교 연산자: 이상, 이하 부호순서 주의</li><li><p>삼항연산자: 한 줄로 처리할 수 있을 때만 쓰고 그 이상일 경우 if문을 쓰는게 낫다.</p><p>| Operator       | Description    |<br>| :————- | :————- |<br>| ==             | 동등비교(loose equality) 최대한 비교 가능하게 형 변환후, 비교       |<br>| ===       | 일치비교(strict equality) 값의 내용 뿐만 아니라 타입까지 일치해야 true 반환       |<br>| != , !==      | 부등비교 , 불일치비교       |<br>| &gt;, &lt;, &gt;=, &lt;=     | 관계비교       |<br>| ?        | 삼항 연산자       |</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> condition = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> result = condition ? [<span class="string">'result of true'</span>] : [<span class="string">'result of false'</span>];</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="comment">// 설정된 condition이 true인가? 그럼 ['result of true']이고 false이면 ['result of false']</span></div></pre></td></tr></table></figure></li></ul><h2 id="논리연산자-Logical-Operators"><a href="#논리연산자-Logical-Operators" class="headerlink" title="논리연산자 (Logical Operators)"></a>논리연산자 (Logical Operators)</h2><ul><li>Boolean (true/false) 값을 반환하는 것이 일반적</li><li>사실 원리는 피연산자 중 하나를 반환하는 것. 연산자에 따라 뒤의 값까지 판단하여 뒤 피연산자를 반환하거나 앞의 피연산자 값만으로도 판단이 가능하여 즉시 그 값을 반환할 수 있음.(단축 평가와 연관)</li><li><code>||</code> or</li><li><code>&amp;&amp;</code> and</li><li><code>!</code> not<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span> || <span class="literal">true</span> <span class="comment">// true, 앞의 피연산자 값</span></div><div class="line"><span class="literal">true</span> || <span class="literal">false</span> <span class="comment">// true, 앞의 피연산자 값</span></div><div class="line"><span class="literal">false</span> || <span class="literal">true</span> <span class="comment">// true, 뒤의 피연산자 값</span></div><div class="line"><span class="literal">false</span> || <span class="literal">false</span> <span class="comment">// false, 뒤의 피연산자 값</span></div><div class="line"></div><div class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span> <span class="comment">// true, 뒤의 피연산자 값</span></div><div class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span> <span class="comment">// false, 뒤의 피연산자 값</span></div><div class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span> <span class="comment">// false, 앞의 피연산자 값</span></div><div class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">false</span> <span class="comment">// false, 앞의 피연산자 값</span></div><div class="line"></div><div class="line">!<span class="literal">true</span> <span class="comment">// false</span></div><div class="line">!<span class="literal">false</span> <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// true와 false로 간주되는 것들</span></div><div class="line">!<span class="number">1</span> <span class="comment">// false</span></div><div class="line">!<span class="string">'string'</span> <span class="comment">// false</span></div><div class="line">!<span class="number">0</span> <span class="comment">// true</span></div><div class="line">!<span class="literal">null</span> <span class="comment">// true</span></div><div class="line">!<span class="literal">undefined</span> <span class="comment">// true</span></div></pre></td></tr></table></figure></li></ul><h2 id="단축평가-Short-Circuit-Evaluation"><a href="#단축평가-Short-Circuit-Evaluation" class="headerlink" title="단축평가 (Short-Circuit Evaluation)"></a>단축평가 (Short-Circuit Evaluation)</h2><ul><li><p>Boolean값과 함께 사용되지 않은 논리연산자의 경우 판단근거가 되는 피연산자값을 반환한다. 이때 반환하는 피연산자값은 Boolean이 아닐 수 있다.</p><p>| 평가식 | 평가 결과     |<br>| :————- | :————- |<br>| true || anything       | true (앞)       |<br>| false || anything       | anything (뒤)       |<br>| true &amp;&amp; anything       | anything (뒤)      |<br>| false &amp;&amp; anything       | false (앞)     |</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'foo'</span> || <span class="string">'bar'</span> <span class="comment">// 'foo'</span></div><div class="line"><span class="string">'foo'</span> &amp;&amp; <span class="string">'bar'</span> <span class="comment">// 'bar'</span></div><div class="line"><span class="number">0</span> || <span class="string">'bar'</span> <span class="comment">// 'bar'</span></div><div class="line"><span class="string">'foo'</span> &amp;&amp; <span class="number">0</span> <span class="comment">// 0</span></div></pre></td></tr></table></figure><h2 id="타입-연산자-Type-Operators"><a href="#타입-연산자-Type-Operators" class="headerlink" title="타입 연산자 (Type Operators)"></a>타입 연산자 (Type Operators)</h2><ul><li><p><code>typeof()</code> 피연산자의 데이터 타입을 문자열로 출력.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 기본자료형(null 제외)</span></div><div class="line"><span class="keyword">typeof</span>(<span class="string">'girin-dev'</span>); <span class="comment">// "string"</span></div><div class="line"></div><div class="line"><span class="comment">// 함수</span></div><div class="line"><span class="keyword">typeof</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// "function"</span></div><div class="line"></div><div class="line"><span class="comment">// null, 배열 등 객체(object)</span></div><div class="line"><span class="keyword">typeof</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]); <span class="comment">// "object"</span></div><div class="line"><span class="keyword">typeof</span>(&#123;<span class="attr">name</span>:<span class="string">'girin'</span>, <span class="attr">city</span>:<span class="string">'seoul'</span>&#125;); <span class="comment">// "object"</span></div><div class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>); <span class="comment">// "object", 설계적 결함</span></div><div class="line"></div><div class="line"><span class="comment">// 선언되지 않은 변수에 대해 오류를 출력하지 않는 설계적 결함</span></div><div class="line"><span class="keyword">typeof</span>(variable_undefined); <span class="comment">// "undefined"</span></div></pre></td></tr></table></figure></li><li><p><code>instanceof()</code> 객체가 해당 객체형의 인스턴스인지 확인</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> girin = <span class="keyword">new</span> Person();</div><div class="line">girin <span class="keyword">instanceof</span> Person; <span class="comment">// true</span></div></pre></td></tr></table></figure></li></ul><h2 id=""><a href="#" class="headerlink" title="!!"></a>!!</h2><ul><li>피연산자를 불린값으로 변환.</li><li>기본자료형과 달리 객체는 빈 객체라도 존재하기만 하면 true로 변환.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">!!<span class="string">''</span>; <span class="comment">// false</span></div><div class="line">!!<span class="number">1</span>; <span class="comment">// true</span></div><div class="line"></div><div class="line">obj = &#123;&#125;;</div><div class="line">!!obj; <span class="comment">// true</span></div><div class="line">arr = [];</div><div class="line">!!arr; <span class="comment">// true</span></div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-05-연산자-Operator&quot;&gt;&lt;a href=&quot;#JavaScript-05-연산자-Operator&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 05. 연산자(Operator)&quot;&gt;&lt;/a&gt;JavaSc
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>알고리즘 퀴즈 (JavaScript, 반복문, 쉬움)</title>
    <link href="http://girin-dev.github.io/2017/10/01/Algorithm-iteration-easy/"/>
    <id>http://girin-dev.github.io/2017/10/01/Algorithm-iteration-easy/</id>
    <published>2017-10-01T06:58:46.000Z</published>
    <updated>2017-10-02T02:55:48.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="조건에-맞는-수-출력-짝수-홀수"><a href="#조건에-맞는-수-출력-짝수-홀수" class="headerlink" title="조건에 맞는 수 출력(짝수, 홀수)"></a>조건에 맞는 수 출력(짝수, 홀수)</h2><ol><li><p>for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 출력하시오.</p><ul><li>생각의 흐름: for문을 통해 1부터 10까지 값을 하나씩 얻어낸 후, if문을 활용해 각각의 값을 2로 나눈 나머지가 0인 값만을 선택해 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 8</span></div><div class="line"><span class="comment">// i를 0부터 시작할 경우 0이 출력되는 문제가 발생.</span></div><div class="line"><span class="comment">// i를 1부터 출력시키는 방법을 선택하였고, 0부터 출력시키게 한다면 if문과 continue; 를 통해 i = 0 인 경우 출력에서 제외시킬 수 있다.</span></div><div class="line"><span class="comment">// 이외에도 if (i % 2 === 1) continue; 를 통해 짝수가 아닌 수들을 제외하는 방향으로 진행할 수도 있다.</span></div></pre></td></tr></table></figure></li></ul></li><li><p>for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 문자열로 출력하시오.</p><ul><li>생각의 흐름: str라는 변수명을 가진 변수에 빈 문자열을 할당. for문을 이용해 1부터 10미만의 수를 반복시켜 값을 하나씩 얻어낸 후, if문을 활용해 각각의 값을 2로 나눈 나머지가 0인 값을 선택해 str이라는 문자열에 하나씩 더해준다. 반복이 끝나면 str을 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</div><div class="line">    str += i;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str + <span class="string">': '</span> + str);</div><div class="line"><span class="comment">// string: 2468</span></div><div class="line"></div><div class="line"><span class="comment">// Number 자료형을 String 자료형으로 바꾸는 방법</span></div><div class="line"><span class="comment">// Number 자료형 변수 val</span></div><div class="line"><span class="comment">// 1. val + ''(빈 문자열), 본 문제에서 사용한 방식</span></div><div class="line"><span class="comment">// 2. val.toString();</span></div><div class="line"><span class="comment">// 3. String(val); String()은 형 변환을 위한 함수가 아니기 때문에 비추</span></div></pre></td></tr></table></figure></li></ul></li><li><p>for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오.</p><ul><li>생각의 흐름: for문을 활용하여 9 부터 0 초과까지 1씩 빼면서 값을 하나하나 구해내어, 각각의 값을 2로 나눈 값이 0인 값만을 구해내 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">9</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 9</span></div><div class="line"><span class="comment">// 7</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 수를 감소시키면서 반복 가능.</span></div></pre></td></tr></table></figure></li></ul></li><li><p>while문을 사용하여 0부터 10까지 정수 중에서 짝수만을 작은 수부터 출력하시오.</p><ul><li>생각의 흐름: 반복 변수 변수 i를 0으로 할당한다. while문을 활용하여 반복변수 i가 10을 넘기면 반복을 정지시키는 조건을 설정하고, 매 반복마다 i에 1씩을 더해간다. 그 i의 값이 2로 나누어 0이 되면 그때그떄 i를 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</div><div class="line">  i++;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 8</span></div><div class="line"><span class="comment">// 첫 시도때 n이라는 변수도 함꼐 설정하여 출력값과 반복변수값를 따로 분리해서 만들었다. 그러나 결국 i와 n의 값이 동일하게 진행되어 n을 지우고 출력값과 반복변수값을 합쳐 코드를 간소화하였다.</span></div></pre></td></tr></table></figure></li></ul></li><li><p>while문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오.</p><ul><li>생각의 흐름: 반복 변수 i를 0으로, 출력할 값을 받을 변수 n을 10으로 할당한다. while문을 활용하여 i가 10을 넘으면 반복을 멈추도록 조건을 설정한다. 매 반복마다 i는 1씩 증가시키고, n은 1씩 감소시킨다. 이때 n을 2로 나눈 나머지가 0인 값을 제외하고 나머지 값을 매 반복마다 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</div><div class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</div><div class="line">  i++;</div><div class="line">  n--;</div><div class="line">  <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">  <span class="built_in">console</span>.log(n);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 9</span></div><div class="line"><span class="comment">// 7</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 1</span></div></pre></td></tr></table></figure></li></ul></li></ol><h2 id="조건에-맞는-합-구하기"><a href="#조건에-맞는-합-구하기" class="headerlink" title="조건에 맞는 합 구하기"></a>조건에 맞는 합 구하기</h2><ol><li><p>for 문을 사용하여 0부터 10미만의 정수의 합을 출력하시오</p><ul><li>생각의 흐름: sum_6의 값을 할당하지 않고, for문을 활용하여 i를 0부터 10미만까지 1씩 늘려가며 표현식을 반복한다. 표현식은 sum_6에 i값을 더해간다. 반복이 끝나면 sum_6을 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum_6 = <span class="literal">null</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  sum_6 += i;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum_6);</div><div class="line"><span class="comment">// 0+1+2+3+4+5+6+7+8+9 = 45</span></div></pre></td></tr></table></figure></li></ul></li><li><p>1부터 20까지의 정수 중에서 2 또는 3의 배수가 아닌 수의 총합을 구하시오.</p><ul><li>생각의 흐름: sum_7의 값을 할당하지 않고, for문을 활용하여 i를 0부터 20이하까지 1씩 늘려가며 표현식을 반복한다. 표현식은 sum_7에 i값을 더해가는데, 이때 i의 값이 2 또는 3의 배수일 때 값을 제외한다. 반복을 끝내고 sum_7을 형식에 맞게 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum_7 = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span> || i % <span class="number">2</span> === <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">  sum_7 += i</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'최종합: '</span> + sum_7);</div><div class="line"><span class="comment">// 0+1+5+7+11+13+17+19</span></div><div class="line"><span class="comment">// 최종합: 73</span></div></pre></td></tr></table></figure></li></ul></li><li><p>1부터 20까지의 정수 중에서 2 또는 3의 배수인 수의 총합을 구하시오.</p><ul><li>생각의 흐름: sum_8의 값을 할당하지 않고, for문을 활용하여 i를 0부터 20이하까지 1씩 늘려가며 표현식을 반복한다. 표현식은 sum_7에 i값을 더해가는데, 이때 i의 값이 2 또는 3의 배수일 때 값만을 더해간다. 반복을 끝내고 sum_8을 형식에 맞게 출력한다.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum_8 = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span> || i % <span class="number">2</span> === <span class="number">0</span>) &#123;</div><div class="line">    sum_8 += i</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'최종합: '</span> + sum_8);</div></pre></td></tr></table></figure></li></ul></li></ol><h2 id="주사위-두-눈-연산"><a href="#주사위-두-눈-연산" class="headerlink" title="주사위 두 눈 연산"></a>주사위 두 눈 연산</h2><ol><li>두 개의 주사위를 던졌을 때, 눈의 합이 6이 되는 모든 경우의 수를 출력하시오.<ul><li>생각의 흐름<ol><li><strong>내가 접근한 방식</strong>: for문을 활용하여 반복 변수 dice_a과 dice_b를 각각 1부터 6이하 까지 반복한다. 이중 for문을 활용하여 dice_a의 각 값마다 dice_b의 모든 값을 비교할 수 있게 하여 그 합을 sum이라는 변수에 담는데 sum이 6이 되었을 때만 출력한다. 예를 들어 dice_a가 1일 때, dice_b의 1~6까지 각각의 값을 모두 더해보고 그 값이 6일 때 그 값만을 출력하게 하는 것이다.</li><li><strong>배열을 활용한 방법</strong>: 변수 dice_a와 dice_b에 각각에 [1, 2, 3, 4, 5, 6]이라는 배열을 할당한다. 반복 변수 i를 0부터 6미만까지(배열 내 순서는 0부터 시작) 1씩 증가시키며 반복하고 1번의 방법과 마찬가지로 이중 for문을 활용해 dice_a의 i번째 값을 dice_b의 모든 값(반복변수j)과 합쳐보고 그 값이 6이 되면 출력한다. <strong>배열을 활용한 것이지만 생각의 흐름은 1번과 거의 비슷하다.</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 내가 접근한 방식</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> dice_a = <span class="number">1</span>; dice_a &lt;= <span class="number">6</span>; dice_a++) &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> dice_b = <span class="number">1</span>; dice_b &lt;= <span class="number">6</span>; dice_b++) &#123;</div><div class="line">    <span class="keyword">var</span> sum = dice_a + dice_b</div><div class="line">    <span class="keyword">if</span> (sum === <span class="number">6</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'(A '</span> + dice_a + <span class="string">', '</span> + dice_b + <span class="string">' B)'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// (A 1, 5 B)</span></div><div class="line"><span class="comment">// (A 2, 4 B)</span></div><div class="line"><span class="comment">// (A 3, 3 B)</span></div><div class="line"><span class="comment">// (A 4, 2 B)</span></div><div class="line"><span class="comment">// (A 5, 1 B)</span></div><div class="line"></div><div class="line"><span class="comment">// 2. 배열을 활용한 방법</span></div><div class="line">dice_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">dice_b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</div><div class="line">    <span class="keyword">if</span> (dice_a[i] + dice_b[j] === <span class="number">6</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'(A '</span> + dice_a[i] + <span class="string">', '</span> + dice_b[j] + <span class="string">' B)'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// (A 1, 5 B)</span></div><div class="line"><span class="comment">// (A 2, 4 B)</span></div><div class="line"><span class="comment">// (A 3, 3 B)</span></div><div class="line"><span class="comment">// (A 4, 2 B)</span></div><div class="line"><span class="comment">// (A 5, 1 B)</span></div></pre></td></tr></table></figure></li></ol></li></ul></li></ol><h2 id="로-삼각형-출력하기"><a href="#로-삼각형-출력하기" class="headerlink" title="*로 삼각형 출력하기"></a><code>*</code>로 삼각형 출력하기</h2><ol><li><p>삼각형 출력하기</p><ul><li>생각의 흐름</li></ul><ol><li><strong>for문과 매 반복마다 <code>console.log()</code>을 활용한 방법</strong>: sum_10을 빈 문자열로 할당한다. 반복 변수 i를 0부터 5 미만까지 1씩 증가시켜 반복해 표현식을 수행한다. 표현식은 sum_10에 매 반복마다 문자열 <code>*</code>을 더해주고 sum_10을 출력한다.</li><li><strong>이중 for문으로 매 반복마다 <code>*</code>을 더하는 방법</strong>: sum_10을 빈 문자열로 할당한다. 이중 for문을 활용하여 i를 0부터 5미만까지 1씩 증가시켜 반복하고 내부 for문은 반복 변수 r은 0부터 (i+1) 미만까지 1씩 증가시켜 반복한다. 내부 for문의 표현식을 sum_10에 <code>*</code>을 더해준다. i의 값에 따라 <code>*</code>의 반복 갯수를 결정해주는 방식이다.</li><li><strong>while문을 활용하는 방법</strong></li><li><strong>repeat() 함수를 활용하는 방법</strong></li><li><strong>switch를 활용한 방법</strong>: 배운 것을 활용해 봄.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. for문과 매 반복마다 `console.log()`을 활용한 방법</span></div><div class="line"><span class="keyword">var</span> sum_10 = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  sum_10 += <span class="string">'*'</span>;</div><div class="line">  <span class="built_in">console</span>.log(sum_10);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. 이중 for문으로 매 반복마다 `*`을 더하는 방법</span></div><div class="line"><span class="keyword">var</span> sum_10 = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; i + <span class="number">1</span>; r++) &#123;</div><div class="line">    sum_10 += <span class="string">'*'</span>;</div><div class="line">  &#125;</div><div class="line">  sum_10 += <span class="string">'\n'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum_10);</div><div class="line"></div><div class="line"><span class="comment">// 3. while문을 활용하는 방법</span></div><div class="line"><span class="keyword">var</span> c = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> result_10 = <span class="string">''</span>;</div><div class="line"><span class="keyword">while</span> (c &lt; <span class="number">5</span>) &#123;</div><div class="line">  c++;</div><div class="line">  result_10 += <span class="string">'*'</span>;</div><div class="line">  <span class="built_in">console</span>.log(result_10);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 4. repeat() 함수를 활용하는 방법</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'*'</span>.repeat(i));</div><div class="line">&#125;</div><div class="line"><span class="comment">// [반복시키고자 하는 값].repeat([반복시키고자 하는 횟수])</span></div><div class="line"></div><div class="line"><span class="comment">// 5. switch를 활용한 방법</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">switch</span> (i) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'*'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'**'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'***'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'****'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'*****'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 모두 다음과 같이 출력</span></div><div class="line"><span class="comment">// *</span></div><div class="line"><span class="comment">// **</span></div><div class="line"><span class="comment">// ***</span></div><div class="line"><span class="comment">// ****</span></div><div class="line"><span class="comment">// *****</span></div></pre></td></tr></table></figure></li><li><p>트리 출력하기</p><ul><li>생각의 흐름</li></ul><ol><li><strong>while문과 이중 for문을 동시에 사용하여 for문 2개를 단순나열을 해소하는 방법</strong>: for문을 이용해 i가 2부터 5이하까지 반복하여 i가 홀수인 경우에만 다음 방법을 수행한다. 다음 방법은 변수 n을 0으로 할당하고 sum_11을 빈 문자열로 할당한다. 또한 n이 i값 이하일때만 실행시키는 while문을 작성하고 이떄 n은 1씩 증가시키고 sum_11에 <code>*</code>를 더해나간 후 바로 sum_11을 출력한다.</li><li><strong>1번 방법을 도출하기 전 단계의 방법</strong>: 1번과 동일.</li><li><strong>for문 2개를 단순나열하는 방법</strong></li><li><strong>제일님 방법</strong>: for문을 활용하여 1~5까지 별을 합하여 출력시키는데 중간에 반복변수 i가 3일 때 한번 출력시키는 방법.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. while문과 이중 for문을 동시에 사용하여 for문의 단순나열을 해소하는 방법(2번 방법의 간소화)</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> sum_11 = <span class="string">''</span>;</div><div class="line">    <span class="keyword">while</span> (n &lt; i) &#123;</div><div class="line">      n++;</div><div class="line">      sum_11 += <span class="string">'*'</span></div><div class="line">      <span class="built_in">console</span>.log(sum_11);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. 1번 방법을 도출하기 전 단계의 방법</span></div><div class="line"><span class="comment">// for문에서 원하는 숫자값을 도출해서 그 1부터 그 숫자값까지의 별의 갯수를 출력해주는 방식</span></div><div class="line"><span class="comment">// 이럴거면 반복문을 왜 썼나 싶은 생각이 드는 방식</span></div><div class="line"><span class="keyword">var</span> sum_11_3 = <span class="string">''</span>;</div><div class="line"><span class="keyword">var</span> sum_11_5 = <span class="string">''</span>;</div><div class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> m = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (n &lt; i) &#123;</div><div class="line">      n++;</div><div class="line">      sum_11_3 = <span class="string">'*'</span>.repeat(n);</div><div class="line">      <span class="built_in">console</span>.log(sum_11_3);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i === <span class="number">5</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (m &lt; i) &#123;</div><div class="line">      m++;</div><div class="line">      sum_11_5 = <span class="string">'*'</span>.repeat(m);</div><div class="line">      <span class="built_in">console</span>.log(sum_11_5);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3. for문 2개를 단순나열하는 방법</span></div><div class="line"><span class="keyword">var</span> sum_11_3 = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">  sum_11_3 += <span class="string">'*'</span>;</div><div class="line">  <span class="built_in">console</span>.log(sum_11_3);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sum_11_5 = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  sum_11_5 += <span class="string">'*'</span>;</div><div class="line">  <span class="built_in">console</span>.log(sum_11_5);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 4. 제일님 방법</span></div><div class="line"><span class="keyword">var</span> starCount = <span class="string">''</span>;</div><div class="line"><span class="keyword">var</span> starSum = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  starCount += <span class="string">'*'</span>;</div><div class="line">  starSum += starCount + <span class="string">'\n'</span>;</div><div class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(starSum);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(starSum);</div><div class="line"></div><div class="line"><span class="comment">// 모두 다음과 같이 출력</span></div><div class="line"><span class="comment">// *</span></div><div class="line"><span class="comment">// **</span></div><div class="line"><span class="comment">// ***</span></div><div class="line"><span class="comment">// *</span></div><div class="line"><span class="comment">// **</span></div><div class="line"><span class="comment">// ***</span></div><div class="line"><span class="comment">// ****</span></div><div class="line"><span class="comment">// *****</span></div></pre></td></tr></table></figure></li><li><p>정삼각형 출력하기</p><ul><li>생각의 흐름</li></ul><ol><li><strong>for문과 2개의 내부 for문을 활용해 더해가는 방법</strong>: for문을 이용하여 반복변수 i를 1부터 5 이하까지 1씩 증가시키며 두 개의 내부 for문을 반복한다. 첫 for문은 반복변수 z를 0부터 (5-i)까지 1씩 증가시키면서 빈 칸 ‘ ‘을 더해간다. (5-i)미만까지 증가시키는 것이기 때문에 i값이 늘어날수록 ‘ ‘의 수는 줄어든다. 다음 for문은 반복변수 x를 0부터 (2<em>i-1)미만까지 1씩 증가시킨다. i의 값이 커질수록 `</em><code>의 수는 늘어난다. 이때 중요한 것이 외부 for문을 반복할떄마다</code>*`과 ‘ ‘을 더해 할당하는 변수 tree를 빈 값으로 할당하는 일종의 ‘초기화’ 과정이 필요하다는 것이다.</li><li><strong><code>repeat()</code> 함수를 활용한 방법</strong>: <code>repeat()</code> 함수를 사용하면 for문을 반복할 필요없이 간소하게 만들 수 있다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 3개의 for문을 활용하여 빈 칸의 수는 줄어들고 `*`은 늘어나게 하는 방법</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">var</span> tree = <span class="string">''</span>;</div><div class="line">  <span class="keyword">for</span> (z = <span class="number">0</span>; z &lt; <span class="number">5</span> - i; z++) &#123;</div><div class="line">    tree += <span class="string">' '</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">2</span> * i - <span class="number">1</span>; x++) &#123;</div><div class="line">    tree += <span class="string">'*'</span></div><div class="line">  &#125;</div><div class="line">    <span class="built_in">console</span>.log(tree);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. repeat() 함수 활용한 방법</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">var</span> space = <span class="string">' '</span>;</div><div class="line">  <span class="keyword">var</span> star = <span class="string">'*'</span>;</div><div class="line">  <span class="built_in">console</span>.log(space.repeat(<span class="number">5</span> - i) + star.repeat(<span class="number">2</span> * i - <span class="number">1</span>) + space.repeat(<span class="number">5</span> - i));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//     *</span></div><div class="line"><span class="comment">//    ***</span></div><div class="line"><span class="comment">//   *****</span></div><div class="line"><span class="comment">//  *******</span></div><div class="line"><span class="comment">// *********</span></div></pre></td></tr></table></figure></li><li><p>역-정삼각형 출력하기</p><ul><li>생각의 흐름</li></ul><ol><li><strong>for문과 2개의 내부 for문을 활용해 더해가는 방법</strong>: 12번의 방식을 활용하되, 빈 칸과 <code>*</code>을 만들어 줄 반복문의 반복 범위 설정에 주의한다. 이 방법은 함수화가 되지 않는 방식으로, 함수화가 되는 방식을 고민해야한다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. for문과 2개의 내부 for문을 활용해 더해가는 방법</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">var</span> tree = <span class="string">''</span>;</div><div class="line">  <span class="keyword">for</span> (x = <span class="number">1</span>; x &lt; i; x++) &#123;</div><div class="line">    tree += <span class="string">' '</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (z = <span class="number">0</span>; z &lt; <span class="number">10</span> - (<span class="number">2</span> * i - <span class="number">1</span>); z++) &#123;</div><div class="line">    tree += <span class="string">'*'</span></div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(tree);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// *********</span></div><div class="line"><span class="comment">//  *******</span></div><div class="line"><span class="comment">//   *****</span></div><div class="line"><span class="comment">//    ***</span></div><div class="line"><span class="comment">//     *</span></div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;조건에-맞는-수-출력-짝수-홀수&quot;&gt;&lt;a href=&quot;#조건에-맞는-수-출력-짝수-홀수&quot; class=&quot;headerlink&quot; title=&quot;조건에 맞는 수 출력(짝수, 홀수)&quot;&gt;&lt;/a&gt;조건에 맞는 수 출력(짝수, 홀수)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Algorithm quiz" scheme="http://girin-dev.github.io/categories/Algorithm-quiz/"/>
    
    
      <category term="Algorithm quiz" scheme="http://girin-dev.github.io/tags/Algorithm-quiz/"/>
    
  </entry>
  
  <entry>
    <title>170930~171001-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/30/170930-171001-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/30/170930-171001-TIL/</id>
    <published>2017-09-30T13:22:29.000Z</published>
    <updated>2017-10-02T02:59:25.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>반복문 함수 마무리 후 제출<ul><li><a href="https://girin-dev.github.io/2017/10/01/Algorithm-iteration-easy/">알고리즘 퀴즈 (JavaScript, 반복문, 쉬움)</a> 정리</li><li>함수화 마무리 후 제출</li></ul></li><li>주말~추석 과제 및 복습<ul><li>하루에 최소 2개 파트씩 정리</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>해야할 과제가 많기 떄문에 추석에도 노트북을 가져가야 할 것 같다. 인쇄를 해가면 더 좋았을텐데 어차피 .md파일로 저장해야 하니까 노트북을 아예 갖고 가야겠다.</li><li>Angular와 Angular2의 차이가 뭘까 궁금해서 검색해봤더니 Angular는 ES5를 활용하고 Angular2는 Typescript를 활용한 방식이라고 한다.</li></ul><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><ul><li>Angular와 Angular2<ul><li><a href="http://www.sbeenlife.com/22" target="_blank" rel="external">http://www.sbeenlife.com/22</a> (특징과 유용성에 대한 여러 차이점 서술)</li><li><a href="https://hackya.com/kr/angular-angular2-%EA%B7%B8%EB%A6%AC%EA%B3%A0-typescript/" target="_blank" rel="external">https://hackya.com/kr/angular-angular2-%EA%B7%B8%EB%A6%AC%EA%B3%A0-typescript/</a> (이 글은 댓글을 통해 논쟁이 오가고 있으며 내용에 대해서 논란이 있는 듯 하다.)</li></ul></li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>11.Scope, 12.this 복습 및 정리</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;반복문 함수 마무리 후 제출&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://girin-d
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>170929-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/29/170929-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/29/170929-TIL/</id>
    <published>2017-09-29T08:00:08.000Z</published>
    <updated>2017-10-01T06:44:29.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Activity</p><ul><li><a href="https://github.com/march23hare/FDS6Triangle" target="_blank" rel="external"><code>*</code> 역-정삼각형 만들기 함수화 풀이</a><ul><li><code>반복문</code>을 활용한 풀이</li><li><code>재귀함수</code>를 활용한 풀이</li></ul></li><li><code>Git</code> fork 뜬 레포를 원본 레포로 최신화하는 방법<ul><li>fork 뜬 레포를 직접 최신화하는 방법은 없음.</li><li>로컬 영역에 clone 뜬 디렉토리를 원본 레포로 pull 받아 fork 뜬 레포로 push 하는 방법이 있음<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">cd</span> [fork 뜬 레포를 pull 받은 로컬 디렉토리]</div><div class="line"></div><div class="line"><span class="comment"># 로컬 디렉토리에 원본 레포를 연결 후 pull</span></div><div class="line">&gt; git remote add upstream [원본 레포 주소]</div><div class="line">&gt; git pull upstream [브랜치명]</div><div class="line"></div><div class="line"><span class="comment"># 최신화 된 로컬 디렉토리를 fork 뜬 레포로 push</span></div><div class="line">&gt; git push origin master</div></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>JavaScript</p><ul><li>프로토타입과 객체지향(Prototype)<ul><li>프로토타입 객체</li><li>[[Prototype]] 프로퍼티 vs prototype 프로퍼티</li><li>constructor 프로퍼티</li><li>Prototype chain</li><li>프로토타입 객체의 확장</li><li>기본자료형(Primitive data type)의 확장</li><li>프로토타입 객체의 변경</li><li>포로토타입 체인 동작 조건</li></ul></li><li>Scope<ul><li>Global scope</li><li>Non block-level scope</li><li>Function scope</li><li>암묵적 전역 (implied globals)</li><li>Lexical scoping (Static scoping)</li><li>변수명의 중복</li><li>최소한의 전역변수 사용</li><li>즉시실행함수를 이용한 전역변수 사용 억제</li></ul></li><li>this<ul><li>함수 호출 패턴과 this 바인딩</li><li>함수 호출 패턴(Function Invocation Pattern)</li><li>메소드 호출 패턴(Method Invocation Pattern)</li><li>생성자 호출 패턴(Constructor Invocation Pattern)<ul><li>생성자 함수 동작 방식</li><li>객체 리터럴 방식과 생성자 함수 방식의 차이</li><li>생성자 함수에 new 연산자를 붙이지 않고 호출할 경우</li></ul></li><li>apply 호출 패턴(Apply Invocation Pattern)</li></ul></li></ul></li><li>프로그래머 소양<ul><li>진짜 실력은 버그가 발생했을 때 문제를 해결하는 능력</li><li>자기가 짠 코드의 작동 원리를 모르면 절대 해결할 수 없음</li><li>JavaScript built-in은 기본이고 Deepdive도 지속적 공부 필요.</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>this 부분이 특히 어려워서 복습이 필수인 것 같다.</li><li>prototype 부분은 처음엔 어려웠는데 한번 이해가 되니 기억도 잘나고 효과도 직접 설명할 수 있을 것 같다. this도 이럴 수 있도록 복습하자.</li><li>추석 연휴동안 그동안 챙기지 못했던 부분과 정리하지 못했던 부분을 챙기고, 전체적인 복습을 하자.</li><li>개발은 노력을 배신하지 않는 분야인 것 같다.</li></ul><h2 id="주말동안-할-일"><a href="#주말동안-할-일" class="headerlink" title="주말동안 할 일"></a>주말동안 할 일</h2><ul><li>반복문 함수 마무리 후 제출</li><li>주말, 추석 과제 및 복습</li><li>poiemweb 인쇄 알아보기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>170928-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/28/170928-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/28/170928-TIL/</id>
    <published>2017-09-28T01:18:19.000Z</published>
    <updated>2017-10-02T02:25:08.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Activity<ul><li>CLI 명령어</li></ul></li><li>채용정보<ul><li>중요한 건 <code>이론</code>과 <code>기본지식</code> =&gt; 왜 이렇게 쓰는가?<ul><li>AWS, Git &amp; Github, HTTP, RESTful AP<ul><li>아니 적어도 풀네임 정도라도 알자.</li></ul></li><li>언어 / 환경 / 구조(앵귤러?리엑트? 뭘 써봤으며 왜 그걸 썼니?) /</li><li><strong>Webpack</strong>, Grunt, Gulp, Browserify 도구 경험</li><li>협업능력: 나의 요구사항, 상대의 요구사항을 잘 이해하고 반영할 수 있는가? 문서 작성, 주석 등…</li></ul></li><li>개발자에게 질문하는 법<ul><li><a href="https://www.kjwon15.net/wordpress/articles/free/517" target="_blank" rel="external">국문</a></li><li><a href="https://codingkilledthecat.wordpress.com/2012/06/26/how-to-ask-for-programming-help/" target="_blank" rel="external">영문</a></li></ul></li></ul></li><li>JavaScript<ul><li>객체(Object)<ul><li>객체란?</li><li><strong>객체 생성 방법</strong><ol><li>객체 리터럴</li><li><code>Objcet()</code> 생성자 함수</li><li>생성자 함수</li></ol></li><li>객체 프로퍼티 접근</li><li>pass-by-reference</li><li>pass-by-value</li><li>객체의 분류</li></ul></li><li>함수 (Function)<ul><li>함수 정의</li><li><strong>함수 생성 방법 (중요)</strong><ol><li>함수 선언식</li><li>함수 표현식</li><li><code>Function()</code> 생성자 함수</li></ol></li><li>함수 호이스팅</li><li>First-class object(일급객체)</li><li>매개변수(parameter, 인자)</li><li>반환값</li><li>함수 객체의 프로퍼티</li><li>함수의 다양한 형태</li></ul></li><li><strong><code>Prototype</code></strong> 맛보기</li></ul></li><li>반복문 예제 13문<ul><li><code>*</code> 역-정삼각형 만들기</li><li>예제 12번, 13번을 함수화하기</li></ul></li><li>예습<ul><li>Prototype</li><li>Scope</li><li>this</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>개발자로의 취업에 있어서 가장 중요한 건 <code>코딩테스트</code>와 <code>면접</code>. 이를 위해서 이론 공부가 필수적이다. 예전에는 ‘그냥 만들면 되는거 아냐?’, ‘포트폴리오 잘 만들면 그게 곧 실력이지’ 라고 생각했는데 현실은 전혀 달랐던 것 같다. 생각하면 할수록 컴공 부전공을 하지 않은게 후회된다. 하지만 지금이라도 열심히 해야지.</li><li><code>Prototype</code> 부분이 이해가 안가서 팀원 선화님과 계속 서로 설명해가면서 이해하려 노력했고, 최종적으로 선생님의 설명을 들었을때 서로의 대화가 유익했다는 것을 깨달았다. 개발자들끼리 소통하고 정보를 공유하는 것이 실력향상과 개념이해에도 좋은 영향을 끼치는 것 같다.</li><li>별로 역-정삼각형을 만다는 것은 이미 지난 수요일(27일)에 완성했으나 이것을 함수화하는 것은 또 차원이 다른 문제였다. 아예 생성원리를 다시 고민해서 새로 코딩을 해야 한다.</li><li>스쿨 멤버들과 치킨을 먹었다. 선생님과 조교님도 함께 먹었는데 정작 이걸 주도한 매니저님은 못 오셔서 아쉬웠다.</li><li>지금은 JavaScript를 하는데도 시간이 모자란다. Vue.js나 마크업css는 주말로 옮기고, 오히려 여유가 조금 생기면 알고리즘 문제를 하루에 하나씩이라도 풀어봐야겠다.</li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li><code>*</code> 역-정삼각형 만들기 함수화 풀이</li><li>예습하고 복습 및 정리</li><li>과제</li><li>주말과 추석 계획 세우기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Activity&lt;ul&gt;
&lt;li&gt;CLI 명령어&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;채용
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>170927-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/27/170927-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/27/170927-TIL/</id>
    <published>2017-09-27T10:08:12.000Z</published>
    <updated>2017-09-27T18:18:04.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>커맨드 라인 연습<ul><li>장고걸스 튜토리얼: <a href="https://tutorial.djangogirls.org/ko/intro_to_command_line/" target="_blank" rel="external">커맨드라인 시작하기</a></li><li><code>whoami</code> 사용자 이름 출력</li><li><code>rm -r [폴더명]</code> 폴더(디렉토리) 삭제</li><li><code>cp</code> 파일 복사</li><li><code>mv</code> 파일 이동</li><li>명령어 모음 <a href="https://ss64.com" target="_blank" rel="external">https://ss64.com</a></li></ul></li><li>JavaScript<ul><li>반복문 활용 문제 13개 풀이 및 발표</li><li>7~10과 예습<ul><li>Object</li><li>Immutability</li><li>Function-level</li><li>Prototye</li></ul></li><li>4~6과 복습</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>같은 학생들끼리 알고리즘을 푸는 시간이 무척 즐거웠다. 따로 알고리즘 스터디를 하고 싶을 정도이다. 물론 때마침 토요일 스터디를 모집하는 글이 뜨긴 했는데, 토요일에 시간이 날지 모르겠어서 일단은 유보중… 스쿨 내에서 자바스크립트에 집중하는 알고리즘 스터디를 해보는 것도 좋겠다.</li><li>첫 self-study 시간과 미션 시간을 보냈는데, 굉장히 만족스러웠다.</li><li>같은 학생들끼리 점심도 먹고 커피도 마시면서 간단한 네트워킹 시간을 가질 수 있었다. 도시락을 먹는 것도 좋은데 종종 이런 시간도 가질 필요가 있겠다. 마침 내일은 치킨을 먹는다고 하니 더 친해지고 많은 정보를 공유하고 싶다.</li><li>맥북을 <code>high sierra</code>로 업데이트 했다. git관련 명령어가 잘 먹지 않아서 검색해보니 <code>Xcode Command Line Tools</code> 의존성 이슈가 발생하는 경우라고 한다. 예전에 <code>OS X El Capitan</code>에서 <code>macOS Sierra</code> 업데이트할 때도 이런 일이 있었다던데 매 업데이트마다 신경써줘야 하는 것 같다. (<a href="http://redutan.github.io/2015/10/05/osx-after-update-git-error" target="_blank" rel="external">http://redutan.github.io/2015/10/05/osx-after-update-git-error</a>)</li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>반복문 활용 알고리즘 문제 13개 풀이</li><li>복습과 예습</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;커맨드 라인 연습&lt;ul&gt;
&lt;li&gt;장고걸스 튜토리얼: &lt;a href=&quot;https://tu
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 04. 자료형과 변수(Data type &amp; Variable)</title>
    <link href="http://girin-dev.github.io/2017/09/26/JavaScript-04-Data_type&amp;Variable/"/>
    <id>http://girin-dev.github.io/2017/09/26/JavaScript-04-Data_type&amp;Variable/</id>
    <published>2017-09-26T10:32:37.000Z</published>
    <updated>2017-10-02T02:41:03.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-04-자료형과-변수-Data-type-amp-Variable"><a href="#JavaScript-04-자료형과-변수-Data-type-amp-Variable" class="headerlink" title="JavaScript 04. 자료형과 변수(Data type &amp; Variable)"></a>JavaScript 04. 자료형과 변수(Data type &amp; Variable)</h1><ul><li>프로그래밍이란<br><strong>변수</strong>를 통해 값을 저장, 참조하고<br><strong>연산자</strong>로 값을 연산, 평가하고<br><strong>조건문과 반복문</strong>에 의한 흐름제어로 데이터 흐름을 제어하고<br><strong>함수</strong>로 재사용이 가능한 구문의 집합을 만들며<br><strong>객체, 배열</strong> 등으로 자료를 구조화하는 것  </li><li>변수<ul><li>변수에 값을 할당한다는 것은 OS가 값을 저장하기 위해 메모리 공간을 확보하는 것을 말한다. JavaScript의 경우 <code>undefined</code>라는 변수값을 통해 확보하는데 이를 초기화라고 한다.</li><li>결국 변수라는 것은 값이 할당된 메모리의 주소(Memory address)에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 이름표(식별자, identifier). 실제 위치틑 0x00…. 식의 16진수 숫자로 나타난다.</li></ul></li><li>변수값 할당과 재할당<ul><li>할당 : <code>undefined</code>로 할당되어 있던 메모리 위치를 다른 위치에 할당한 변수값의 위치로 가르키게 함 (참조). 이때 <code>undefined</code>는 바로 사라지지 않고 적절한 때에 삭제됨(<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management" target="_blank" rel="external">가비지 콜렉션</a></li><li>재할당 : 기존에 할당된 값을 바꾸는 것이 아니라 다른 위치에 값을 입력하고 그 위치로 재할당하는 것(참조를 바꿈)</li><li>변경불가한 값에 해당(immutable value)</li></ul></li><li>자료형은 이러한 변수를 할당할 때, 값의 종류에 따라 확보해야할 메모리 크기가 다르기 때문에 나타나는 분류이다.</li></ul><h2 id="기본자료형-Primitive-Data-Type"><a href="#기본자료형-Primitive-Data-Type" class="headerlink" title="기본자료형 (Primitive Data Type)"></a>기본자료형 (Primitive Data Type)</h2><ul><li>변경 불가능한 값(immutable value)</li><li><strong>pass-by-value</strong><br>값은 값으로 복사되어 전달되지, 변경되지 않는다.</li></ul><ol><li><code>boolean</code><br><code>true</code>/<code>false</code> 두 가지 값을 가질 수 있고<br><code>null</code>, <code>undefined</code>, 숫자 0은 <code>false</code>로 간주된다.</li><li><code>null</code><br>오직 <code>null</code> 값만을 갖는다. <code>null</code> 값은 참조정보를 제거한다, 변수값이 할당되어 있는 메모리 주소를 제거한다 정도의 의미. 참조가 없어진 메모리 영역은 마찬가지로 가비지 콜렉션 수행.</li><li><code>undefined</code><br>값이 할당되지 않은 변수가 가진 값. 선언되었으나 할당이 되지 않았을 경우.</li><li><code>Number</code><br>JavaScript는 오로지 하나의 숫자 자료형만 존재.<br><code>+/- Infinity</code>, <code>NaN</code>을 포함</li><li><code>String</code><br>문자열 타입으로 텍스트 데이터 사용.<br><strong>유사배열</strong> 로서 인덱스를 통해 접근가능하나 변경할 수 없고 오직 read만 가능하다.</li><li><code>Symbol</code><br>ES6에 새롭게 추가된 자료형으로 애플리케이션 전체에서 유일하며 변경 불가능한(immutable) 기본 자료형(primitive)이다. 주로 객체의 프로퍼티 키(property key)로 사용한다.</li></ol><h2 id="객체형-Object-type-참조형"><a href="#객체형-Object-type-참조형" class="headerlink" title="객체형 (Object type, 참조형)"></a>객체형 (Object type, 참조형)</h2><ul><li>객체는 데이터와 그 데이터에 관련되는 동작(절차,방법,기능)을 모두 포함할 수 있는 개념적 존재.</li><li>프로퍼티(property, 이름과 값을 갖는 데이터)와 메소드(method, 동작을 의미)를 포함하는 독립적 주체</li><li><strong>pass-by-reference</strong></li></ul><h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><ul><li>변수명 명명규칙<ul><li>목적과 기능에 맞고 알아보기 쉽게 짓기</li><li>대소문자 구분 가능 주의</li><li>첫글자는 영문자(특수문자 제외), underscore ( _ ), 또는 달러 기호($)만 가능</li></ul></li><li>변수의 중복 선언<ul><li>사용 가능하다 비추.</li></ul></li><li>변수 선언시 var 생략 허용<ul><li>사용가능하지만 의도치 않게 변수를 전역화할 수 있음. 비추.</li></ul></li><li>동적 타이핑 (Dynamic Typing)<ul><li>변수의 타입설정이 필요없이 할당되는 과정에서 자동으로 자료형이 결정되는 구조.</li></ul></li><li>변수 호이스팅(Variable Hoisting)<ul><li>변수 선언의 3단계<ol><li>선언 단계 (VO(variable object)에서 이루어짐)</li><li>초기화 단계</li><li>할당 단계</li></ol></li><li>선언단계와 초기화단계는 한번에 이루어짐. 이 단계는 한줄한줄 읽어가면서 var을 만날 때 하는것이 아니라 자바스크립트 전체 문서를 쫙 읽은 다음에 변수 선언문을 싹 뽑아서 이 단계를 실행한 뒤 한줄한줄 읽어나간다. 이것이 변수 호이스팅.</li><li>변수 선언문의 위치가 별로 중요하지 않으나 가급적 변수 이용문(?) 보다 위에, 그리고 문서 맨 위에 위치시키는 것이 좋다. 이것은 ESLint의 규칙이기도 하다.</li></ul></li><li>var 키워드로 선언된 변수의 문제점<ul><li>Function-level scope, var 생략 허용, 중복 선언 허용, 변수 호이스팅 등 JavaScript의 특징이 전역 변수의 남발, 의도치 않은 변수값 변경 등의 문제를 발생시킴.</li><li>복잡성, 성능이슈, 상호의존성 등 여러 면에서 변수의 범위는 좁을수록 좋다. 전역변수는 남발하지 말 것.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-04-자료형과-변수-Data-type-amp-Variable&quot;&gt;&lt;a href=&quot;#JavaScript-04-자료형과-변수-Data-type-amp-Variable&quot; class=&quot;headerlink&quot; title=&quot;Java
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://girin-dev.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>170926-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/26/170926-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/26/170926-TIL/</id>
    <published>2017-09-26T09:27:47.000Z</published>
    <updated>2017-10-02T03:25:29.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Activity</p><ul><li>터미널 명령어 학습<br><code>.</code> 현재 디렉토리<br><code>..</code> 상위(부모) 디렉토리<br><code>../..</code> 상위(부모)의 상위 디렉토리<br><code>~</code> (물결 tilde) 루트 디렉토리<br><code>pwd</code> (present working directory) 현재 디렉토리 표시<br><code>[명령어] --help</code> 명령어의 도움말 정보 표시<br><code>cat [파일명]</code> 해당 파일 보기<br><code>cat [파일1] &gt; [파일2]</code> 파일 1의 내용을 그대로 복사하여 파일2 만들기<br><code>man [명령어]</code> 해당 명령어의 메뉴얼 보기(–help와 비슷)</li></ul></li><li><p>JavaScript</p></li><li><a href="https://girin-dev.github.io/2017/09/26/JavaScript-04.Data_type&amp;Variable/">자료형과 변수 (Data type &amp; Variable)</a><ul><li>기본자료형 (Primitive Data Type)</li><li>객체형 (Object type, 참조형)</li><li>변수</li></ul></li><li>연산자(Operator)<ul><li>산술 연산자 (Arithmetic Operators)</li><li>대입 연산자 (Assignment Operators)</li><li>비교 연산자 (Comparison Operators)</li><li>논리 연산자 (Logical Operators)</li><li>단축 평가 (Short-Circuit Evaluation)</li><li>타입 연산자 (Type Operators)</li><li>!!</li></ul></li><li><p>제어문(Control Flow)</p><ul><li>블록 구문 (Block statement)</li><li>조건문 (Conditional statement)</li><li>반복문 (Loop)</li><li>평가(Evaluating)]</li></ul></li><li><p>유용한 플러그인</p><ul><li>auto rename</li><li>Beautify</li><li>bookmark</li><li>code runner (ctrl+alt+n)</li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;터미널 명령어 학습&lt;br&gt;&lt;code&gt;.&lt;/
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>170925-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/25/170925-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/25/170925-TIL/</id>
    <published>2017-09-25T08:08:10.000Z</published>
    <updated>2017-09-26T01:31:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li>Scrum</li><li>JavaScript<ul><li><a href="http://poiemaweb.com/coding" target="_blank" rel="external">Coding!</a><ul><li>프로그래밍 언어:</li><li>0과 1과 연산 이 세 가지로 모든 것을 해내는 컴퓨터</li></ul></li><li><a href="http://poiemaweb.com/js-introduction" target="_blank" rel="external">Introduction!</a><ul><li>자바스크립트의 개요와 역사</li><li>EMCAScript6</li></ul></li><li><a href="http://poiemaweb.com/js-syntax-basics" target="_blank" rel="external">Syntax Basics</a><ul><li>HTML에서 JavaScript 실행하기</li><li>브라우저 동작원리</li><li><code>&lt;script&gt;</code>의 위치 중요성</li><li><code>&lt;script async src=&quot;&quot;&gt;</code>, <code>&lt;script defer src=&quot;&quot;</code>의 기능과 차이(ie9이하 지원x)</li><li>구문, 표현식, 변수, 값, 연산자, 키워드, 주석</li></ul></li><li><a href="http://poiemaweb.com/eslint" target="_blank" rel="external">ESlint 설치</a><ul><li>JavaScript 코드 점검을 해주는 플러그인</li><li>ESLint 공식 사이트 <a href="https://eslint.org/" target="_blank" rel="external">https://eslint.org/</a></li><li>ESLint 설치법 <a href="http://poiemaweb.com/eslint" target="_blank" rel="external">http://poiemaweb.com/eslint</a></li></ul></li></ul></li><li>예습<ul><li><a href="http://poiemaweb.com/js-data-type-variable" target="_blank" rel="external">Data type &amp; Variable</a><ul><li>가비지 콜렉션</li><li>호이스팅</li></ul></li><li><a href="http://poiemaweb.com/js-operator" target="_blank" rel="external">Operator</a></li><li><a href="http://poiemaweb.com/js-control-flow" target="_blank" rel="external">Control Flow</a></li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>무엇보다 중요한 것은 기초</li><li>포트폴리오보다는 코딩실력과 입사시험 대비</li><li>자바스크립트로 크로스플랫폼 앱제작이 가능하다는게 놀랍다. <a href="https://electron.atom.io/" target="_blank" rel="external">일렉트론</a>, <a href="http://ionicframework.com/docs/v1/guide/preface.html" target="_blank" rel="external">아이오닉</a> 기회가 되면 공부해보고 싶다. 일렉트론은 인플런에도 관련 강좌가 있다.</li><li>예습, 복습을 철저히 하자. 입시공부하듯!</li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>예습 &amp; 복습</li><li>코딩퀴즈 풀어보기(1문제)</li><li>Vue.js 30분</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Scrum&lt;/li&gt;
&lt;li&gt;JavaScript&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>170923~170924-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/23/170923-170924-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/23/170923-170924-TIL/</id>
    <published>2017-09-23T04:21:23.000Z</published>
    <updated>2017-10-01T06:44:31.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><a href="https://www.facebook.com/groups/botgroup/permalink/677725575757942/" target="_blank" rel="external">주말에 끝내는 챗봇</a> 참석<ul><li>챗봇에 대한 간략한 정보와 챗봇을 개발, 배포할 수 있는 Azure Bot Framework 소개</li><li>챗봇을 사용하는 스타트업들<ul><li>날씨 알림형: <a href="https://www.facebook.com/hiponcho/" target="_blank" rel="external">판초(pancho)</a></li><li>개인별 추천형: H&amp;M, Skyscanner, <a href="https://www.kayak.co.kr/messenger" target="_blank" rel="external">카약</a></li><li>공공기관형, GS Shop 등 홈쇼핑, <a href="http://verticalplatform.kr/archives/7944" target="_blank" rel="external">조이의 채널서비스</a></li></ul></li><li>챗봇의 형식<ol><li>사용자 인풋을 받아 스크립트 처리 후 echo (분노 챗봇 새새)</li><li>자연어 처리를 통해 사용자 의도(intent) 파악 후 대답 (Jill Watson 수업 조교 봇)</li><li>단순한 Q&amp;A (쇼핑몰과 카페 등 소규모 사업장)</li></ol></li><li>좋은 봇의 기준<ol><li>최소한의 단계로 사용자의 문제를 해결하는가?</li><li>대체 경험보다 더 낫고 빠르고 쉽게 사용자의 문제를 해결하는가? (트리구조는 안 좋은 예시)</li><li>사용자가 자연스럽게 그 봇을 사용할 때 무엇을 해야하는지 알고 있는가? (봇이 사전에 알려주는 방법이 있음)</li></ol></li><li><a href="https://dev.botframework.com/" target="_blank" rel="external">Azure Bot Framework</a><ul><li>웹 소스를 제공하여 타 웹사이트에 <code>&lt;iframe&gt;</code>을 이용해 부착 가능</li><li>서버 구축은 C#이나 Node.js를 통해 지원</li></ul></li><li><a href="https://www.luis.ai/home" target="_blank" rel="external">LUIS</a><ul><li>Language Understanding Intelligent Service</li><li>MS에서 만든 자연어 처리 API</li></ul></li><li>참고 사이트<ul><li>챗봇 개발의 이해 <a href="http://jincrom.tistory.com/61" target="_blank" rel="external">http://jincrom.tistory.com/61</a></li><li>챗봇 개발의 생태계 <a href="https://brunch.co.kr/@pilsogood/2" target="_blank" rel="external">https://brunch.co.kr/@pilsogood/2</a></li></ul></li></ul></li><li>Vue.js<ul><li>상-하위 컴포넌트 간 데이터 전달 방법(Parent-Child 컴포넌트 통신)</li><li>Props</li><li>Event Bus</li><li>Component - Props - For</li></ul></li><li>HTML&amp;CSS 복습</li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>주말에 끝내는 챗봇<ul><li>챗봇이라는 세계를 처음 만났다. 의외로 많은 사람들이 사용하고 있는 서비스였고 최근 인공지능의 등장과 함께 시너지효과도 일으킬 수 있는 유망있는 세계인 것 같다. 신세계를 만난 기분이었다. 특히 고인을 그대로 챗봇으로 만들어 소통한다는 걸 본 것은 무척 기이한 경험었다.</li><li>그러나 컨퍼런스 자체는 주제와 타겟이 불명확했다. 챗봇에 대한 설명인지, 개발하는 방법을 알려주는건지, 아니면 그냥 Azure를 홍보하는건지 알 수 없었다. 또 청자가 개발자면 개발자, 사업자면 사업자, 학생이면 학생이어야 할텐데 모든 사람들이 짬뽕되어 특히 구체적인 깊은 개발 이야기가 나올때 아마 많은 사람들이 이해하지 못했을 것 같다.</li><li>2차 컨퍼런스는 실제 개발을 할 거라고 하는데.. 갈지 말지 고민된다. 사실 혼자 공부해서 개발할 수도 있을 것 같은데.. 딱히 Azure Bot Framework가 메리트 있는지도 모르겠고…</li></ul></li></ul><h2 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h2><ul><li>패캠강의 복습 및 정리</li><li>왓챠와 디에디트 진행</li><li>Vue.js 강의</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/botgrou
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
  <entry>
    <title>170922-TIL</title>
    <link href="http://girin-dev.github.io/2017/09/22/170922-TIL/"/>
    <id>http://girin-dev.github.io/2017/09/22/170922-TIL/</id>
    <published>2017-09-22T09:16:51.000Z</published>
    <updated>2017-09-26T09:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Fastcampus  </p><ul><li>Activity</li><li><p>HTML &amp; CSS</p><ul><li><code>position: sitcky</code> (ie11 미지원, 여러 브라우저 부분적 지원)</li><li>polyfil<br>우회적으로 적용하는 방법이라는 뜻. 보통 스크립트를 활용.</li><li><p><code>transform: rotate([0~360]deg);</code></p><ul><li>요소 회전시키기<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">  <span class="comment">/*(+)시계방향, (-)반시계방향*/</span></div><div class="line">  <span class="comment">/*시계방향 90도 회전*/</span></div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(90deg);</div><div class="line">  <span class="comment">/* 회전기준점을 좌측 하단으로 설정 */</span></div><div class="line">  <span class="attribute">transform-origin</span>: bottom left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>반응형 웹디자인 예제 완성</p></li><li>HTML &amp; CSS 수업 종료</li></ul></li></ul></li></ul><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><ul><li>HTML &amp; CSS 수업 종료<ul><li>김데레사님의 2주동안의 강의는 정말 만족스러웠다. 실습시간이 부족했던 것이 조금 걸리지만 코스의 특성상 어쩔 수 없는 측면도 있었을 것 같다. 배운 것을 바탕으로 HTML과 CSS는 스스로 공부하는 수 밖에 없다.</li><li>줄어든 HTML&amp;CSS만큼 JavaScript가 늘었으니 더 열심히 해야겠다.</li><li>HTML&amp;CSS도 매일 꾸준히 복습, 공부 해야지</li></ul></li></ul><h2 id="주말동안-할-일"><a href="#주말동안-할-일" class="headerlink" title="주말동안 할 일"></a>주말동안 할 일</h2><ul><li>패캠강의 복습 및 정리</li><li>이전 과제 분석</li><li>Vue.js 강의</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fastcampus  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
      <category term="TIL" scheme="http://girin-dev.github.io/categories/TIL/"/>
    
    
      <category term="TIL(Today I Learned)" scheme="http://girin-dev.github.io/tags/TIL-Today-I-Learned/"/>
    
  </entry>
  
</feed>
